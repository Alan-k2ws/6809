0001                         ;
0002                         ; 6809 Disassembler
0003                         ;
0004                         ; Copyright (C) 2019 by Jeff Tranter <tranter@pobox.com>
0005                         ;
0006                         ; Licensed under the Apache License, Version 2.0 (the "License");
0007                         ; you may not use this file except in compliance with the License.
0008                         ; You may obtain a copy of the License at
0009                         ;
0010                         ;   http://www.apache.org/licenses/LICENSE-2.0
0011                         ;
0012                         ; Unless required by applicable law or agreed to in writing, software
0013                         ; distributed under the License is distributed on an "AS IS" BASIS,
0014                         ; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0015                         ; See the License for the specific language governing permissions and
0016                         ; limitations under the License.
0017                         ;
0018                         ; Revision History
0019                         ; Version Date         Comments
0020                         ; 0.0     29-Jan-2019  First version started, based on 6502 code.
0021                         ; 0.1     03-Feb-2019  All instructions now supported.
0022                         ;
0023                         ; To Do:
0024                         ; - Other TODOs in code
0025                         ; - Add option to suppress data bytes in output (for feeding back into assembler)
0026                         ; - Add option to show invalid opcodes as constants
0027                         ; - Some unwanted spaces in output due to use of ASSIST09 routines
0028                         
0029                         ; Character defines
0030                         
0031 0004                    EOT     EQU     $04             ; String terminator
0032 000a                    LF      EQU     $0A             ; Line feed
0033 000d                    CR      EQU     $0D             ; Carriage return
0034 0020                    SP      EQU     $20             ; Space
0035                         
0036 0018                    PAGELEN EQU     24              ; Number of instructions to show before waiting for keypress
0037                         
0038                         ; ASSIST09 SWI call numbers
0039                         
0040 0000                    INCHNP  EQU     0               ; INPUT CHAR IN A REG - NO PARITY
0041 0001                    OUTCH   EQU     1               ; OUTPUT CHAR FROM A REG
0042 0002                    PDATA1  EQU     2               ; OUTPUT STRING
0043 0003                    PDATA   EQU     3               ; OUTPUT CR/LF THEN STRING
0044 0004                    OUT2HS  EQU     4               ; OUTPUT TWO HEX AND SPACE
0045 0005                    OUT4HS  EQU     5               ; OUTPUT FOUR HEX AND SPACE
0046 0006                    PCRLF   EQU     6               ; OUTPUT CR/LF
0047 0007                    SPACE   EQU     7               ; OUTPUT A SPACE
0048 0008                    MONITR  EQU     8               ; ENTER ASSIST09 MONITOR
0049 0009                    VCTRSW  EQU     9               ; VECTOR EXAMINE/SWITCH
0050 000a                    BRKPT   EQU     10              ; USER PROGRAM BREAKPOINT
0051 000b                    PAUSE   EQU     11              ; TASK PAUSE FUNCTION
0052                         
0053 002c                    CMDL2   EQU     44              ; Secondary command list subcommand
0054                         
0055                         ; ASSIST09 Monitor Addresses
0056                         
0057 6093                    PCNTER  EQU     $6093           ; Stores last PC value
0058 fe5c                    CDNUM   EQU     $FE5C           ; Get number on command line. Note: Only valid for a particular ROM version.
0059                         
0060                         ; Start address
0061 1000                            ORG     $1000
0062 1000 20 0d                      BRA     START           ; So start address stays constant
0063                         
0064                         ; Variables
0065                         
0066 1002                    ADDR    RMB     2               ; Current address to disassemble
0067 1004                    OPCODE  RMB     1               ; Opcode of instruction
0068 1005                    AM      RMB     1               ; Addressing mode of instruction
0069 1006                    OPTYPE  RMB     1               ; Instruction type
0070 1007                    POSTBYT RMB     1               ; Post byte (for indexed addressing)
0071 1008                    LEN     RMB     1               ; Length of instruction
0072 1009                    TEMP    RMB     2               ; Temp variable (used by print routines)
0073 100b                    TEMP1   RMB     2               ; Temp variable
0074 100d                    FIRST   RMB     1               ; Flag used to indicate first time an item printed
0075 100e                    PAGE23  RMB     1               ; Flag indicating page2/3 instruction when non-zero
0076                         
0077                         ; Instructions. Matches indexes into entries in table MNEMONICS.
0078                         
0079 0000                    OP_INV   EQU    $00
0080 0001                    OP_ABX   EQU    $01
0081 0002                    OP_ADCA  EQU    $02
0082 0003                    OP_ADCB  EQU    $03
0083 0004                    OP_ADDA  EQU    $04
0084 0005                    OP_ADDB  EQU    $05
0085 0006                    OP_ADDD  EQU    $06
0086 0007                    OP_ANDA  EQU    $07
0087 0008                    OP_ANDB  EQU    $08
0088 0009                    OP_ANDCC EQU    $09
0089 000a                    OP_ASL   EQU    $0A
0090 000b                    OP_ASLA  EQU    $0B
0091 000c                    OP_ASLB  EQU    $0C
0092 000d                    OP_ASR   EQU    $0D
0093 000e                    OP_ASRA  EQU    $0E
0094 000f                    OP_ASRB  EQU    $0F
0095 0010                    OP_BCC   EQU    $10
0096 0011                    OP_BCS   EQU    $11
0097 0012                    OP_BEQ   EQU    $12
0098 0013                    OP_BGE   EQU    $13
0099 0014                    OP_BGT   EQU    $14
0100 0015                    OP_BHI   EQU    $15
0101 0016                    OP_BITA  EQU    $16
0102 0017                    OP_BITB  EQU    $17
0103 0018                    OP_BLE   EQU    $18
0104 0019                    OP_BLS   EQU    $19
0105 001a                    OP_BLT   EQU    $1A
0106 001b                    OP_BMI   EQU    $1B
0107 001c                    OP_BNE   EQU    $1C
0108 001d                    OP_BPL   EQU    $1D
0109 001e                    OP_BRA   EQU    $1E
0110 001f                    OP_BRN   EQU    $1F
0111 0020                    OP_BSR   EQU    $20
0112 0021                    OP_BVC   EQU    $21
0113 0022                    OP_BVS   EQU    $22
0114 0023                    OP_CLR   EQU    $23
0115 0024                    OP_CLRA  EQU    $24
0116 0025                    OP_CLRB  EQU    $25
0117 0026                    OP_CMPA  EQU    $26
0118 0027                    OP_CMPB  EQU    $27
0119 0028                    OP_CMPD  EQU    $28
0120 0029                    OP_CMPS  EQU    $29
0121 002a                    OP_CMPU  EQU    $2A
0122 002b                    OP_CMPX  EQU    $2B
0123 002c                    OP_CMPY  EQU    $2C
0124 002d                    OP_COMA  EQU    $2D
0125 002e                    OP_COMB  EQU    $2E
0126 002f                    OP_COM   EQU    $2F
0127 0030                    OP_CWAI  EQU    $30
0128 0031                    OP_DAA   EQU    $31
0129 0032                    OP_DEC   EQU    $32
0130 0033                    OP_DECA  EQU    $33
0131 0034                    OP_DECB  EQU    $34
0132 0035                    OP_EORA  EQU    $35
0133 0036                    OP_EORB  EQU    $36
0134 0037                    OP_EXG   EQU    $37
0135 0038                    OP_INC   EQU    $38
0136 0039                    OP_INCA  EQU    $39
0137 003a                    OP_INCB  EQU    $3A
0138 003b                    OP_JMP   EQU    $3B
0139 003c                    OP_JSR   EQU    $3C
0140 003d                    OP_LBCC  EQU    $3D
0141 003e                    OP_LBCS  EQU    $3E
0142 003f                    OP_LBEQ  EQU    $3F
0143 0040                    OP_LBGE  EQU    $40
0144 0041                    OP_LBGT  EQU    $41
0145 0042                    OP_LBHI  EQU    $42
0146 0043                    OP_LBLE  EQU    $43
0147 0044                    OP_LBLS  EQU    $44
0148 0045                    OP_LBLT  EQU    $45
0149 0046                    OP_LBMI  EQU    $46
0150 0047                    OP_LBNE  EQU    $47
0151 0048                    OP_LBPL  EQU    $48
0152 0049                    OP_LBRA  EQU    $49
0153 004a                    OP_LBRN  EQU    $4A
0154 004b                    OP_LBSR  EQU    $4B
0155 004c                    OP_LBVC  EQU    $4C
0156 004d                    OP_LBVS  EQU    $4D
0157 004e                    OP_LDA   EQU    $4E
0158 004f                    OP_LDB   EQU    $4F
0159 0050                    OP_LDD   EQU    $50
0160 0051                    OP_LDS   EQU    $51
0161 0052                    OP_LDU   EQU    $52
0162 0053                    OP_LDX   EQU    $53
0163 0054                    OP_LDY   EQU    $54
0164 0055                    OP_LEAS  EQU    $55
0165 0056                    OP_LEAU  EQU    $56
0166 0057                    OP_LEAX  EQU    $57
0167 0058                    OP_LEAY  EQU    $58
0168 0059                    OP_LSR   EQU    $59
0169 005a                    OP_LSRA  EQU    $5A
0170 005b                    OP_LSRB  EQU    $5B
0171 005c                    OP_MUL   EQU    $5C
0172 005d                    OP_NEG   EQU    $5D
0173 005e                    OP_NEGA  EQU    $5E
0174 005f                    OP_NEGB  EQU    $5F
0175 0060                    OP_NOP   EQU    $60
0176 0061                    OP_ORA   EQU    $61
0177 0062                    OP_ORB   EQU    $62
0178 0063                    OP_ORCC  EQU    $63
0179 0064                    OP_PSHS  EQU    $64
0180 0065                    OP_PSHU  EQU    $65
0181 0066                    OP_PULS  EQU    $66
0182 0067                    OP_PULU  EQU    $67
0183 0068                    OP_ROL   EQU    $68
0184 0069                    OP_ROLA  EQU    $69
0185 006a                    OP_ROLB  EQU    $6A
0186 006b                    OP_ROR   EQU    $6B
0187 006c                    OP_RORA  EQU    $6C
0188 006d                    OP_RORB  EQU    $6D
0189 006e                    OP_RTI   EQU    $6E
0190 006f                    OP_RTS   EQU    $6F
0191 0070                    OP_SBCA  EQU    $70
0192 0071                    OP_SBCB  EQU    $71
0193 0072                    OP_SEX   EQU    $72
0194 0073                    OP_STA   EQU    $73
0195 0074                    OP_STB   EQU    $74
0196 0075                    OP_STD   EQU    $75
0197 0076                    OP_STS   EQU    $76
0198 0077                    OP_STU   EQU    $77
0199 0078                    OP_STX   EQU    $78
0200 0079                    OP_STY   EQU    $79
0201 007a                    OP_SUBA  EQU    $7A
0202 007b                    OP_SUBB  EQU    $7B
0203 007c                    OP_SUBD  EQU    $7C
0204 007d                    OP_SWI   EQU    $7D
0205 007e                    OP_SWI2  EQU    $7E
0206 007f                    OP_SWI3  EQU    $7F
0207 0080                    OP_SYNC  EQU    $80
0208 0081                    OP_TFR   EQU    $81
0209 0082                    OP_TST   EQU    $82
0210 0083                    OP_TSTA  EQU    $83
0211 0084                    OP_TSTB  EQU    $84
0212                         
0213                         ; Addressing Modes. OPCODES table lists these for each instruction.
0214                         ; LENGTHS lists the instruction length for each addressing mode.
0215                         ; Need to distinguish relative modes that are 2 and 3 (long) bytes.
0216                         ; Some immediate are 2 and some 3 bytes.
0217                         ; Indexed modes can be longer depending on postbyte.
0218                         ; Page 2 and 3 opcodes are one byte longer (prefixed by 10 or 11)
0219                         
0220 0000                    AM_INVALID      EQU     0       ; $01 (1)
0221 0001                    AM_INHERENT     EQU     1       ; RTS (1)
0222 0002                    AM_IMMEDIATE8   EQU     2       ; LDA #$12 (2)
0223 0003                    AM_IMMEDIATE16  EQU     3       ; LDD #$1234 (3)
0224 0004                    AM_DIRECT       EQU     4       ; LDA $12 (2)
0225 0005                    AM_EXTENDED     EQU     5       ; LDA $1234 (3)
0226 0006                    AM_RELATIVE8    EQU     6       ; BSR $1234 (2)
0227 0007                    AM_RELATIVE16   EQU     7       ; LBSR $1234 (3)
0228 0008                    AM_INDEXED      EQU     8       ; LDA 0,X (2+)
0229                         
0230                         ; *** CODE ***
0231                         
0232                         ; Install custom command in ASSIST09 using secondary command list.
0233                         ; Adds a U (Unassemble) command, then returns to monitor.
0234                         
0235 100f 30 8d 00 05        START   LEAX    MYCMDL,PCR      ; Load new handler address
0236 1013 86 2c                      LDA     #CMDL2          ; Load subcode for vector swap
0237 1015 3f                         SWI                     ; Request service
0238 1016 09                         FCB     VCTRSW          ; Service code byte
0239 1017 39                         RTS                     ; Return to monitor
0240                         
0241                         MYCMDL
0242 1018 04                         FCB     4               ; Table entry length
0243 1019 55                         FCC     'U'             ; Command name
0244 101a 00 03                      FDB     MAIN-*          ; Pointer to command (relative to here)
0245 101c fe                         FCB     $FE             ; -2 indicates end of table
0246                         
0247                         ; Main program. Disassembles a page at a time. Can be run directly or
0248                         ; as an ASSIST09 monitor external command. Gets start address from
0249                         ; command line.
0250                         
0251 101d 17 ee 3c           MAIN    LBSR    CDNUM           ; Parse command line, return 16-bit number in D
0252 1020 fd 10 02                   STD     ADDR            ; Store it
0253 1023 86 18              PAGE    LDA     #PAGELEN        ; Number of instruction to disassemble per page
0254 1025 34 02              DIS     PSHS    A               ; Save A
0255 1027 17 00 97                   LBSR    DISASM          ; Do disassembly of one instruction
0256 102a 35 02                      PULS    A               ; Restore A
0257 102c 4a                         DECA                    ; Decrement count
0258 102d 26 f6                      BNE     DIS             ; Go back and repeat until a page has been done
0259 102f 30 8d 0b 81                LEAX    MSG2,PCR        ; Display message to press a key
0260 1033 17 00 84                   LBSR    PrintString
0261 1036 8d 63              BADKEY  BSR     GetChar         ; Wait for keyboard input
0262 1038 8d 11                      BSR     PrintCR
0263 103a 81 20                      CMPA    #SP             ; Space key pressed?
0264 103c 27 e5                      BEQ     PAGE            ; If so, display next page
0265 103e 81 51                      CMPA    #'Q             ; Q key pressed?
0266 1040 27 08                      BEQ     RETN            ; If so, return
0267 1042 81 71                      CMPA    #'q             ; q key pressed?
0268 1044 27 04                      BEQ     RETN            ; If so, return
0269 1046 8d 72                      BSR     PrintString     ; Bad key, prompt and try again
0270 1048 20 ec                      BRA     BADKEY
0271 104a 39                 RETN    RTS                     ; Return to caller
0272                         
0273                         ; *** Utility Functions ***
0274                         ; Some of these call ASSIST09 ROM monitor routines.
0275                         
0276                         ; Print CR/LF to the console.
0277                         ; Registers changed: none
0278                         PrintCR
0279 104b 34 02                      PSHS    A               ; Save A
0280 104d 86 0d                      LDA     #CR
0281 104f 8d 47                      BSR     PrintChar
0282 1051 86 0a                      LDA     #LF
0283 1053 8d 43                      BSR     PrintChar
0284 1055 35 02                      PULS    A               ; Restore A
0285 1057 39                         RTS
0286                         
0287                         ; Print dollar sign to the console.
0288                         ; Registers changed: none
0289                         PrintDollar
0290 1058 34 02                      PSHS    A               ; Save A
0291 105a 86 24                      LDA     #'$
0292 105c 8d 3a                      BSR     PrintChar
0293 105e 35 02                      PULS    A               ; Restore A
0294 1060 39                         RTS
0295                         
0296                         ; Print comma to the console.
0297                         ; Registers changed: none
0298                         PrintComma
0299 1061 34 02                      PSHS    A               ; Save A
0300 1063 86 2c                      LDA     #',
0301 1065 8d 31                      BSR     PrintChar
0302 1067 35 02                      PULS    A               ; Restore A
0303 1069 39                         RTS
0304                         
0305                         ; Print left square bracket to the console.
0306                         ; Registers changed: none
0307                         PrintLBracket
0308 106a 34 02                      PSHS    A               ; Save A
0309 106c 86 5b                      LDA     #'[
0310 106e 8d 28                      BSR     PrintChar
0311 1070 35 02                      PULS    A               ; Restore A
0312 1072 39                         RTS
0313                         
0314                         ; Print right square bracket to the console.
0315                         ; Registers changed: none
0316                         PrintRBracket
0317 1073 34 02                      PSHS    A               ; Save A
0318 1075 86 5d                      LDA     #']
0319 1077 8d 1f                      BSR     PrintChar
0320 1079 35 02                      PULS    A               ; Restore A
0321 107b 39                         RTS
0322                         
0323                         ; Print space sign to the console.
0324                         ; Registers changed: none
0325                         PrintSpace
0326 107c 3f                         SWI
0327 107d 07                         FCB     SPACE
0328 107e 39                         RTS
0329                         
0330                         ; Print two spaces to the console.
0331                         ; Registers changed: none
0332                         Print2Spaces
0333 107f 34 02                      PSHS    A               ; Save A
0334 1081 86 20                      LDA     #SP
0335 1083 8d 13                      BSR     PrintChar
0336 1085 8d 11                      BSR     PrintChar
0337 1087 35 02                      PULS    A               ; Restore A
0338 1089 39                         RTS
0339                         
0340                         ; Print several space characters.
0341                         ; A contains number of spaces to print.
0342                         ; Registers changed: none
0343                         PrintSpaces
0344 108a 34 02                      PSHS    A               ; Save registers used
0345 108c 81 00              PS1     CMPA    #0              ; Is count zero?
0346 108e 27 05                      BEQ     PS2             ; Is so, done
0347 1090 8d ea                      BSR     PrintSpace      ; Print a space
0348 1092 4a                         DECA                    ; Decrement count
0349 1093 20 f7                      BRA     PS1             ; Check again
0350 1095 35 02              PS2     PULS    A               ; Restore registers used
0351 1097 39                         RTS
0352                         
0353                         ; Print character to the console
0354                         ; A contains character to print.
0355                         ; Registers changed: none
0356                         PrintChar
0357 1098 3f                         SWI                     ; Call ASSIST09 monitor function
0358 1099 01                         FCB     OUTCH           ; Service code byte
0359 109a 39                         RTS
0360                         
0361                         ; Get character from the console
0362                         ; A contains character read. Blocks until key pressed. Character is
0363                         ; echoed. Ignores NULL ($00) and RUBOUT ($7F). CR ($OD) is converted
0364                         ; to LF ($0A).
0365                         ; Registers changed: none (flags may change). Returns char in A.
0366                         GetChar
0367 109b 3f                         SWI                     ; Call ASSIST09 monitor function
0368 109c 00                         FCB     INCHNP          ; Service code byte
0369 109d 39                         RTS
0370                         
0371                         ; Print a byte as two hex digits followed by a space.
0372                         ; A contains byte to print.
0373                         ; Registers changed: none
0374                         PrintByte
0375 109e 34 16                      PSHS    A,B,X           ; Save registers used
0376 10a0 b7 10 09                   STA     TEMP            ; Needs to be in memory so we can point to it
0377 10a3 30 8d ff 62                LEAX    TEMP,PCR        ; Get pointer to it
0378 10a7 3f                         SWI                     ; Call ASSIST09 monitor function
0379 10a8 04                         FCB     OUT2HS          ; Service code byte
0380 10a9 35 16                      PULS    X,B,A           ; Restore registers used
0381 10ab 39                         RTS
0382                         
0383                         ; Print a word as four hex digits followed by a space.
0384                         ; X contains word to print.
0385                         ; Registers changed: none
0386                         PrintAddress
0387 10ac 34 16                      PSHS    A,B,X           ; Save registers used
0388 10ae bf 10 09                   STX     TEMP            ; Needs to be in memory so we can point to it
0389 10b1 30 8d ff 54                LEAX    TEMP,PCR        ; Get pointer to it
0390 10b5 3f                         SWI                     ; Call ASSIST09 monitor function
0391 10b6 05                         FCB     OUT4HS          ; Service code byte
0392 10b7 35 16                      PULS    X,B,A           ; Restore registers used
0393 10b9 39                         RTS
0394                         
0395                         ; Print a string.
0396                         ; X points to start of string to display.
0397                         ; String must be terminated in EOT character.
0398                         ; Registers changed: none
0399                         PrintString
0400 10ba 34 10                      PSHS    X               ; Save registers used
0401 10bc 3f                         SWI                     ; Call ASSIST09 monitor function
0402 10bd 02                         FCB     PDATA1          ; Service code byte
0403 10be 35 10                      PULS    X               ; Restore registers used
0404 10c0 39                         RTS
0405                         
0406                         ; Disassemble instruction at address ADDR. On return, ADDR points to
0407                         ; next instruction so it can be called again.
0408                         
0409 10c1 7f 10 0e           DISASM  CLR     PAGE23          ; Clear page2/3 flag
0410 10c4 ae 8d ff 3a                LDX     ADDR,PCR        ; Get address of instruction
0411 10c8 e6 84                      LDB     ,X              ; Get instruction op code
0412 10ca c1 10                      CMPB    #$10            ; Is it a page 2 16-bit opcode prefix with 10?
0413 10cc 27 07                      BEQ     handle10        ; If so, do special handling
0414 10ce c1 11                      CMPB    #$11            ; Is it a page 3 16-bit opcode prefix with 11?
0415 10d0 27 52                      BEQ     handle11        ; If so, do special handling
0416 10d2 16 00 9e                   LBRA    not1011         ; If not, handle as normal case
0417                         
0418                         handle10                       ; Handle page 2 instruction
0419 10d5 86 01                      LDA     #1              ; Set page2/3 flag
0420 10d7 b7 10 0e                   STA     PAGE23
0421 10da e6 01                      LDB     1,X             ; Get real opcode
0422 10dc f7 10 04                   STB     OPCODE          ; Save it.
0423 10df 30 8d 0a 38                LEAX    PAGE2,PCR       ; Pointer to start of table
0424 10e3 4f                         CLRA                    ; Set index into table to zero
0425                         search10
0426 10e4 e1 86                      CMPB    A,X             ; Check for match of opcode in table
0427 10e6 27 1f                      BEQ     found10         ; Branch if found
0428 10e8 8b 03                      ADDA    #3              ; Advance to next entry in table (entries are 3 bytes long)
0429 10ea 6d 86                      TST     A,X             ; Check entry
0430 10ec 27 02                      BEQ     notfound10      ; If zero, then reached end of table
0431 10ee 20 f4                      BRA     search10        ; If not, keep looking
0432                         
0433                         notfound10                     ; Instruction not found, so is invalid.
0434 10f0 86 10                      LDA     #$10            ; Set opcode to 10
0435 10f2 b7 10 04                   STA     OPCODE
0436 10f5 86 00                      LDA     #OP_INV         ; Set as instruction type invalid
0437 10f7 b7 10 06                   STA     OPTYPE
0438 10fa 86 00                      LDA     #AM_INVALID     ; Set as addressing mode invalid
0439 10fc b7 10 05                   STA     AM
0440 10ff 86 01                      LDA     #1              ; Set length to one
0441 1101 b7 10 08                   STA     LEN
0442 1104 16 00 8e                   LBRA    dism            ; Disassemble as normal
0443                         
0444                         found10                        ; Found entry in table
0445 1107 8b 01                      ADDA    #1              ; Advance to instruction type entry in table
0446 1109 e6 86                      LDB     A,X             ; Get instruction type
0447 110b f7 10 06                   STB     OPTYPE          ; Save it
0448 110e 8b 01                      ADDA    #1              ; Advanced to address mode entry in table
0449 1110 e6 86                      LDB     A,X             ; Get address mode
0450 1112 f7 10 05                   STB     AM              ; Save it
0451 1115 4f                         CLRA                    ; Clear MSB of D, addressing mode is now in A:B (D)
0452 1116 1f 01                      TFR     D,X             ; Put addressing mode in X
0453 1118 e6 89 18 ee                LDB     LENGTHS,X       ; Get instruction length from table
0454 111c f7 10 08                   STB     LEN             ; Store it
0455 111f 7c 10 08                   INC     LEN             ; Add one because it is a two byte op code
0456 1122 20 71                      BRA     dism            ; Continue normal disassembly processing.
0457                         
0458                         handle11                       ; Same logic as above, but use table for page 3 opcodes.
0459 1124 86 01                      LDA     #1              ; Set page2/3 flag
0460 1126 b7 10 0e                   STA     PAGE23
0461 1129 e6 01                      LDB     1,X             ; Get real opcode
0462 112b f7 10 04                   STB     OPCODE          ; Save it.
0463 112e 30 8d 0a 5c                LEAX    PAGE3,PCR       ; Pointer to start of table
0464 1132 4f                         CLRA                    ; Set index into table to zero
0465                         search11
0466 1133 e1 86                      CMPB    A,X             ; Check for match of opcode in table
0467 1135 27 1e                      BEQ     found11         ; Branch if found
0468 1137 8b 03                      ADDA    #3              ; Advance to next entry in table (entries are 3 bytes long)
0469 1139 6d 86                      TST     A,X             ; Check entry
0470 113b 27 02                      BEQ     notfound11      ; If zero, then reached end of table
0471 113d 20 f4                      BRA     search11        ; If not, keep looking
0472                         
0473                         notfound11                     ; Instruction not found, so is invalid.
0474 113f 86 11                      LDA     #$11            ; Set opcode to 10
0475 1141 b7 10 04                   STA     OPCODE
0476 1144 86 00                      LDA     #OP_INV         ; Set as instruction type invalid
0477 1146 b7 10 06                   STA     OPTYPE
0478 1149 86 00                      LDA     #AM_INVALID     ; Set as addressing mode invalid
0479 114b b7 10 05                   STA     AM
0480 114e 86 01                      LDA     #1              ; Set length to one
0481 1150 b7 10 08                   STA     LEN
0482 1153 20 40                      BRA     dism            ; Disassemble as normal
0483                         
0484                         found11                        ; Found entry in table
0485 1155 8b 01                      ADDA    #1              ; Advance to instruction type entry in table
0486 1157 e6 86                      LDB     A,X             ; Get instruction type
0487 1159 f7 10 06                   STB     OPTYPE          ; Save it
0488 115c 8b 01                      ADDA    #1              ; Advanced to address mode entry in table
0489 115e e6 86                      LDB     A,X             ; Get address mode
0490 1160 f7 10 05                   STB     AM              ; Save it
0491 1163 4f                         CLRA                    ; Clear MSB of D, addressing mode is now in A:B (D)
0492 1164 1f 01                      TFR     D,X             ; Put addressing mode in X
0493 1166 e6 89 18 ee                LDB     LENGTHS,X       ; Get instruction length from table
0494 116a f7 10 08                   STB     LEN             ; Store it
0495 116d 7c 10 08                   INC     LEN             ; Add one because it is a two byte op code
0496 1170 20 23                      BRA     dism            ; Continue normal disassembly processing.
0497 1172 39                         RTS
0498                         
0499                         not1011
0500 1173 f7 10 04                   STB     OPCODE          ; Save the op code
0501 1176 4f                         CLRA                    ; Clear MSB of D
0502 1177 1f 01                      TFR     D,X             ; Put op code in X
0503 1179 e6 89 19 1b                LDB     OPCODES,X       ; Get opcode type from table
0504 117d f7 10 06                   STB     OPTYPE          ; Store it
0505 1180 f6 10 04                   LDB     OPCODE          ; Get op code again
0506 1183 1f 01                      TFR     D,X             ; Put opcode in X
0507 1185 e6 89 1a 1b                LDB     MODES,X         ; Get addressing mode type from table
0508 1189 f7 10 05                   STB     AM              ; Store it
0509 118c 1f 01                      TFR     D,X             ; Put addressing mode in X
0510 118e e6 89 18 ee                LDB     LENGTHS,X       ; Get instruction length from table
0511 1192 f7 10 08                   STB     LEN             ; Store it
0512                         
0513                         ; If addressing mode is indexed, get and save the indexed addressing
0514                         ; post byte.
0515                         
0516 1195 b6 10 05           dism    LDA     AM              ; Get addressing mode
0517 1198 81 08                      CMPA    #AM_INDEXED     ; Is it indexed mode?
0518 119a 26 22                      BNE     NotIndexed      ; Branch if not
0519 119c ae 8d fe 62                LDX     ADDR,PCR        ; Get address of op code
0520                                                         ; If it is a page2/3 instruction, op code is the next byte after ADDR
0521 11a0 7d 10 0e                   TST     PAGE23          ; Page2/3 instruction?
0522 11a3 27 04                      BEQ     norm            ; Branch of not
0523 11a5 a6 02                      LDA     2,X             ; Post byte is two past ADDR
0524 11a7 20 02                      BRA     getpb
0525 11a9 a6 01              norm    LDA     1,X             ; Get next byte (the post byte)
0526 11ab b7 10 07           getpb   STA     POSTBYT         ; Save it
0527                         
0528                         ; Determine number of additional bytes for indexed addressing based on
0529                         ; postbyte. If most significant bit is 0, there are no additional
0530                         ; bytes and we can skip the rest of the check.
0531                         
0532 11ae 2a 0e                      BPL     NotIndexed      ; Branch of MSB is zero
0533                         
0534                         ; Else if most significant bit is 1, mask off all but low order 5 bits
0535                         ; and look up length in table.
0536                         
0537 11b0 84 1f                      ANDA    #%00011111      ; Mask off bits
0538 11b2 30 8d 07 45                LEAX    POSTBYTES,PCR   ; Lookup table of lengths
0539 11b6 a6 86                      LDA     A,X             ; Get table entry
0540 11b8 bb 10 08                   ADDA    LEN             ; Add to instruction length
0541 11bb b7 10 08                   STA     LEN             ; Save new length
0542                         
0543                         NotIndexed
0544                         
0545                         ; Print address followed by a space
0546 11be ae 8d fe 40                LDX     ADDR,PCR
0547 11c2 17 fe e7                   LBSR    PrintAddress
0548                         
0549                         ; Print one more space
0550                         
0551 11c5 17 fe b4                   LBSR    PrintSpace
0552                         
0553                         ; Print the op code bytes based on the instruction length
0554                         
0555 11c8 f6 10 08                   LDB     LEN             ; Number of bytes in instruction
0556 11cb ae 8d fe 33                LDX     ADDR,PCR        ; Pointer to start of instruction
0557 11cf a6 80              opby    LDA     ,X+             ; Get instruction byte and increment pointer
0558 11d1 17 fe ca                   LBSR    PrintByte       ; Print it, followed by a space
0559 11d4 5a                         DECB                    ; Decrement byte count
0560 11d5 26 f8                      BNE     opby            ; Repeat until done
0561                         
0562                         ; Print needed remaining spaces to pad out to correct column
0563                         
0564 11d7 30 8d 07 1c                LEAX    PADDING,PCR     ; Pointer to start of lookup table
0565 11db b6 10 08                   LDA     LEN             ; Number of bytes in instruction
0566 11de 4a                         DECA                    ; Subtract 1 since table starts at 1, not 0
0567 11df a6 86                      LDA     A,X             ; Get number of spaces to print
0568 11e1 17 fe a6                   LBSR    PrintSpaces
0569                         
0570                         ; If a page2/3 instruction, advance ADDR to the next byte which points
0571                         ; to the real op code.
0572                         
0573 11e4 7d 10 0e                   TST     PAGE23          ; Flag set
0574 11e7 27 09                      BEQ     noinc           ; Branch if not
0575 11e9 fc 10 02                   LDD     ADDR            ; Increment 16-bit address
0576 11ec c3 00 01                   ADDD    #1
0577 11ef fd 10 02                   STD     ADDR
0578                         
0579                         ; Get and print mnemonic (4 chars)
0580                         
0581 11f2 f6 10 06           noinc   LDB     OPTYPE          ; Get instruction type to index into table
0582 11f5 4f                         CLRA                    ; Clear MSB of D
0583 11f6 58                         ASLB                    ; 16-bit shift of D: Rotate B, MSB into Carry
0584 11f7 49                         ROLA                    ; Rotate A, Carry into LSB
0585 11f8 58                         ASLB                    ; Do it twice to multiple by four
0586 11f9 49                         ROLA                    ;
0587 11fa 30 8d 04 dc                LEAX    MNEMONICS,PCR   ; Pointer to start of table
0588 11fe b7 10 0b                   STA     TEMP1           ; Save value of A
0589 1201 a6 8b                      LDA     D,X             ; Get first char of mnemonic
0590 1203 17 fe 92                   LBSR    PrintChar       ; Print it
0591 1206 b6 10 0b                   LDA     TEMP1           ; Restore value of A
0592 1209 5c                         INCB                    ; Advance pointer
0593 120a a6 8b                      LDA     D,X             ; Get second char of mnemonic
0594 120c 17 fe 89                   LBSR    PrintChar       ; Print it
0595 120f b6 10 0b                   LDA     TEMP1           ; Restore value of A
0596 1212 5c                         INCB                    ; Advance pointer
0597 1213 a6 8b                      LDA     D,X             ; Get third char of mnemonic
0598 1215 17 fe 80                   LBSR    PrintChar       ; Print it
0599 1218 b6 10 0b                   LDA     TEMP1           ; Restore value of A
0600 121b 5c                         INCB                    ; Advance pointer
0601 121c a6 8b                      LDA     D,X             ; Get fourth char of mnemonic
0602 121e 17 fe 77                   LBSR    PrintChar       ; Print it
0603                         
0604                         ; Display any operands based on addressing mode and call appropriate
0605                         ; routine. TODO: Could use a lookup table for this.
0606                         
0607 1221 b6 10 05                   LDA     AM              ; Get addressing mode
0608 1224 81 00                      CMPA    #AM_INVALID
0609 1226 27 2e                      BEQ     DO_INVALID
0610 1228 81 01                      CMPA    #AM_INHERENT
0611 122a 27 39                      BEQ     DO_INHERENT
0612 122c 81 02                      CMPA    #AM_IMMEDIATE8
0613 122e 27 38                      BEQ     DO_IMMEDIATE8
0614 1230 81 03                      CMPA    #AM_IMMEDIATE16
0615 1232 10 27 01 af                LBEQ    DO_IMMEDIATE16
0616 1236 81 04                      CMPA    #AM_DIRECT
0617 1238 10 27 01 c4                LBEQ    DO_DIRECT
0618 123c 81 05                      CMPA    #AM_EXTENDED
0619 123e 10 27 01 d0                LBEQ    DO_EXTENDED
0620 1242 81 06                      CMPA    #AM_RELATIVE8
0621 1244 10 27 01 e0                LBEQ    DO_RELATIVE8
0622 1248 81 07                      CMPA    #AM_RELATIVE16
0623 124a 10 27 01 f5                LBEQ    DO_RELATIVE16
0624 124e 81 08                      CMPA    #AM_INDEXED
0625 1250 10 27 02 09                LBEQ    DO_INDEXED
0626 1254 20 00                      BRA     DO_INVALID      ; Should never be reached
0627                         
0628                         DO_INVALID                     ; Display "   ; INVALID"
0629 1256 86 0f                      LDA     #15             ; Want 15 spaces
0630 1258 17 fe 2f                   LBSR    PrintSpaces
0631 125b 30 8d 09 4b                LEAX    MSG1,PCR
0632 125f 17 fe 58                   LBSR    PrintString
0633 1262 16 04 5f                   LBRA    done
0634                         
0635                         DO_INHERENT                    ; Nothing else to do
0636 1265 16 04 5c                   LBRA    done
0637                         
0638                         DO_IMMEDIATE8
0639 1268 b6 10 06                   LDA     OPTYPE          ; Get opcode type
0640 126b 81 81                      CMPA    #OP_TFR         ; Is is TFR?
0641 126d 27 33                      BEQ     XFREXG          ; Handle special case of TFR
0642 126f 81 37                      CMPA    #OP_EXG         ; Is is EXG?
0643 1271 27 2f                      BEQ     XFREXG          ; Handle special case of EXG
0644                         
0645 1273 81 66                      CMPA    #OP_PULS        ; Is is PULS?
0646 1275 10 27 00 ad                LBEQ    PULPSH
0647 1279 81 67                      CMPA    #OP_PULU        ; Is is PULU?
0648 127b 10 27 00 a7                LBEQ    PULPSH
0649 127f 81 64                      CMPA    #OP_PSHS        ; Is is PSHS?
0650 1281 10 27 00 a1                LBEQ    PULPSH
0651 1285 81 65                      CMPA    #OP_PSHU        ; Is is PSHU?
0652 1287 10 27 00 9b                LBEQ    PULPSH
0653                                                         ; Display "  #$nn"
0654 128b 17 fd f1                   LBSR    Print2Spaces    ; Two spaces
0655 128e 86 23                      LDA     #'#             ; Number sign
0656 1290 17 fe 05                   LBSR    PrintChar
0657 1293 17 fd c2                   LBSR    PrintDollar     ; Dollar sign
0658 1296 ae 8d fd 68                LDX     ADDR,PCR        ; Get address of op code
0659 129a a6 01                      LDA     1,X             ; Get next byte (immediate data)
0660 129c 17 fd ff                   LBSR    PrintByte       ; Print as hex value
0661 129f 16 04 22                   LBRA    done
0662                         
0663                         XFREXG                          ; Handle special case of TFR and EXG
0664                                                         ; Display "  r1,r2"
0665 12a2 17 fd da                   LBSR    Print2Spaces    ; Two spaces
0666 12a5 ae 8d fd 59                LDX     ADDR,PCR        ; Get address of op code
0667 12a9 a6 01                      LDA     1,X             ; Get next byte (postbyte)
0668 12ab 84 f0                      ANDA    #%11110000      ; Mask out source register bits
0669 12ad 44                         LSRA                    ; Shift into low order bits
0670 12ae 44                         LSRA
0671 12af 44                         LSRA
0672 12b0 44                         LSRA
0673 12b1 8d 0e                      BSR     TFREXGRegister  ; Print source register name
0674 12b3 86 2c                      LDA     #',             ; Print comma
0675 12b5 17 fd e0                   LBSR    PrintChar
0676 12b8 a6 01                      LDA     1,X             ; Get postbyte again
0677 12ba 84 0f                      ANDA    #%00001111      ; Mask out destination register bits
0678 12bc 8d 03                      BSR     TFREXGRegister  ; Print destination register name
0679 12be 16 04 03                   LBRA    done
0680                         
0681                         ; Look up register name (in A) from Transfer/Exchange postbyte. 4 LSB
0682                         ; bits determine the register name. Value is printed. Invalid value
0683                         ; is shown as '?'.
0684                         ; Value:    0 1 2 3 4 5  8 9 10 11
0685                         ; Register: D X Y U S PC A B CC DP
0686                         
0687                         TFREXGRegister
0688 12c1 81 00                      CMPA    #0
0689 12c3 26 04                      BNE     Try1
0690 12c5 86 44                      LDA     #'D
0691 12c7 20 50                      BRA     Print1Reg
0692 12c9 81 01              Try1    CMPA    #1
0693 12cb 26 04                      BNE     Try2
0694 12cd 86 58                      LDA     #'X
0695 12cf 20 48                      BRA     Print1Reg
0696 12d1 81 02              Try2    CMPA    #2
0697 12d3 26 04                      BNE     Try3
0698 12d5 86 59                      LDA     #'Y
0699 12d7 20 40                      BRA     Print1Reg
0700 12d9 81 03              Try3    CMPA    #3
0701 12db 26 04                      BNE     Try4
0702 12dd 86 55                      LDA     #'U
0703 12df 20 38                      BRA     Print1Reg
0704 12e1 81 04              Try4    CMPA    #4
0705 12e3 26 04                      BNE     Try5
0706 12e5 86 53                      LDA     #'S
0707 12e7 20 30                      BRA     Print1Reg
0708 12e9 81 05              Try5    CMPA    #5
0709 12eb 26 06                      BNE     Try8
0710 12ed 86 50                      LDA     #'P
0711 12ef c6 43                      LDB     #'C
0712 12f1 20 2a                      BRA     Print2Reg
0713 12f3 81 08              Try8    CMPA    #8
0714 12f5 26 04                      BNE     Try9
0715 12f7 86 41                      LDA     #'A
0716 12f9 20 1e                      BRA     Print1Reg
0717 12fb 81 09              Try9    CMPA    #9
0718 12fd 26 04                      BNE     Try10
0719 12ff 86 42                      LDA     #'B
0720 1301 20 16                      BRA     Print1Reg
0721 1303 81 0a              Try10   CMPA    #10
0722 1305 26 06                      BNE     Try11
0723 1307 86 43                      LDA     #'C
0724 1309 c6 43                      LDB     #'C
0725 130b 20 10                      BRA     Print2Reg
0726 130d 81 0b              Try11   CMPA    #11
0727 130f 26 06                      BNE     Inv
0728 1311 86 44                      LDA     #'D
0729 1313 c6 50                      LDB     #'P
0730 1315 20 06                      BRA     Print2Reg
0731 1317 86 3f              Inv     LDA     #'?             ; Invalid
0732                                                         ; Fall through
0733                         Print1Reg
0734 1319 17 fd 7c                   LBSR   PrintChar        ; Print character
0735 131c 39                         RTS
0736                         Print2Reg
0737 131d 17 fd 78                   LBSR   PrintChar        ; Print first character
0738 1320 1f 98                      TFR    B,A
0739 1322 17 fd 73                   LBSR   PrintChar        ; Print second character
0740 1325 39                         RTS
0741                         
0742                         ; Handle PSHS/PSHU/PULS/PULU instruction operands
0743                         ; Format is a register list, eg; "  A,B,X"
0744                         
0745                         PULPSH
0746 1326 17 fd 56                   LBSR    Print2Spaces    ; Two spaces
0747 1329 86 01                      LDA     #1
0748 132b b7 10 0d                   STA     FIRST           ; Flag set before any items printed
0749 132e ae 8d fc d0                LDX     ADDR,PCR        ; Get address of op code
0750 1332 a6 01                      LDA     1,X             ; Get next byte (postbyte)
0751                         
0752                         ; Postbyte bits indicate registers to push/pull when 1.
0753                         ; 7  6   5 4 3  2 1 0
0754                         ; PC S/U Y X DP B A CC
0755                         
0756                         ; TODO: Could simplify this with shifting and lookup table.
0757                         
0758 1334 85 80                      BITA    #%10000000      ; Bit 7 set?
0759 1336 27 0d                      BEQ     bit6
0760 1338 34 06                      PSHS    A,B
0761 133a 86 50                      LDA     #'P
0762 133c c6 43                      LDB     #'C
0763 133e 8d dd                      BSR     Print2Reg       ; Print PC
0764 1340 7f 10 0d                   CLR     FIRST
0765 1343 35 06                      PULS    A,B
0766 1345 85 40              bit6    BITA    #%01000000      ; Bit 6 set?
0767 1347 27 21                      BEQ     bit5
0768                         
0769                         ; Need to show S or U depending on instruction
0770                         
0771 1349 34 02                      PSHS    A               ; Save postbyte
0772 134b b6 10 06                   LDA     OPTYPE          ; Get opcode type
0773 134e 81 66                      CMPA    #OP_PULS
0774 1350 27 12                      BEQ     printu
0775 1352 81 64                      CMPA    #OP_PSHS
0776 1354 27 0e                      BEQ     printu
0777 1356 17 00 81                   LBSR    PrintCommaIfNotFirst
0778 1359 86 53                      LDA     #'S             ; Print S
0779 135b 8d bc              pr1     BSR     Print1Reg
0780 135d 7f 10 0d                   CLR     FIRST
0781 1360 35 02                      PULS    A
0782 1362 20 06                      bra     bit5
0783 1364 8d 74              printu  BSR     PrintCommaIfNotFirst
0784 1366 86 55                      LDA     #'U             ; Print U
0785 1368 20 f1                      bra     pr1
0786 136a 85 20              bit5    BITA    #%00100000      ; Bit 5 set?
0787 136c 27 0d                      BEQ     bit4
0788 136e 34 02                      PSHS    A
0789 1370 8d 68                      BSR     PrintCommaIfNotFirst
0790 1372 86 59                      LDA     #'Y
0791 1374 8d a3                      BSR     Print1Reg       ; Print Y
0792 1376 7f 10 0d                   CLR     FIRST
0793 1379 35 02                      PULS    A
0794 137b 85 10              bit4    BITA    #%00010000      ; Bit 4 set?
0795 137d 27 0d                      BEQ     bit3
0796 137f 34 02                      PSHS    A
0797 1381 8d 57                      BSR     PrintCommaIfNotFirst
0798 1383 86 58                      LDA     #'X
0799 1385 8d 92                      BSR     Print1Reg       ; Print X
0800 1387 7f 10 0d                   CLR     FIRST
0801 138a 35 02                      PULS    A
0802 138c 85 08              bit3    BITA    #%00001000      ; Bit 3 set?
0803 138e 27 0f                      BEQ     bit2
0804 1390 34 06                      PSHS    A,B
0805 1392 8d 46                      BSR     PrintCommaIfNotFirst
0806 1394 86 44                      LDA     #'D
0807 1396 c6 50                      LDB     #'P
0808 1398 8d 83                      BSR     Print2Reg       ; Print DP
0809 139a 7f 10 0d                   CLR     FIRST
0810 139d 35 06                      PULS    A,B
0811 139f 85 04              bit2    BITA    #%00000100      ; Bit 2 set?
0812 13a1 27 0e                      BEQ     bit1
0813 13a3 34 02                      PSHS    A
0814 13a5 8d 33                      BSR     PrintCommaIfNotFirst
0815 13a7 86 42                      LDA     #'B
0816 13a9 17 ff 6d                   LBSR    Print1Reg       ; Print B
0817 13ac 7f 10 0d                   CLR     FIRST
0818 13af 35 02                      PULS    A
0819 13b1 85 02              bit1    BITA    #%00000010      ; Bit 1 set?
0820 13b3 27 0e                      BEQ     bit0
0821 13b5 34 02                      PSHS    A
0822 13b7 8d 21                      BSR     PrintCommaIfNotFirst
0823 13b9 86 41                      LDA     #'A
0824 13bb 17 ff 5b                   LBSR    Print1Reg       ; Print A
0825 13be 7f 10 0d                   CLR     FIRST
0826 13c1 35 02                      PULS    A
0827 13c3 85 01              bit0    BITA    #%00000001      ; Bit 0 set?
0828 13c5 27 10                      BEQ     done1
0829 13c7 34 06                      PSHS    A,B
0830 13c9 8d 0f                      BSR     PrintCommaIfNotFirst
0831 13cb 86 43                      LDA     #'C
0832 13cd c6 43                      LDB     #'C
0833 13cf 17 ff 4b                   LBSR    Print2Reg       ; Print CC
0834 13d2 7f 10 0d                   CLR     FIRST
0835 13d5 35 06                      PULS    A,B
0836 13d7 16 02 ea           done1   LBRA    done
0837                         
0838                         ; Print comma if FIRST flag is not set.
0839                         PrintCommaIfNotFirst
0840 13da 7d 10 0d                   TST     FIRST
0841 13dd 26 05                      BNE     ret1
0842 13df 86 2c                      LDA     #',
0843 13e1 17 fc b4                   LBSR    PrintChar
0844 13e4 39                 ret1    RTS
0845                         
0846                         DO_IMMEDIATE16                 ; Display "  #$nnnn"
0847 13e5 17 fc 97                   LBSR    Print2Spaces    ; Two spaces
0848 13e8 86 23                      LDA     #'#             ; Number sign
0849 13ea 17 fc ab                   LBSR    PrintChar
0850 13ed 17 fc 68                   LBSR    PrintDollar     ; Dollar sign
0851 13f0 ae 8d fc 0e                LDX     ADDR,PCR        ; Get address of op code
0852 13f4 a6 01                      LDA     1,X             ; Get first byte (immediate data MSB)
0853 13f6 e6 02                      LDB     2,X             ; Get second byte (immediate data LSB)
0854 13f8 1f 01                      TFR     D,X             ; Put in X to print
0855 13fa 17 fc af                   LBSR    PrintAddress    ; Print as hex value
0856 13fd 16 02 c4                   LBRA    done
0857                         
0858                         DO_DIRECT                       ; Display "  $nn"
0859 1400 17 fc 7c                   LBSR    Print2Spaces    ; Two spaces
0860 1403 17 fc 52                   LBSR    PrintDollar     ; Dollar sign
0861 1406 ae 8d fb f8                LDX     ADDR,PCR        ; Get address of op code
0862 140a a6 01                      LDA     1,X             ; Get next byte (byte data)
0863 140c 17 fc 8f                   LBSR    PrintByte       ; Print as hex value
0864 140f 16 02 b2                   LBRA    done
0865                         
0866                         DO_EXTENDED                     ; Display "  $nnnn"
0867 1412 17 fc 6a                   LBSR    Print2Spaces    ; Two spaces
0868 1415 17 fc 40                   LBSR    PrintDollar     ; Dollar sign
0869 1418 ae 8d fb e6                LDX     ADDR,PCR        ; Get address of op code
0870 141c a6 01                      LDA     1,X             ; Get first byte (address MSB)
0871 141e e6 02                      LDB     2,X             ; Get second byte (address LSB)
0872 1420 1f 01                      TFR     D,X             ; Put in X to print
0873 1422 17 fc 87                   LBSR    PrintAddress    ; Print as hex value
0874 1425 16 02 9c                   LBRA    done
0875                         
0876                         DO_RELATIVE8                    ; Display "  $nnnn"
0877 1428 17 fc 54                   LBSR    Print2Spaces    ; Two spaces
0878 142b 17 fc 2a                   LBSR    PrintDollar     ; Dollar sign
0879                         
0880                         ; Destination address for relative branch is address of opcode + (sign
0881                         ; extended)offset + 2, e.g.
0882                         ;   $1015 + $(FF)FC + 2 = $1013
0883                         ;   $101B + $(00)27 + 2 = $1044
0884                         
0885 142e ae 8d fb d0                LDX     ADDR,PCR        ; Get address of op code
0886 1432 e6 01                      LDB     1,X             ; Get first byte (8-bit branch offset)
0887 1434 1d                         SEX                     ; Sign extend to 16 bits
0888 1435 f3 10 02                   ADDD    ADDR            ; Add address of op code
0889 1438 c3 00 02                   ADDD    #2              ; Add 2
0890 143b 1f 01                      TFR     D,X             ; Put in X to print
0891 143d 17 fc 6c                   LBSR    PrintAddress    ; Print as hex value
0892 1440 16 02 81                   LBRA    done
0893                         
0894                         DO_RELATIVE16                   ; Display "  $nnnn"
0895 1443 17 fc 39                   LBSR    Print2Spaces    ; Two spaces
0896 1446 17 fc 0f                   LBSR    PrintDollar     ; Dollar sign
0897                         
0898                         ; Destination address calculation is similar to above, except offset
0899                         ; is 16 bits and need to add 3.
0900                         
0901 1449 ae 8d fb b5                LDX     ADDR,PCR        ; Get address of op code
0902 144d ec 01                      LDD     1,X             ; Get next 2 bytes (16-bit branch offset)
0903 144f f3 10 02                   ADDD    ADDR            ; Add address of op code
0904 1452 c3 00 03                   ADDD    #3              ; Add 3
0905 1455 1f 01                      TFR     D,X             ; Put in X to print
0906 1457 17 fc 52                   LBSR    PrintAddress    ; Print as hex value
0907 145a 16 02 67                   LBRA    done
0908                         
0909                         DO_INDEXED
0910 145d 17 fc 1f                   LBSR    Print2Spaces    ; Two spaces
0911                         
0912                         ; Addressing modes are determined by the postbyte:
0913                         ;
0914                         ; Postbyte  Format  Additional Bytes
0915                         ; --------  ------  ----------------
0916                         ; 0RRnnnnn  n,R     0
0917                         ; 1RR00100  ,R      0
0918                         ; 1RR01000  n,R     1
0919                         ; 1RR01001  n,R     2
0920                         ; 1RR00110  A,R     0
0921                         ; 1RR00101  B,R     0
0922                         ; 1RR01011  D,R     0
0923                         ; 1RR00000  ,R+     0
0924                         ; 1RR00001  ,R++    0
0925                         ; 1RR00010  ,-R     0
0926                         ; 1RR00011  ,--R    0
0927                         ; 1xx01100  n,PCR   1
0928                         ; 1xx01101  n,PCR   2
0929                         ; 1RR10100  [,R]    0
0930                         ; 1RR11000  [n,R]   1
0931                         ; 1RR11001  [n,R]   2
0932                         ; 1RR10110  [A,R]   0
0933                         ; 1RR10101  [B,R]   0
0934                         ; 1RR11011  [D,R]   0
0935                         ; 1RR10001  [,R++]  0
0936                         ; 1RR10011  [,--R]  0
0937                         ; 1xx11100  [n,PCR] 1
0938                         ; 1xx11101  [n,PCR] 2
0939                         ; 10011111  [n]     2
0940                         ;
0941                         ; Where RR: 00=X 01=Y 10=U 11=S
0942                         
0943 1460 b6 10 07                   LDA     POSTBYT         ; Get postbyte
0944 1463 2b 14                      BMI     ind2            ; Branch if MSB is 1
0945                         
0946                                                         ; Format is 0RRnnnnn  n,R
0947 1465 84 1f                      ANDA    #%00011111      ; Get 5-bit offset
0948 1467 17 fb ee                   LBSR    PrintDollar     ; Dollar sign
0949 146a 17 fc 31                   LBSR    PrintByte       ; Print offset
0950 146d 17 fb f1                   LBSR    PrintComma      ; Print comma
0951 1470 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0952 1473 17 02 2d                   LBSR    PrintRegister   ; Print register name
0953 1476 16 02 4b                   LBRA    done
0954                         ind2
0955 1479 84 9f                      ANDA    #%10011111      ; Mask out register bits
0956 147b 81 84                      CMPA    #%10000100      ; Check against pattern
0957 147d 26 0c                      BNE     ind3
0958                                                         ; Format is 1RR00100  ,R
0959 147f 17 fb df                   LBSR    PrintComma      ; Print comma
0960 1482 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0961 1485 17 02 1b                   LBSR    PrintRegister   ; Print register name
0962 1488 16 02 39                   LBRA    done
0963                         ind3
0964 148b 81 88                      CMPA    #%10001000      ; Check against pattern
0965 148d 26 18                      BNE     ind4
0966                                                         ; Format is 1RR01000  n,R
0967 148f ae 8d fb 6f                LDX     ADDR,PCR
0968 1493 a6 02                      LDA     2,X             ; Get 8-bit offset
0969 1495 17 fb c0                   LBSR    PrintDollar     ; Dollar sign
0970 1498 17 fc 03                   LBSR    PrintByte       ; Display it
0971 149b 17 fb c3                   LBSR    PrintComma      ; Print comma
0972 149e b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0973 14a1 17 01 ff                   LBSR    PrintRegister   ; Print register name
0974 14a4 16 02 1d                   LBRA    done
0975                         ind4
0976 14a7 81 89                      CMPA    #%10001001      ; Check against pattern
0977 14a9 26 1a                      BNE     ind5
0978                                                         ; Format is 1RR01001  n,R
0979 14ab ae 8d fb 53                LDX     ADDR,PCR
0980 14af ec 02                      LDD     2,X             ; Get 16-bit offset
0981 14b1 1f 01                      TFR     D,X
0982 14b3 17 fb a2                   LBSR    PrintDollar     ; Dollar sign
0983 14b6 17 fb f3                   LBSR    PrintAddress    ; Display it
0984 14b9 17 fb a5                   LBSR    PrintComma      ; Print comma
0985 14bc b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0986 14bf 17 01 e1                   LBSR    PrintRegister   ; Print register name
0987 14c2 16 01 ff                   LBRA    done
0988                         ind5
0989 14c5 81 86                      CMPA    #%10000110      ; Check against pattern
0990 14c7 26 11                      BNE     ind6
0991                                                         ; Format is 1RR00110  A,R
0992 14c9 86 41                      LDA     #'A
0993 14cb 17 fb ca                   LBSR    PrintChar       ; Print A
0994 14ce 17 fb 90           commar LBSR    PrintComma      ; Print comma
0995 14d1 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0996 14d4 17 01 cc                   LBSR    PrintRegister   ; Print register name
0997 14d7 16 01 ea                   LBRA    done
0998                         ind6
0999 14da 81 85                      CMPA    #%10000101      ; Check against pattern
1000 14dc 26 07                      BNE     ind7
1001                                                         ; Format is 1RR00101  B,R
1002 14de 86 42                      LDA     #'B
1003 14e0 17 fb b5                   LBSR    PrintChar
1004 14e3 20 e9                      BRA     commar
1005                         ind7
1006 14e5 81 8b                      CMPA    #%10001011      ; Check against pattern
1007 14e7 26 07                      BNE     ind8
1008                                                         ; Format is 1RR01011  D,R
1009 14e9 86 44                      LDA     #'D
1010 14eb 17 fb aa                   LBSR    PrintChar
1011 14ee 20 de                      BRA     commar
1012                         ind8
1013 14f0 81 80                      CMPA    #%10000000      ; Check against pattern
1014 14f2 26 11                      BNE     ind9
1015                                                         ; Format is 1RR00000  ,R+
1016 14f4 17 fb 6a                   LBSR    PrintComma      ; Print comma
1017 14f7 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1018 14fa 17 01 a6                   LBSR    PrintRegister   ; Print register name
1019 14fd 86 2b                      LDA     #'+             ; Print plus
1020 14ff 17 fb 96                   LBSR    PrintChar
1021 1502 16 01 bf                   LBRA    done
1022                         ind9
1023 1505 81 81                      CMPA    #%10000001      ; Check against pattern
1024 1507 26 14                      BNE     ind10
1025                                                         ; Format is 1RR00001  ,R++
1026 1509 17 fb 55                   LBSR    PrintComma      ; Print comma
1027 150c b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1028 150f 17 01 91                   LBSR    PrintRegister   ; Print register name
1029 1512 86 2b                      LDA     #'+             ; Print plus twice
1030 1514 17 fb 81                   LBSR    PrintChar
1031 1517 17 fb 7e                   LBSR    PrintChar
1032 151a 16 01 a7                   LBRA    done
1033                         ind10
1034 151d 81 82                      CMPA    #%10000010      ; Check against pattern
1035 151f 26 11                      BNE     ind11
1036                                                         ; Format is 1RR00010  ,-R
1037 1521 17 fb 3d                   LBSR    PrintComma      ; Print comma
1038 1524 86 2d                      LDA     #'-             ; Print minus
1039 1526 17 fb 6f                   LBSR    PrintChar
1040 1529 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1041 152c 17 01 74                   LBSR    PrintRegister   ; Print register name
1042 152f 16 01 92                   LBRA    done
1043                         ind11
1044 1532 81 83                      CMPA    #%10000011      ; Check against pattern
1045 1534 26 14                      BNE     ind12
1046                                                         ; Format is 1RR00011  ,--R
1047 1536 17 fb 28                   LBSR    PrintComma      ; Print comma
1048 1539 86 2d                      LDA     #'-             ; Print minus twice
1049 153b 17 fb 5a                   LBSR    PrintChar
1050 153e 17 fb 57                   LBSR    PrintChar
1051 1541 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1052 1544 17 01 5c                   LBSR    PrintRegister   ; Print register name
1053 1547 16 01 7a                   LBRA    done
1054                         ind12
1055 154a 81 8c                      CMPA    #%10001100      ; Check against pattern
1056 154c 26 15                      BNE     ind13
1057                                                         ; Format is 1xx01100  n,PCR
1058 154e ae 8d fa b0                LDX     ADDR,PCR
1059 1552 a6 02                      LDA     2,X             ; Get 8-bit offset
1060 1554 17 fb 01                   LBSR    PrintDollar     ; Dollar sign
1061 1557 17 fb 44                   LBSR    PrintByte       ; Display it
1062 155a 17 fb 04                   LBSR    PrintComma      ; Print comma
1063 155d 17 01 5c                   LBSR    PrintPCR        ; Print PCR
1064 1560 16 01 61                   LBRA    done
1065                         ind13
1066 1563 81 8d                      CMPA    #%10001101      ; Check against pattern
1067 1565 26 17                      BNE     ind14
1068                                                         ; Format is 1xx01101  n,PCR
1069 1567 ae 8d fa 97                LDX     ADDR,PCR
1070 156b ec 02                      LDD     2,X             ; Get 16-bit offset
1071 156d 1f 01                      TFR     D,X
1072 156f 17 fa e6                   LBSR    PrintDollar     ; Dollar sign
1073 1572 17 fb 37                   LBSR    PrintAddress    ; Display it
1074 1575 17 fa e9                   LBSR    PrintComma      ; Print comma
1075 1578 17 01 41                   LBSR    PrintPCR        ; Print PCR
1076 157b 16 01 46                   LBRA    done
1077                         ind14
1078 157e 81 94                      CMPA    #%10010100      ; Check against pattern
1079 1580 26 12                      BNE     ind15
1080                                                         ; Format is 1RR10100  [,R]
1081 1582 17 fa e5                   LBSR    PrintLBracket   ; Print left bracket
1082 1585 17 fa d9                   LBSR    PrintComma      ; Print comma
1083 1588 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1084 158b 17 01 15                   LBSR    PrintRegister   ; Print register name
1085 158e 17 fa e2                   LBSR    PrintRBracket   ; Print right bracket
1086 1591 16 01 30                   LBRA    done
1087                         ind15
1088 1594 81 98                      CMPA    #%10011000      ; Check against pattern
1089 1596 26 1e                      BNE     ind16
1090                                                         ; Format is 1RR11000  [n,R]
1091 1598 17 fa cf                   LBSR    PrintLBracket   ; Print left bracket
1092 159b ae 8d fa 63                LDX     ADDR,PCR
1093 159f a6 02                      LDA     2,X             ; Get 8-bit offset
1094 15a1 17 fa b4                   LBSR    PrintDollar     ; Dollar sign
1095 15a4 17 fa f7                   LBSR    PrintByte       ; Display it
1096 15a7 17 fa b7                   LBSR    PrintComma      ; Print comma
1097 15aa b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1098 15ad 17 00 f3                   LBSR    PrintRegister   ; Print register name
1099 15b0 17 fa c0                   LBSR    PrintRBracket   ; Print right bracket
1100 15b3 16 01 0e                   LBRA    done
1101                         ind16
1102 15b6 81 99                      CMPA    #%10011001      ; Check against pattern
1103 15b8 26 20                      BNE     ind17
1104                                                         ; Format is 1RR11001  [n,R]
1105 15ba 17 fa ad                   LBSR    PrintLBracket   ; Print left bracket
1106 15bd ae 8d fa 41                LDX     ADDR,PCR
1107 15c1 ec 02                      LDD     2,X             ; Get 16-bit offset
1108 15c3 1f 01                      TFR     D,X
1109 15c5 17 fa 90                   LBSR    PrintDollar     ; Dollar sign
1110 15c8 17 fa e1                   LBSR    PrintAddress    ; Display it
1111 15cb 17 fa 93                   LBSR    PrintComma      ; Print comma
1112 15ce b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1113 15d1 17 00 cf                   LBSR    PrintRegister   ; Print register name
1114 15d4 17 fa 9c                   LBSR    PrintRBracket   ; Print right bracket
1115 15d7 16 00 ea                   LBRA    done
1116                         ind17
1117 15da 81 96                      CMPA    #%10010110      ; Check against pattern
1118 15dc 26 17                      BNE     ind18
1119                                                         ; Format is 1RR10110  [A,R]
1120 15de 17 fa 89                   LBSR    PrintLBracket   ; Print left bracket
1121 15e1 86 41                      LDA     #'A
1122 15e3 17 fa b2                   LBSR    PrintChar       ; Print A
1123 15e6 17 fa 78           comrb   LBSR    PrintComma      ; Print comma
1124 15e9 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1125 15ec 17 00 b4                   LBSR    PrintRegister   ; Print register name
1126 15ef 17 fa 81                   LBSR    PrintRBracket   ; Print right bracket
1127 15f2 16 00 cf                   LBRA    done
1128                         ind18
1129 15f5 81 95                      CMPA    #%10010101      ; Check against pattern
1130 15f7 26 0a                      BNE     ind19
1131                                                         ; Format is 1RR10101  [B,R]
1132 15f9 17 fa 6e                   LBSR    PrintLBracket   ; Print left bracket
1133 15fc 86 42                      LDA     #'B
1134 15fe 17 fa 97                   LBSR    PrintChar
1135 1601 20 e3                      BRA     comrb
1136                         ind19
1137 1603 81 9b                      CMPA    #%10011011      ; Check against pattern
1138 1605 26 0a                      BNE     ind20
1139                                                         ; Format is 1RR11011  [D,R]
1140 1607 17 fa 60                   LBSR    PrintLBracket   ; Print left bracket
1141 160a 86 44                      LDA     #'D
1142 160c 17 fa 89                   LBSR    PrintChar
1143 160f 20 d5                      BRA     comrb
1144                         ind20
1145 1611 81 91                      CMPA    #%10010001      ; Check against pattern
1146 1613 26 1a                      BNE     ind21
1147                                                         ; Format is 1RR10001  [,R++]
1148 1615 17 fa 52                   LBSR    PrintLBracket   ; Print left bracket
1149 1618 17 fa 46                   LBSR    PrintComma      ; Print comma
1150 161b b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1151 161e 17 00 82                   LBSR    PrintRegister   ; Print register name
1152 1621 86 2b                      LDA     #'+             ; Print plus twice
1153 1623 17 fa 72                   LBSR    PrintChar
1154 1626 17 fa 6f                   LBSR    PrintChar
1155 1629 17 fa 47                   LBSR    PrintRBracket   ; Print right bracket
1156 162c 16 00 95                   LBRA    done
1157                         ind21
1158 162f 81 93                      CMPA    #%10010011      ; Check against pattern
1159 1631 26 18                      BNE     ind22
1160                                                         ; Format is 1RR10011  [,--R]
1161 1633 17 fa 34                   LBSR    PrintLBracket   ; Print left bracket
1162 1636 17 fa 28                   LBSR    PrintComma      ; Print comma
1163 1639 86 2d                      LDA     #'-             ; Print minus twice
1164 163b 17 fa 5a                   LBSR    PrintChar
1165 163e 17 fa 57                   LBSR    PrintChar
1166 1641 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1167 1644 8d 5d                      BSR     PrintRegister   ; Print register name
1168 1646 17 fa 2a                   LBSR    PrintRBracket   ; Print right bracket
1169 1649 20 79                      BRA     done
1170                         ind22
1171 164b 81 9c                      CMPA    #%10011100      ; Check against pattern
1172 164d 26 19                      BNE     ind23
1173                                                         ; Format is 1xx11100  [n,PCR]
1174 164f 17 fa 18                   LBSR    PrintLBracket   ; Print left bracket
1175 1652 ae 8d f9 ac                LDX     ADDR,PCR
1176 1656 a6 02                      LDA     2,X             ; Get 8-bit offset
1177 1658 17 f9 fd                   LBSR    PrintDollar     ; Dollar sign
1178 165b 17 fa 40                   LBSR    PrintByte       ; Display it
1179 165e 17 fa 00                   LBSR    PrintComma      ; Print comma
1180 1661 8d 59                      BSR     PrintPCR        ; Print PCR
1181 1663 17 fa 0d                   LBSR    PrintRBracket   ; Print right bracket
1182 1666 20 5c                      BRA     done
1183                         ind23
1184 1668 81 9d                      CMPA    #%10011101      ; Check against pattern
1185 166a 26 1b                      BNE     ind24
1186                                                         ; Format is 1xx11101  [n,PCR]
1187 166c 17 f9 fb                   LBSR    PrintLBracket   ; Print left bracket
1188 166f ae 8d f9 8f                LDX     ADDR,PCR
1189 1673 ec 02                      LDD     2,X             ; Get 16-bit offset
1190 1675 1f 01                      TFR     D,X
1191 1677 17 f9 de                   LBSR    PrintDollar     ; Dollar sign
1192 167a 17 fa 2f                   LBSR    PrintAddress    ; Display it
1193 167d 17 f9 e1                   LBSR    PrintComma      ; Print comma
1194 1680 8d 3a                      BSR     PrintPCR        ; Print PCR
1195 1682 17 f9 ee                   LBSR    PrintRBracket   ; Print right bracket
1196 1685 20 3d                      BRA     done
1197                         ind24
1198 1687 81 9f                      CMPA    #%10011111      ; Check against pattern
1199 1689 26 16                      BNE     ind25
1200                                                         ; Format is 1xx11111  [n]
1201 168b 17 f9 dc                   LBSR    PrintLBracket   ; Print left bracket
1202 168e ae 8d f9 70                LDX     ADDR,PCR
1203 1692 ec 02                      LDD     2,X             ; Get 16-bit offset
1204 1694 1f 01                      TFR     D,X
1205 1696 17 f9 bf                   LBSR    PrintDollar     ; Dollar sign
1206 1699 17 fa 10                   LBSR    PrintAddress    ; Display it
1207 169c 17 f9 d4                   LBSR    PrintRBracket   ; Print right bracket
1208 169f 20 23                      BRA     done
1209                         ind25                          ; Should never be reached
1210 16a1 20 21                      BRA     done
1211                         
1212                         ; Print register name encoded in bits 5 and 6 of A for indexed
1213                         ; addressing: xRRxxxxx where RR: 00=X 01=Y 10=U 11=S
1214                         ; Registers changed: X
1215                         PrintRegister
1216 16a3 34 02                      PSHS    A               ; Save A
1217 16a5 84 60                      ANDA    #%01100000      ; Mask out other bits
1218 16a7 44                         LSRA                    ; Shift into 2 LSB
1219 16a8 44                         LSRA
1220 16a9 44                         LSRA
1221 16aa 44                         LSRA
1222 16ab 44                         LSRA
1223 16ac 30 8d 00 08                LEAX    REGTABLE,PCR    ; Lookup table of register name characters
1224 16b0 a6 86                      LDA     A,X             ; Get character
1225 16b2 17 f9 e3                   LBSR    PrintChar       ; Print it
1226 16b5 35 02                      PULS    A               ; Restore A
1227 16b7 39                         RTS                     ; Return
1228                         REGTABLE
1229 16b8 58 59 55 53                FCC     "XYUS"
1230                         
1231                         ; Print the string "PCR" on the console.
1232                         ; Registers changed: X
1233                         PrintPCR
1234 16bc 30 8d 05 1c                LEAX    MSG3,PCR        ; "PCR" string
1235 16c0 17 f9 f7                   LBSR    PrintString
1236 16c3 39                         RTS
1237                         
1238                         ; Print final CR
1239                         
1240 16c4 17 f9 84           done    LBSR    PrintCR
1241                         
1242                         ; Update address to next instruction
1243                         ; If it was a page 2/3 instruction, we need to subtract one from the
1244                         ; length to account for ADDR being moved to the second byte of the
1245                         ; instruction.
1246                         
1247 16c7 7d 10 0e                   TST     PAGE23          ; Flag set
1248 16ca 27 03                      BEQ     not23           ; Branch if not
1249 16cc 7a 10 08                   DEC     LEN             ; Decrement length
1250 16cf 4f                 not23   CLRA                    ; Clear MSB of D
1251 16d0 f6 10 08                   LDB     LEN             ; Get length byte in LSB of D
1252 16d3 f3 10 02                   ADDD    ADDR            ; Add to address
1253 16d6 fd 10 02                   STD     ADDR            ; Write new address
1254                         
1255                         ; Return
1256 16d9 39                         RTS
1257                         
1258                         ; *** DATA
1259                         
1260                         ; Table of instruction strings. 4 bytes per table entry
1261                         MNEMONICS
1262 16da 3f 3f 3f 20                FCC     "??? "          ; $00
1263 16de 41 42 58 20                FCC     "ABX "          ; $01
1264 16e2 41 44 43 41                FCC     "ADCA"          ; $02
1265 16e6 41 44 43 42                FCC     "ADCB"          ; $03
1266 16ea 41 44 44 41                FCC     "ADDA"          ; $04
1267 16ee 41 44 44 42                FCC     "ADDB"          ; $05
1268 16f2 41 44 44 44                FCC     "ADDD"          ; $06
1269 16f6 41 4e 44 41                FCC     "ANDA"          ; $07
1270 16fa 41 4e 44 42                FCC     "ANDB"          ; $08
1271 16fe 41 4e 44 43                FCC     "ANDC"          ; $09 Should really  be "ANDCC"
1272 1702 41 53 4c 20                FCC     "ASL "          ; $0A
1273 1706 41 53 4c 41                FCC     "ASLA"          ; $0B
1274 170a 41 53 4c 42                FCC     "ASLB"          ; $0C
1275 170e 41 53 52 20                FCC     "ASR "          ; $0D
1276 1712 41 53 52 41                FCC     "ASRA"          ; $0E
1277 1716 41 53 52 42                FCC     "ASRB"          ; $0F
1278 171a 42 43 43 20                FCC     "BCC "          ; $10
1279 171e 42 43 53 20                FCC     "BCS "          ; $11
1280 1722 42 45 51 20                FCC     "BEQ "          ; $12
1281 1726 42 47 45 20                FCC     "BGE "          ; $13
1282 172a 42 47 54 20                FCC     "BGT "          ; $14
1283 172e 42 48 49 20                FCC     "BHI "          ; $15
1284 1732 42 49 54 41                FCC     "BITA"          ; $16
1285 1736 42 49 54 42                FCC     "BITB"          ; $17
1286 173a 42 4c 45 20                FCC     "BLE "          ; $18
1287 173e 42 4c 53 20                FCC     "BLS "          ; $19
1288 1742 42 4c 54 20                FCC     "BLT "          ; $1A
1289 1746 42 4d 49 20                FCC     "BMI "          ; $1B
1290 174a 42 4e 45 20                FCC     "BNE "          ; $1C
1291 174e 42 50 4c 20                FCC     "BPL "          ; $1D
1292 1752 42 52 41 20                FCC     "BRA "          ; $1E
1293 1756 42 52 4e 20                FCC     "BRN "          ; $1F
1294 175a 42 53 52 20                FCC     "BSR "          ; $20
1295 175e 42 56 43 20                FCC     "BVC "          ; $21
1296 1762 42 56 53 20                FCC     "BVS "          ; $22
1297 1766 43 4c 52 20                FCC     "CLR "          ; $23
1298 176a 43 4c 52 41                FCC     "CLRA"          ; $24
1299 176e 43 4c 52 42                FCC     "CLRB"          ; $25
1300 1772 43 4d 50 41                FCC     "CMPA"          ; $26
1301 1776 43 4d 50 42                FCC     "CMPB"          ; $27
1302 177a 43 4d 50 44                FCC     "CMPD"          ; $28
1303 177e 43 4d 50 53                FCC     "CMPS"          ; $29
1304 1782 43 4d 50 55                FCC     "CMPU"          ; $2A
1305 1786 43 4d 50 58                FCC     "CMPX"          ; $2B
1306 178a 43 4d 50 59                FCC     "CMPY"          ; $2C
1307 178e 43 4f 4d 41                FCC     "COMA"          ; $2D
1308 1792 43 4f 4d 42                FCC     "COMB"          ; $2E
1309 1796 43 4f 4d 20                FCC     "COM "          ; $2F
1310 179a 43 57 41 49                FCC     "CWAI"          ; $30
1311 179e 44 41 41 20                FCC     "DAA "          ; $31
1312 17a2 44 45 43 20                FCC     "DEC "          ; $32
1313 17a6 44 45 43 41                FCC     "DECA"          ; $33
1314 17aa 44 45 43 42                FCC     "DECB"          ; $34
1315 17ae 45 4f 52 41                FCC     "EORA"          ; $35
1316 17b2 45 4f 52 42                FCC     "EORB"          ; $36
1317 17b6 45 58 47 20                FCC     "EXG "          ; $37
1318 17ba 49 4e 43 20                FCC     "INC "          ; $38
1319 17be 49 4e 43 41                FCC     "INCA"          ; $39
1320 17c2 49 4e 43 42                FCC     "INCB"          ; $3A
1321 17c6 4a 4d 50 20                FCC     "JMP "          ; $3B
1322 17ca 4a 53 52 20                FCC     "JSR "          ; $3C
1323 17ce 4c 42 43 43                FCC     "LBCC"          ; $3D
1324 17d2 4c 42 43 53                FCC     "LBCS"          ; $3E
1325 17d6 4c 42 45 51                FCC     "LBEQ"          ; $3F
1326 17da 4c 42 47 45                FCC     "LBGE"          ; $40
1327 17de 4c 42 47 54                FCC     "LBGT"          ; $41
1328 17e2 4c 42 48 49                FCC     "LBHI"          ; $42
1329 17e6 4c 42 4c 45                FCC     "LBLE"          ; $43
1330 17ea 4c 42 4c 53                FCC     "LBLS"          ; $44
1331 17ee 4c 42 4c 54                FCC     "LBLT"          ; $45
1332 17f2 4c 42 4d 49                FCC     "LBMI"          ; $46
1333 17f6 4c 42 4e 45                FCC     "LBNE"          ; $47
1334 17fa 4c 42 50 4c                FCC     "LBPL"          ; $48
1335 17fe 4c 42 52 41                FCC     "LBRA"          ; $49
1336 1802 4c 42 52 4e                FCC     "LBRN"          ; $4A
1337 1806 4c 42 53 52                FCC     "LBSR"          ; $4B
1338 180a 4c 42 56 43                FCC     "LBVC"          ; $4C
1339 180e 4c 42 56 53                FCC     "LBVS"          ; $4D
1340 1812 4c 44 41 20                FCC     "LDA "          ; $4E
1341 1816 4c 44 42 20                FCC     "LDB "          ; $4F
1342 181a 4c 44 44 20                FCC     "LDD "          ; $50
1343 181e 4c 44 53 20                FCC     "LDS "          ; $51
1344 1822 4c 44 55 20                FCC     "LDU "          ; $52
1345 1826 4c 44 58 20                FCC     "LDX "          ; $53
1346 182a 4c 44 59 20                FCC     "LDY "          ; $54
1347 182e 4c 45 41 53                FCC     "LEAS"          ; $55
1348 1832 4c 45 41 55                FCC     "LEAU"          ; $56
1349 1836 4c 45 41 58                FCC     "LEAX"          ; $57
1350 183a 4c 45 41 59                FCC     "LEAY"          ; $58
1351 183e 4c 53 52 20                FCC     "LSR "          ; $59
1352 1842 4c 53 52 41                FCC     "LSRA"          ; $5A
1353 1846 4c 53 52 42                FCC     "LSRB"          ; $5B
1354 184a 4d 55 4c 20                FCC     "MUL "          ; $5C
1355 184e 4e 45 47 20                FCC     "NEG "          ; $5D
1356 1852 4e 45 47 41                FCC     "NEGA"          ; $5E
1357 1856 4e 45 47 42                FCC     "NEGB"          ; $5F
1358 185a 4e 4f 50 20                FCC     "NOP "          ; $60
1359 185e 4f 52 41 20                FCC     "ORA "          ; $61
1360 1862 4f 52 42 20                FCC     "ORB "          ; $62
1361 1866 4f 52 43 43                FCC     "ORCC"          ; $63
1362 186a 50 53 48 53                FCC     "PSHS"          ; $64
1363 186e 50 53 48 55                FCC     "PSHU"          ; $65
1364 1872 50 55 4c 53                FCC     "PULS"          ; $66
1365 1876 50 55 4c 55                FCC     "PULU"          ; $67
1366 187a 52 4f 4c 20                FCC     "ROL "          ; $68
1367 187e 52 4f 4c 41                FCC     "ROLA"          ; $69
1368 1882 52 4f 4c 42                FCC     "ROLB"          ; $6A
1369 1886 52 4f 52 20                FCC     "ROR "          ; $6B
1370 188a 52 4f 52 41                FCC     "RORA"          ; $6C
1371 188e 52 4f 52 42                FCC     "RORB"          ; $6D
1372 1892 52 54 49 20                FCC     "RTI "          ; $6E
1373 1896 52 54 53 20                FCC     "RTS "          ; $6F
1374 189a 53 42 43 41                FCC     "SBCA"          ; $70
1375 189e 53 42 43 42                FCC     "SBCB"          ; $71
1376 18a2 53 45 58 20                FCC     "SEX "          ; $72
1377 18a6 53 54 41 20                FCC     "STA "          ; $73
1378 18aa 53 54 42 20                FCC     "STB "          ; $74
1379 18ae 53 54 44 20                FCC     "STD "          ; $75
1380 18b2 53 54 53 20                FCC     "STS "          ; $76
1381 18b6 53 54 55 20                FCC     "STU "          ; $77
1382 18ba 53 54 58 20                FCC     "STX "          ; $78
1383 18be 53 54 59 20                FCC     "STY "          ; $79
1384 18c2 53 55 42 41                FCC     "SUBA"          ; $7A
1385 18c6 53 55 42 42                FCC     "SUBB"          ; $7B
1386 18ca 53 55 42 44                FCC     "SUBD"          ; $7C
1387 18ce 53 57 49 20                FCC     "SWI "          ; $7D
1388 18d2 53 57 49 32                FCC     "SWI2"          ; $7E
1389 18d6 53 57 49 33                FCC     "SWI3"          ; $7F
1390 18da 53 59 4e 43                FCC     "SYNC"          ; $80
1391 18de 54 46 52 20                FCC     "TFR "          ; $81
1392 18e2 54 53 54 20                FCC     "TST "          ; $82
1393 18e6 54 53 54 41                FCC     "TSTA"          ; $83
1394 18ea 54 53 54 42                FCC     "TSTB"          ; $84
1395                         
1396                         ; Lengths of instructions given an addressing mode. Matches values of
1397                         ; AM_* Indexed addessing instructions lenth can increase due to post
1398                         ; byte.
1399                         LENGTHS
1400 18ee 01                         FCB     1               ; 0 AM_INVALID
1401 18ef 01                         FCB     1               ; 1 AM_INHERENT
1402 18f0 02                         FCB     2               ; 2 AM_IMMEDIATE8
1403 18f1 03                         FCB     3               ; 3 AM_IMMEDIATE16
1404 18f2 02                         FCB     2               ; 4 AM_DIRECT
1405 18f3 03                         FCB     3               ; 5 AM_EXTENDED
1406 18f4 02                         FCB     2               ; 6 AM_RELATIVE8
1407 18f5 03                         FCB     3               ; 7 AM_RELATIVE16
1408 18f6 02                         FCB     2               ; 8 AM_INDEXED
1409                         
1410                         ; Lookup table to return needed remaining spaces to print to pad out
1411                         ; instruction to correct column in disassembly.
1412                         ; # bytes: 1 2 3 4
1413                         ; Padding: 9 6 3 0
1414                         PADDING
1415 18f7 0a 07 04 01                FCB     10,7,4,1
1416                         
1417                         ; Lookup table to return number of additional bytes for indexed
1418                         ; addressing based on low order 5 bits of postbyte. Based on
1419                         ; detailed list of values below.
1420                         
1421                         POSTBYTES
1422 18fb 00 00 00 00 00 00          FCB     0,0,0,0,0,0,0,0
     00 00
1423 1903 01 02 00 00 01 02          FCB     1,2,0,0,1,2,0,0
     00 00
1424 190b 00 00 00 00 00 00          FCB     0,0,0,0,0,0,0,0
     00 00
1425 1913 01 02 00 00 01 02          FCB     1,2,0,0,1,2,0,2
     00 02
1426                         
1427                         ; Pattern:  # Extra bytes:
1428                         ; --------  --------------
1429                         ; 0XXXXXXX   0
1430                         ; 1XX00000   0
1431                         ; 1XX00001   0
1432                         ; 1XX00010   0
1433                         ; 1XX00011   0
1434                         ; 1XX00100   0
1435                         ; 1X000101   0
1436                         ; 1XX00110   0
1437                         ; 1XX00111   0 (INVALID)
1438                         ; 1XX01000   1
1439                         ; 1XX01001   2
1440                         ; 1XX01010   0 (INVALID)
1441                         ; 1XX01011   0
1442                         ; 1XX01100   1
1443                         ; 1XX01101   2
1444                         ; 1XX01110   0 (INVALID)
1445                         ; 1XX01111   0 (INVALID)
1446                         ; 1XX10000   0 (INVALID)
1447                         ; 1XX10001   0
1448                         ; 1XX10010   0 (INVALID)
1449                         ; 1XX10011   0
1450                         ; 1XX10100   0
1451                         ; 1XX10101   0
1452                         ; 1XX10110   0
1453                         ; 1XX10111   0 (INVALID)
1454                         ; 1XX11000   1
1455                         ; 1XX11001   2
1456                         ; 1XX11010   0 (INVALID)
1457                         ; 1XX11011   0
1458                         ; 1XX11100   1
1459                         ; 1XX11101   2
1460                         ; 1XX11110   0 (INVALID)
1461                         ; 1XX11111   2
1462                         
1463                         ; Opcodes. Listed in order indexed by op code. Defines the mnemonic.
1464                         OPCODES
1465 191b 5d                         FCB     OP_NEG          ; 00
1466 191c 00                         FCB     OP_INV          ; 01
1467 191d 00                         FCB     OP_INV          ; 02
1468 191e 2e                         FCB     OP_COMB         ; 03
1469 191f 59                         FCB     OP_LSR          ; 04
1470 1920 00                         FCB     OP_INV          ; 05
1471 1921 6b                         FCB     OP_ROR          ; 06
1472 1922 0d                         FCB     OP_ASR          ; 07
1473 1923 0a                         FCB     OP_ASL          ; 08
1474 1924 68                         FCB     OP_ROL          ; 09
1475 1925 32                         FCB     OP_DEC          ; 0A
1476 1926 00                         FCB     OP_INV          ; 0B
1477 1927 38                         FCB     OP_INC          ; 0C
1478 1928 82                         FCB     OP_TST          ; 0D
1479 1929 3b                         FCB     OP_JMP          ; 0E
1480 192a 23                         FCB     OP_CLR          ; 0F
1481                         
1482 192b 00                         FCB     OP_INV          ; 10 Page 2 extended opcodes (see other table)
1483 192c 00                         FCB     OP_INV          ; 11 Page 3 extended opcodes (see other table)
1484 192d 60                         FCB     OP_NOP          ; 12
1485 192e 80                         FCB     OP_SYNC         ; 13
1486 192f 00                         FCB     OP_INV          ; 14
1487 1930 00                         FCB     OP_INV          ; 15
1488 1931 49                         FCB     OP_LBRA         ; 16
1489 1932 4b                         FCB     OP_LBSR         ; 17
1490 1933 00                         FCB     OP_INV          ; 18
1491 1934 31                         FCB     OP_DAA          ; 19
1492 1935 63                         FCB     OP_ORCC         ; 1A
1493 1936 00                         FCB     OP_INV          ; 1B
1494 1937 09                         FCB     OP_ANDCC        ; 1C
1495 1938 72                         FCB     OP_SEX          ; 1D
1496 1939 37                         FCB     OP_EXG          ; 1E
1497 193a 81                         FCB     OP_TFR          ; 1F
1498                         
1499 193b 1e                         FCB     OP_BRA          ; 20
1500 193c 1f                         FCB     OP_BRN          ; 21
1501 193d 15                         FCB     OP_BHI          ; 22
1502 193e 19                         FCB     OP_BLS          ; 23
1503 193f 10                         FCB     OP_BCC          ; 24
1504 1940 11                         FCB     OP_BCS          ; 25
1505 1941 1c                         FCB     OP_BNE          ; 26
1506 1942 12                         FCB     OP_BEQ          ; 27
1507 1943 21                         FCB     OP_BVC          ; 28
1508 1944 22                         FCB     OP_BVS          ; 29
1509 1945 1d                         FCB     OP_BPL          ; 2A
1510 1946 1b                         FCB     OP_BMI          ; 2B
1511 1947 13                         FCB     OP_BGE          ; 2C
1512 1948 1a                         FCB     OP_BLT          ; 2D
1513 1949 14                         FCB     OP_BGT          ; 2E
1514 194a 18                         FCB     OP_BLE          ; 2F
1515                         
1516 194b 57                         FCB     OP_LEAX         ; 30
1517 194c 58                         FCB     OP_LEAY         ; 31
1518 194d 55                         FCB     OP_LEAS         ; 32
1519 194e 56                         FCB     OP_LEAU         ; 33
1520 194f 64                         FCB     OP_PSHS         ; 34
1521 1950 66                         FCB     OP_PULS         ; 35
1522 1951 65                         FCB     OP_PSHU         ; 36
1523 1952 67                         FCB     OP_PULU         ; 37
1524 1953 00                         FCB     OP_INV          ; 38
1525 1954 6f                         FCB     OP_RTS          ; 39
1526 1955 01                         FCB     OP_ABX          ; 3A
1527 1956 6e                         FCB     OP_RTI          ; 3B
1528 1957 30                         FCB     OP_CWAI         ; 3C
1529 1958 5c                         FCB     OP_MUL          ; 3D
1530 1959 00                         FCB     OP_INV          ; 3E
1531 195a 7d                         FCB     OP_SWI          ; 3F
1532                         
1533 195b 5e                         FCB     OP_NEGA         ; 40
1534 195c 00                         FCB     OP_INV          ; 41
1535 195d 00                         FCB     OP_INV          ; 42
1536 195e 2d                         FCB     OP_COMA         ; 43
1537 195f 5a                         FCB     OP_LSRA         ; 44
1538 1960 00                         FCB     OP_INV          ; 45
1539 1961 6c                         FCB     OP_RORA         ; 46
1540 1962 0e                         FCB     OP_ASRA         ; 47
1541 1963 0b                         FCB     OP_ASLA         ; 48
1542 1964 69                         FCB     OP_ROLA         ; 49
1543 1965 33                         FCB     OP_DECA         ; 4A
1544 1966 00                         FCB     OP_INV          ; 4B
1545 1967 39                         FCB     OP_INCA         ; 4C
1546 1968 83                         FCB     OP_TSTA         ; 4D
1547 1969 00                         FCB     OP_INV          ; 4E
1548 196a 24                         FCB     OP_CLRA         ; 4F
1549                         
1550 196b 5f                         FCB     OP_NEGB         ; 50
1551 196c 00                         FCB     OP_INV          ; 51
1552 196d 00                         FCB     OP_INV          ; 52
1553 196e 2e                         FCB     OP_COMB         ; 53
1554 196f 5b                         FCB     OP_LSRB         ; 54
1555 1970 00                         FCB     OP_INV          ; 55
1556 1971 6d                         FCB     OP_RORB         ; 56
1557 1972 0f                         FCB     OP_ASRB         ; 57
1558 1973 0c                         FCB     OP_ASLB         ; 58
1559 1974 6a                         FCB     OP_ROLB         ; 59
1560 1975 34                         FCB     OP_DECB         ; 5A
1561 1976 00                         FCB     OP_INV          ; 5B
1562 1977 3a                         FCB     OP_INCB         ; 5C
1563 1978 84                         FCB     OP_TSTB         ; 5D
1564 1979 00                         FCB     OP_INV          ; 5E
1565 197a 25                         FCB     OP_CLRB         ; 5F
1566                         
1567 197b 5d                         FCB     OP_NEG          ; 60
1568 197c 00                         FCB     OP_INV          ; 61
1569 197d 00                         FCB     OP_INV          ; 62
1570 197e 2f                         FCB     OP_COM          ; 63
1571 197f 59                         FCB     OP_LSR          ; 64
1572 1980 00                         FCB     OP_INV          ; 65
1573 1981 6b                         FCB     OP_ROR          ; 66
1574 1982 0d                         FCB     OP_ASR          ; 67
1575 1983 0a                         FCB     OP_ASL          ; 68
1576 1984 68                         FCB     OP_ROL          ; 69
1577 1985 32                         FCB     OP_DEC          ; 6A
1578 1986 00                         FCB     OP_INV          ; 6B
1579 1987 38                         FCB     OP_INC          ; 6C
1580 1988 82                         FCB     OP_TST          ; 6D
1581 1989 3b                         FCB     OP_JMP          ; 6E
1582 198a 23                         FCB     OP_CLR          ; 6F
1583                         
1584 198b 5d                         FCB     OP_NEG          ; 70
1585 198c 00                         FCB     OP_INV          ; 71
1586 198d 00                         FCB     OP_INV          ; 72
1587 198e 2f                         FCB     OP_COM          ; 73
1588 198f 59                         FCB     OP_LSR          ; 74
1589 1990 00                         FCB     OP_INV          ; 75
1590 1991 6b                         FCB     OP_ROR          ; 76
1591 1992 0d                         FCB     OP_ASR          ; 77
1592 1993 0a                         FCB     OP_ASL          ; 78
1593 1994 68                         FCB     OP_ROL          ; 79
1594 1995 32                         FCB     OP_DEC          ; 7A
1595 1996 00                         FCB     OP_INV          ; 7B
1596 1997 38                         FCB     OP_INC          ; 7C
1597 1998 82                         FCB     OP_TST          ; 7D
1598 1999 3b                         FCB     OP_JMP          ; 7E
1599 199a 23                         FCB     OP_CLR          ; 7F
1600                         
1601 199b 7a                         FCB     OP_SUBA         ; 80
1602 199c 26                         FCB     OP_CMPA         ; 81
1603 199d 70                         FCB     OP_SBCA         ; 82
1604 199e 7c                         FCB     OP_SUBD         ; 83
1605 199f 07                         FCB     OP_ANDA         ; 84
1606 19a0 16                         FCB     OP_BITA         ; 85
1607 19a1 4e                         FCB     OP_LDA          ; 86
1608 19a2 00                         FCB     OP_INV          ; 87
1609 19a3 35                         FCB     OP_EORA         ; 88
1610 19a4 02                         FCB     OP_ADCA         ; 89
1611 19a5 61                         FCB     OP_ORA          ; 8A
1612 19a6 04                         FCB     OP_ADDA         ; 8B
1613 19a7 2b                         FCB     OP_CMPX         ; 8C
1614 19a8 20                         FCB     OP_BSR          ; 8D
1615 19a9 53                         FCB     OP_LDX          ; 8E
1616 19aa 00                         FCB     OP_INV          ; 8F
1617                         
1618 19ab 7a                         FCB     OP_SUBA         ; 90
1619 19ac 26                         FCB     OP_CMPA         ; 91
1620 19ad 70                         FCB     OP_SBCA         ; 92
1621 19ae 7c                         FCB     OP_SUBD         ; 93
1622 19af 07                         FCB     OP_ANDA         ; 94
1623 19b0 16                         FCB     OP_BITA         ; 95
1624 19b1 4e                         FCB     OP_LDA          ; 96
1625 19b2 73                         FCB     OP_STA          ; 97
1626 19b3 35                         FCB     OP_EORA         ; 98
1627 19b4 02                         FCB     OP_ADCA         ; 99
1628 19b5 61                         FCB     OP_ORA          ; 9A
1629 19b6 04                         FCB     OP_ADDA         ; 9B
1630 19b7 2b                         FCB     OP_CMPX         ; 9C
1631 19b8 3c                         FCB     OP_JSR          ; 9D
1632 19b9 53                         FCB     OP_LDX          ; 9E
1633 19ba 78                         FCB     OP_STX          ; 9F
1634                         
1635 19bb 7a                         FCB     OP_SUBA         ; A0
1636 19bc 26                         FCB     OP_CMPA         ; A1
1637 19bd 70                         FCB     OP_SBCA         ; A2
1638 19be 7c                         FCB     OP_SUBD         ; A3
1639 19bf 07                         FCB     OP_ANDA         ; A4
1640 19c0 16                         FCB     OP_BITA         ; A5
1641 19c1 4e                         FCB     OP_LDA          ; A6
1642 19c2 73                         FCB     OP_STA          ; A7
1643 19c3 35                         FCB     OP_EORA         ; A8
1644 19c4 02                         FCB     OP_ADCA         ; A9
1645 19c5 61                         FCB     OP_ORA          ; AA
1646 19c6 04                         FCB     OP_ADDA         ; AB
1647 19c7 2b                         FCB     OP_CMPX         ; AC
1648 19c8 3c                         FCB     OP_JSR          ; AD
1649 19c9 53                         FCB     OP_LDX          ; AE
1650 19ca 78                         FCB     OP_STX          ; AF
1651                         
1652 19cb 7a                         FCB     OP_SUBA         ; B0
1653 19cc 26                         FCB     OP_CMPA         ; B1
1654 19cd 70                         FCB     OP_SBCA         ; B2
1655 19ce 7c                         FCB     OP_SUBD         ; B3
1656 19cf 07                         FCB     OP_ANDA         ; B4
1657 19d0 16                         FCB     OP_BITA         ; B5
1658 19d1 4e                         FCB     OP_LDA          ; B6
1659 19d2 73                         FCB     OP_STA          ; B7
1660 19d3 35                         FCB     OP_EORA         ; B8
1661 19d4 02                         FCB     OP_ADCA         ; B9
1662 19d5 61                         FCB     OP_ORA          ; BA
1663 19d6 04                         FCB     OP_ADDA         ; BB
1664 19d7 2b                         FCB     OP_CMPX         ; BC
1665 19d8 3c                         FCB     OP_JSR          ; BD
1666 19d9 53                         FCB     OP_LDX          ; BE
1667 19da 78                         FCB     OP_STX          ; BF
1668                         
1669 19db 7b                         FCB     OP_SUBB         ; C0
1670 19dc 27                         FCB     OP_CMPB         ; C1
1671 19dd 71                         FCB     OP_SBCB         ; C2
1672 19de 06                         FCB     OP_ADDD         ; C3
1673 19df 08                         FCB     OP_ANDB         ; C4
1674 19e0 17                         FCB     OP_BITB         ; C5
1675 19e1 4f                         FCB     OP_LDB          ; C6
1676 19e2 00                         FCB     OP_INV          ; C7
1677 19e3 36                         FCB     OP_EORB         ; C8
1678 19e4 03                         FCB     OP_ADCB         ; C9
1679 19e5 62                         FCB     OP_ORB          ; CA
1680 19e6 05                         FCB     OP_ADDB         ; CB
1681 19e7 50                         FCB     OP_LDD          ; CC
1682 19e8 00                         FCB     OP_INV          ; CD
1683 19e9 52                         FCB     OP_LDU          ; CE
1684 19ea 00                         FCB     OP_INV          ; CF
1685                         
1686 19eb 7b                         FCB     OP_SUBB         ; D0
1687 19ec 27                         FCB     OP_CMPB         ; D1
1688 19ed 71                         FCB     OP_SBCB         ; D2
1689 19ee 06                         FCB     OP_ADDD         ; D3
1690 19ef 08                         FCB     OP_ANDB         ; D4
1691 19f0 17                         FCB     OP_BITB         ; D5
1692 19f1 4f                         FCB     OP_LDB          ; D6
1693 19f2 74                         FCB     OP_STB          ; D7
1694 19f3 36                         FCB     OP_EORB         ; D8
1695 19f4 03                         FCB     OP_ADCB         ; D9
1696 19f5 62                         FCB     OP_ORB          ; DA
1697 19f6 05                         FCB     OP_ADDB         ; DB
1698 19f7 50                         FCB     OP_LDD          ; DC
1699 19f8 75                         FCB     OP_STD          ; DD
1700 19f9 52                         FCB     OP_LDU          ; DE
1701 19fa 77                         FCB     OP_STU          ; DF
1702                         
1703 19fb 7b                         FCB     OP_SUBB         ; E0
1704 19fc 27                         FCB     OP_CMPB         ; E1
1705 19fd 71                         FCB     OP_SBCB         ; E2
1706 19fe 06                         FCB     OP_ADDD         ; E3
1707 19ff 08                         FCB     OP_ANDB         ; E4
1708 1a00 17                         FCB     OP_BITB         ; E5
1709 1a01 4f                         FCB     OP_LDB          ; E6
1710 1a02 74                         FCB     OP_STB          ; E7
1711 1a03 36                         FCB     OP_EORB         ; E8
1712 1a04 03                         FCB     OP_ADCB         ; E9
1713 1a05 62                         FCB     OP_ORB          ; EA
1714 1a06 05                         FCB     OP_ADDB         ; EB
1715 1a07 50                         FCB     OP_LDD          ; EC
1716 1a08 75                         FCB     OP_STD          ; ED
1717 1a09 52                         FCB     OP_LDU          ; EE
1718 1a0a 77                         FCB     OP_STU          ; EF
1719                         
1720 1a0b 7b                         FCB     OP_SUBB         ; F0
1721 1a0c 27                         FCB     OP_CMPB         ; F1
1722 1a0d 71                         FCB     OP_SBCB         ; F2
1723 1a0e 06                         FCB     OP_ADDD         ; F3
1724 1a0f 08                         FCB     OP_ANDB         ; F4
1725 1a10 17                         FCB     OP_BITB         ; F5
1726 1a11 4f                         FCB     OP_LDB          ; F6
1727 1a12 74                         FCB     OP_STB          ; F7
1728 1a13 36                         FCB     OP_EORB         ; F8
1729 1a14 03                         FCB     OP_ADCB         ; F9
1730 1a15 62                         FCB     OP_ORB          ; FA
1731 1a16 05                         FCB     OP_ADDB         ; FB
1732 1a17 50                         FCB     OP_LDD          ; FC
1733 1a18 75                         FCB     OP_STD          ; FD
1734 1a19 52                         FCB     OP_LDU          ; FE
1735 1a1a 77                         FCB     OP_STU          ; FF
1736                         
1737                         ; Table of addressing modes. Listed in order,indexed by op code.
1738                         MODES
1739 1a1b 04                         FCB     AM_DIRECT       ; 00
1740 1a1c 00                         FCB     AM_INVALID      ; 01
1741 1a1d 00                         FCB     AM_INVALID      ; 02
1742 1a1e 04                         FCB     AM_DIRECT       ; 03
1743 1a1f 04                         FCB     AM_DIRECT       ; 04
1744 1a20 00                         FCB     AM_INVALID      ; 05
1745 1a21 04                         FCB     AM_DIRECT       ; 06
1746 1a22 04                         FCB     AM_DIRECT       ; 07
1747 1a23 04                         FCB     AM_DIRECT       ; 08
1748 1a24 04                         FCB     AM_DIRECT       ; 09
1749 1a25 04                         FCB     AM_DIRECT       ; 0A
1750 1a26 00                         FCB     AM_INVALID      ; 0B
1751 1a27 04                         FCB     AM_DIRECT       ; 0C
1752 1a28 04                         FCB     AM_DIRECT       ; 0D
1753 1a29 04                         FCB     AM_DIRECT       ; 0E
1754 1a2a 04                         FCB     AM_DIRECT       ; 0F
1755                         
1756 1a2b 00                         FCB     AM_INVALID      ; 10 Page 2 extended opcodes (see other table)
1757 1a2c 00                         FCB     AM_INVALID      ; 11 Page 3 extended opcodes (see other table)
1758 1a2d 01                         FCB     AM_INHERENT     ; 12
1759 1a2e 01                         FCB     AM_INHERENT     ; 13
1760 1a2f 00                         FCB     AM_INVALID      ; 14
1761 1a30 00                         FCB     AM_INVALID      ; 15
1762 1a31 07                         FCB     AM_RELATIVE16   ; 16
1763 1a32 07                         FCB     AM_RELATIVE16   ; 17
1764 1a33 00                         FCB     AM_INVALID      ; 18
1765 1a34 01                         FCB     AM_INHERENT     ; 19
1766 1a35 02                         FCB     AM_IMMEDIATE8   ; 1A
1767 1a36 00                         FCB     AM_INVALID      ; 1B
1768 1a37 02                         FCB     AM_IMMEDIATE8   ; 1C
1769 1a38 01                         FCB     AM_INHERENT     ; 1D
1770 1a39 02                         FCB     AM_IMMEDIATE8   ; 1E
1771 1a3a 02                         FCB     AM_IMMEDIATE8   ; 1F
1772                         
1773 1a3b 06                         FCB     AM_RELATIVE8    ; 20
1774 1a3c 06                         FCB     AM_RELATIVE8    ; 21
1775 1a3d 06                         FCB     AM_RELATIVE8    ; 22
1776 1a3e 06                         FCB     AM_RELATIVE8    ; 23
1777 1a3f 06                         FCB     AM_RELATIVE8    ; 24
1778 1a40 06                         FCB     AM_RELATIVE8    ; 25
1779 1a41 06                         FCB     AM_RELATIVE8    ; 26
1780 1a42 06                         FCB     AM_RELATIVE8    ; 27
1781 1a43 06                         FCB     AM_RELATIVE8    ; 28
1782 1a44 06                         FCB     AM_RELATIVE8    ; 29
1783 1a45 06                         FCB     AM_RELATIVE8    ; 2A
1784 1a46 06                         FCB     AM_RELATIVE8    ; 2B
1785 1a47 06                         FCB     AM_RELATIVE8    ; 2C
1786 1a48 06                         FCB     AM_RELATIVE8    ; 2D
1787 1a49 06                         FCB     AM_RELATIVE8    ; 2E
1788 1a4a 06                         FCB     AM_RELATIVE8    ; 2F
1789                         
1790 1a4b 08                         FCB     AM_INDEXED      ; 30
1791 1a4c 08                         FCB     AM_INDEXED      ; 31
1792 1a4d 08                         FCB     AM_INDEXED      ; 32
1793 1a4e 08                         FCB     AM_INDEXED      ; 33
1794 1a4f 02                         FCB     AM_IMMEDIATE8   ; 34
1795 1a50 02                         FCB     AM_IMMEDIATE8   ; 35
1796 1a51 02                         FCB     AM_IMMEDIATE8   ; 36
1797 1a52 02                         FCB     AM_IMMEDIATE8   ; 37
1798 1a53 00                         FCB     AM_INVALID      ; 38
1799 1a54 01                         FCB     AM_INHERENT     ; 39
1800 1a55 01                         FCB     AM_INHERENT     ; 3A
1801 1a56 01                         FCB     AM_INHERENT     ; 3B
1802 1a57 02                         FCB     AM_IMMEDIATE8   ; 3C
1803 1a58 01                         FCB     AM_INHERENT     ; 3D
1804 1a59 00                         FCB     AM_INVALID      ; 3E
1805 1a5a 01                         FCB     AM_INHERENT     ; 3F
1806                         
1807 1a5b 01                         FCB     AM_INHERENT     ; 40
1808 1a5c 00                         FCB     AM_INVALID      ; 41
1809 1a5d 00                         FCB     AM_INVALID      ; 42
1810 1a5e 01                         FCB     AM_INHERENT     ; 43
1811 1a5f 01                         FCB     AM_INHERENT     ; 44
1812 1a60 00                         FCB     AM_INVALID      ; 45
1813 1a61 01                         FCB     AM_INHERENT     ; 46
1814 1a62 01                         FCB     AM_INHERENT     ; 47
1815 1a63 01                         FCB     AM_INHERENT     ; 48
1816 1a64 01                         FCB     AM_INHERENT     ; 49
1817 1a65 01                         FCB     AM_INHERENT     ; 4A
1818 1a66 00                         FCB     AM_INVALID      ; 4B
1819 1a67 01                         FCB     AM_INHERENT     ; 4C
1820 1a68 01                         FCB     AM_INHERENT     ; 4D
1821 1a69 00                         FCB     AM_INVALID      ; 4E
1822 1a6a 01                         FCB     AM_INHERENT     ; 4F
1823                         
1824 1a6b 01                         FCB     AM_INHERENT     ; 50
1825 1a6c 00                         FCB     AM_INVALID      ; 51
1826 1a6d 00                         FCB     AM_INVALID      ; 52
1827 1a6e 01                         FCB     AM_INHERENT     ; 53
1828 1a6f 01                         FCB     AM_INHERENT     ; 54
1829 1a70 00                         FCB     AM_INVALID      ; 55
1830 1a71 01                         FCB     AM_INHERENT     ; 56
1831 1a72 01                         FCB     AM_INHERENT     ; 57
1832 1a73 01                         FCB     AM_INHERENT     ; 58
1833 1a74 01                         FCB     AM_INHERENT     ; 59
1834 1a75 01                         FCB     AM_INHERENT     ; 5A
1835 1a76 00                         FCB     AM_INVALID      ; 5B
1836 1a77 01                         FCB     AM_INHERENT     ; 5C
1837 1a78 01                         FCB     AM_INHERENT     ; 5D
1838 1a79 00                         FCB     AM_INVALID      ; 5E
1839 1a7a 01                         FCB     AM_INHERENT     ; 5F
1840                         
1841 1a7b 08                         FCB     AM_INDEXED      ; 60
1842 1a7c 00                         FCB     AM_INVALID      ; 61
1843 1a7d 00                         FCB     AM_INVALID      ; 62
1844 1a7e 08                         FCB     AM_INDEXED      ; 63
1845 1a7f 08                         FCB     AM_INDEXED      ; 64
1846 1a80 00                         FCB     AM_INVALID      ; 65
1847 1a81 08                         FCB     AM_INDEXED      ; 66
1848 1a82 08                         FCB     AM_INDEXED      ; 67
1849 1a83 08                         FCB     AM_INDEXED      ; 68
1850 1a84 08                         FCB     AM_INDEXED      ; 69
1851 1a85 08                         FCB     AM_INDEXED      ; 6A
1852 1a86 00                         FCB     AM_INVALID      ; 6B
1853 1a87 08                         FCB     AM_INDEXED      ; 6C
1854 1a88 08                         FCB     AM_INDEXED      ; 6D
1855 1a89 08                         FCB     AM_INDEXED      ; 6E
1856 1a8a 08                         FCB     AM_INDEXED      ; 6F
1857                         
1858 1a8b 05                         FCB     AM_EXTENDED     ; 70
1859 1a8c 00                         FCB     AM_INVALID      ; 71
1860 1a8d 00                         FCB     AM_INVALID      ; 72
1861 1a8e 05                         FCB     AM_EXTENDED     ; 73
1862 1a8f 05                         FCB     AM_EXTENDED     ; 74
1863 1a90 00                         FCB     AM_INVALID      ; 75
1864 1a91 05                         FCB     AM_EXTENDED     ; 76
1865 1a92 05                         FCB     AM_EXTENDED     ; 77
1866 1a93 05                         FCB     AM_EXTENDED     ; 78
1867 1a94 05                         FCB     AM_EXTENDED     ; 79
1868 1a95 05                         FCB     AM_EXTENDED     ; 7A
1869 1a96 00                         FCB     AM_INVALID      ; 7B
1870 1a97 05                         FCB     AM_EXTENDED     ; 7C
1871 1a98 05                         FCB     AM_EXTENDED     ; 7D
1872 1a99 05                         FCB     AM_EXTENDED     ; 7E
1873 1a9a 05                         FCB     AM_EXTENDED     ; 7F
1874                         
1875 1a9b 02                         FCB     AM_IMMEDIATE8   ; 80
1876 1a9c 02                         FCB     AM_IMMEDIATE8   ; 81
1877 1a9d 02                         FCB     AM_IMMEDIATE8   ; 82
1878 1a9e 03                         FCB     AM_IMMEDIATE16  ; 83
1879 1a9f 02                         FCB     AM_IMMEDIATE8   ; 84
1880 1aa0 02                         FCB     AM_IMMEDIATE8   ; 85
1881 1aa1 02                         FCB     AM_IMMEDIATE8   ; 86
1882 1aa2 00                         FCB     AM_INVALID      ; 87
1883 1aa3 02                         FCB     AM_IMMEDIATE8   ; 88
1884 1aa4 02                         FCB     AM_IMMEDIATE8   ; 89
1885 1aa5 02                         FCB     AM_IMMEDIATE8   ; 8A
1886 1aa6 02                         FCB     AM_IMMEDIATE8   ; 8B
1887 1aa7 03                         FCB     AM_IMMEDIATE16  ; 8C
1888 1aa8 06                         FCB     AM_RELATIVE8    ; 8D
1889 1aa9 03                         FCB     AM_IMMEDIATE16  ; 8E
1890 1aaa 00                         FCB     AM_INVALID      ; 8F
1891                         
1892 1aab 04                         FCB     AM_DIRECT       ; 90
1893 1aac 04                         FCB     AM_DIRECT       ; 91
1894 1aad 04                         FCB     AM_DIRECT       ; 92
1895 1aae 04                         FCB     AM_DIRECT       ; 93
1896 1aaf 04                         FCB     AM_DIRECT       ; 94
1897 1ab0 04                         FCB     AM_DIRECT       ; 95
1898 1ab1 04                         FCB     AM_DIRECT       ; 96
1899 1ab2 04                         FCB     AM_DIRECT       ; 97
1900 1ab3 04                         FCB     AM_DIRECT       ; 98
1901 1ab4 04                         FCB     AM_DIRECT       ; 99
1902 1ab5 04                         FCB     AM_DIRECT       ; 9A
1903 1ab6 04                         FCB     AM_DIRECT       ; 9B
1904 1ab7 04                         FCB     AM_DIRECT       ; 9C
1905 1ab8 04                         FCB     AM_DIRECT       ; 9D
1906 1ab9 04                         FCB     AM_DIRECT       ; 9E
1907 1aba 04                         FCB     AM_DIRECT       ; 9F
1908                         
1909 1abb 08                         FCB     AM_INDEXED      ; A0
1910 1abc 08                         FCB     AM_INDEXED      ; A1
1911 1abd 08                         FCB     AM_INDEXED      ; A2
1912 1abe 08                         FCB     AM_INDEXED      ; A3
1913 1abf 08                         FCB     AM_INDEXED      ; A4
1914 1ac0 08                         FCB     AM_INDEXED      ; A5
1915 1ac1 08                         FCB     AM_INDEXED      ; A6
1916 1ac2 08                         FCB     AM_INDEXED      ; A7
1917 1ac3 08                         FCB     AM_INDEXED      ; A8
1918 1ac4 08                         FCB     AM_INDEXED      ; A9
1919 1ac5 08                         FCB     AM_INDEXED      ; AA
1920 1ac6 08                         FCB     AM_INDEXED      ; AB
1921 1ac7 08                         FCB     AM_INDEXED      ; AC
1922 1ac8 08                         FCB     AM_INDEXED      ; AD
1923 1ac9 08                         FCB     AM_INDEXED      ; AE
1924 1aca 08                         FCB     AM_INDEXED      ; AF
1925                         
1926 1acb 05                         FCB     AM_EXTENDED     ; B0
1927 1acc 05                         FCB     AM_EXTENDED     ; B1
1928 1acd 05                         FCB     AM_EXTENDED     ; B2
1929 1ace 05                         FCB     AM_EXTENDED     ; B3
1930 1acf 05                         FCB     AM_EXTENDED     ; B4
1931 1ad0 05                         FCB     AM_EXTENDED     ; B5
1932 1ad1 05                         FCB     AM_EXTENDED     ; B6
1933 1ad2 05                         FCB     AM_EXTENDED     ; B7
1934 1ad3 05                         FCB     AM_EXTENDED     ; B8
1935 1ad4 05                         FCB     AM_EXTENDED     ; B9
1936 1ad5 05                         FCB     AM_EXTENDED     ; BA
1937 1ad6 05                         FCB     AM_EXTENDED     ; BB
1938 1ad7 05                         FCB     AM_EXTENDED     ; BC
1939 1ad8 05                         FCB     AM_EXTENDED     ; BD
1940 1ad9 05                         FCB     AM_EXTENDED     ; BE
1941 1ada 05                         FCB     AM_EXTENDED     ; BF
1942                         
1943 1adb 02                         FCB     AM_IMMEDIATE8   ; C0
1944 1adc 02                         FCB     AM_IMMEDIATE8   ; C1
1945 1add 02                         FCB     AM_IMMEDIATE8   ; C2
1946 1ade 03                         FCB     AM_IMMEDIATE16  ; C3
1947 1adf 02                         FCB     AM_IMMEDIATE8   ; C4
1948 1ae0 02                         FCB     AM_IMMEDIATE8   ; C5
1949 1ae1 02                         FCB     AM_IMMEDIATE8   ; C6
1950 1ae2 00                         FCB     AM_INVALID      ; C7
1951 1ae3 02                         FCB     AM_IMMEDIATE8   ; C8
1952 1ae4 02                         FCB     AM_IMMEDIATE8   ; C9
1953 1ae5 02                         FCB     AM_IMMEDIATE8   ; CA
1954 1ae6 02                         FCB     AM_IMMEDIATE8   ; CB
1955 1ae7 02                         FCB     AM_IMMEDIATE8   ; CC
1956 1ae8 01                         FCB     AM_INHERENT     ; CD
1957 1ae9 02                         FCB     AM_IMMEDIATE8   ; CE
1958 1aea 00                         FCB     AM_INVALID      ; CF
1959                         
1960 1aeb 04                         FCB     AM_DIRECT       ; D0
1961 1aec 04                         FCB     AM_DIRECT       ; D1
1962 1aed 04                         FCB     AM_DIRECT       ; D2
1963 1aee 04                         FCB     AM_DIRECT       ; D3
1964 1aef 04                         FCB     AM_DIRECT       ; D4
1965 1af0 04                         FCB     AM_DIRECT       ; D5
1966 1af1 04                         FCB     AM_DIRECT       ; D6
1967 1af2 04                         FCB     AM_DIRECT       ; D7
1968 1af3 04                         FCB     AM_DIRECT       ; D8
1969 1af4 04                         FCB     AM_DIRECT       ; D9
1970 1af5 04                         FCB     AM_DIRECT       ; DA
1971 1af6 04                         FCB     AM_DIRECT       ; DB
1972 1af7 04                         FCB     AM_DIRECT       ; DC
1973 1af8 04                         FCB     AM_DIRECT       ; DD
1974 1af9 04                         FCB     AM_DIRECT       ; DE
1975 1afa 04                         FCB     AM_DIRECT       ; DF
1976                         
1977 1afb 08                         FCB     AM_INDEXED      ; E0
1978 1afc 08                         FCB     AM_INDEXED      ; E1
1979 1afd 08                         FCB     AM_INDEXED      ; E2
1980 1afe 08                         FCB     AM_INDEXED      ; E3
1981 1aff 08                         FCB     AM_INDEXED      ; E4
1982 1b00 08                         FCB     AM_INDEXED      ; E5
1983 1b01 08                         FCB     AM_INDEXED      ; E6
1984 1b02 08                         FCB     AM_INDEXED      ; E7
1985 1b03 08                         FCB     AM_INDEXED      ; E8
1986 1b04 08                         FCB     AM_INDEXED      ; E9
1987 1b05 08                         FCB     AM_INDEXED      ; EA
1988 1b06 08                         FCB     AM_INDEXED      ; EB
1989 1b07 08                         FCB     AM_INDEXED      ; EC
1990 1b08 08                         FCB     AM_INDEXED      ; ED
1991 1b09 08                         FCB     AM_INDEXED      ; EE
1992 1b0a 08                         FCB     AM_INDEXED      ; EF
1993                         
1994 1b0b 05                         FCB     AM_EXTENDED     ; F0
1995 1b0c 05                         FCB     AM_EXTENDED     ; F1
1996 1b0d 05                         FCB     AM_EXTENDED     ; F2
1997 1b0e 05                         FCB     AM_EXTENDED     ; F3
1998 1b0f 05                         FCB     AM_EXTENDED     ; F4
1999 1b10 05                         FCB     AM_EXTENDED     ; F5
2000 1b11 05                         FCB     AM_EXTENDED     ; F6
2001 1b12 05                         FCB     AM_EXTENDED     ; F7
2002 1b13 05                         FCB     AM_EXTENDED     ; F8
2003 1b14 05                         FCB     AM_EXTENDED     ; F9
2004 1b15 05                         FCB     AM_EXTENDED     ; FA
2005 1b16 05                         FCB     AM_EXTENDED     ; FB
2006 1b17 05                         FCB     AM_EXTENDED     ; FC
2007 1b18 05                         FCB     AM_EXTENDED     ; FD
2008 1b19 05                         FCB     AM_EXTENDED     ; FE
2009 1b1a 05                         FCB     AM_EXTENDED     ; FF
2010                         
2011                         ; Special table for page 2 instructions prefixed by $10.
2012                         ; Format: opcode (less 10), instruction, addressing mode
2013                         
2014                         PAGE2
2015 1b1b 21 4a 07                   FCB     $21,OP_LBRN,AM_RELATIVE16
2016 1b1e 22 42 07                   FCB     $22,OP_LBHI,AM_RELATIVE16
2017 1b21 23 44 07                   FCB     $23,OP_LBLS,AM_RELATIVE16
2018 1b24 24 3d 07                   FCB     $24,OP_LBCC,AM_RELATIVE16
2019 1b27 25 3e 07                   FCB     $25,OP_LBCS,AM_RELATIVE16
2020 1b2a 26 47 07                   FCB     $26,OP_LBNE,AM_RELATIVE16
2021 1b2d 27 3f 07                   FCB     $27,OP_LBEQ,AM_RELATIVE16
2022 1b30 28 4c 07                   FCB     $28,OP_LBVC,AM_RELATIVE16
2023 1b33 29 4d 07                   FCB     $29,OP_LBVS,AM_RELATIVE16
2024 1b36 2a 48 07                   FCB     $2A,OP_LBPL,AM_RELATIVE16
2025 1b39 2b 46 07                   FCB     $2B,OP_LBMI,AM_RELATIVE16
2026 1b3c 2c 40 07                   FCB     $2C,OP_LBGE,AM_RELATIVE16
2027 1b3f 2d 45 07                   FCB     $2D,OP_LBLT,AM_RELATIVE16
2028 1b42 2e 41 07                   FCB     $2E,OP_LBGT,AM_RELATIVE16
2029 1b45 2f 43 07                   FCB     $2F,OP_LBLE,AM_RELATIVE16
2030 1b48 3f 7e 01                   FCB     $3F,OP_SWI2,AM_INHERENT
2031 1b4b 83 28 03                   FCB     $83,OP_CMPD,AM_IMMEDIATE16
2032 1b4e 8c 2c 03                   FCB     $8C,OP_CMPY,AM_IMMEDIATE16
2033 1b51 8e 54 03                   FCB     $8E,OP_LDY,AM_IMMEDIATE16
2034 1b54 93 28 04                   FCB     $93,OP_CMPD,AM_DIRECT
2035 1b57 9c 2c 04                   FCB     $9C,OP_CMPY,AM_DIRECT
2036 1b5a 9e 54 04                   FCB     $9E,OP_LDY,AM_DIRECT
2037 1b5d 9d 79 04                   FCB     $9D,OP_STY,AM_DIRECT
2038 1b60 a3 28 08                   FCB     $A3,OP_CMPD,AM_INDEXED
2039 1b63 ac 2c 08                   FCB     $AC,OP_CMPY,AM_INDEXED
2040 1b66 ae 54 08                   FCB     $AE,OP_LDY,AM_INDEXED
2041 1b69 af 79 08                   FCB     $AF,OP_STY,AM_INDEXED
2042 1b6c b3 28 05                   FCB     $B3,OP_CMPD,AM_EXTENDED
2043 1b6f bc 2c 05                   FCB     $BC,OP_CMPY,AM_EXTENDED
2044 1b72 be 54 05                   FCB     $BE,OP_LDY,AM_EXTENDED
2045 1b75 bf 79 05                   FCB     $BF,OP_STY,AM_EXTENDED
2046 1b78 ce 51 03                   FCB     $CE,OP_LDS,AM_IMMEDIATE16
2047 1b7b de 51 04                   FCB     $DE,OP_LDS,AM_DIRECT
2048 1b7e dd 76 04                   FCB     $DD,OP_STS,AM_DIRECT
2049 1b81 ee 51 08                   FCB     $EE,OP_LDS,AM_INDEXED
2050 1b84 ef 76 08                   FCB     $EF,OP_STS,AM_INDEXED
2051 1b87 fe 51 05                   FCB     $FE,OP_LDS,AM_EXTENDED
2052 1b8a ff 76 05                   FCB     $FF,OP_STS,AM_EXTENDED
2053 1b8d 00                         FCB     0                             ; indicates end of table
2054                         
2055                         ; Special table for page 3 instructions prefixed by $11.
2056                         ; Same format as table above.
2057                         
2058                         PAGE3
2059 1b8e 3f 7f 01                   FCB     $3F,OP_SWI3,AM_INHERENT
2060 1b91 83 2a 03                   FCB     $83,OP_CMPU,AM_IMMEDIATE16
2061 1b94 8c 29 03                   FCB     $8C,OP_CMPS,AM_IMMEDIATE16
2062 1b97 93 2a 04                   FCB     $93,OP_CMPU,AM_DIRECT
2063 1b9a 9c 29 04                   FCB     $9C,OP_CMPS,AM_DIRECT
2064 1b9d a3 2a 08                   FCB     $A3,OP_CMPU,AM_INDEXED
2065 1ba0 ac 29 08                   FCB     $AC,OP_CMPS,AM_INDEXED
2066 1ba3 b3 2a 05                   FCB     $B3,OP_CMPU,AM_EXTENDED
2067 1ba6 bc 29 05                   FCB     $BC,OP_CMPS,AM_EXTENDED
2068 1ba9 00                         FCB     0                             ; indicates end of table
2069                         
2070                         ; Display strings. Should be terminated in EOT character.
2071                         
2072 1baa 3b 20 49 4e 56 41  MSG1    FCC     "; INVALID"
     4c 49 44
2073 1bb3 04                         FCB     EOT
2074                         
2075 1bb4 50 52 45 53 53 20  MSG2    FCC     "PRESS <SPACE> TO CONTINUE, <Q> TO QUIT "
     3c 53 50 41 43 45
     3e 20 54 4f 20 43
     4f 4e 54 49 4e 55
     45 2c 20 3c 51 3e
     20 54 4f 20 51 55
     49 54 20
2076 1bdb 04                         FCB     EOT
2077                         
2078 1bdc 50 43 52           MSG3    FCC     "PCR"
2079 1bdf 04                         FCB     EOT
