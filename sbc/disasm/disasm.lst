0001                         ;
0002                         ; 6809 Disassembler
0003                         ;
0004                         ; Copyright (C) 2019 by Jeff Tranter <tranter@pobox.com>
0005                         ;
0006                         ; Licensed under the Apache License, Version 2.0 (the "License");
0007                         ; you may not use this file except in compliance with the License.
0008                         ; You may obtain a copy of the License at
0009                         ;
0010                         ;   http://www.apache.org/licenses/LICENSE-2.0
0011                         ;
0012                         ; Unless required by applicable law or agreed to in writing, software
0013                         ; distributed under the License is distributed on an "AS IS" BASIS,
0014                         ; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0015                         ; See the License for the specific language governing permissions and
0016                         ; limitations under the License.
0017                         ;
0018                         ; Revision History
0019                         ; Version Date         Comments
0020                         ; 0.0     29-Jan-2019  First version started, based on 6502 code.
0021                         ; 0.1     03-Feb-2019  All instructions now supported.
0022                         ;
0023                         ; To Do:
0024                         ; - Other TODOs in code
0025                         ; - Try putting in ASSIST09 ROM
0026                         ; - Add option to suppress data bytes in output (for feeding back into assembler)
0027                         ; - Add option to show invalid opcodes as constants
0028                         ; - Some unwanted spaces in output due to use of ASSIST09 routines
0029                         
0030                         ; Character defines
0031                         
0032 0004                    EOT     EQU     $04             ; String terminator
0033 000a                    LF      EQU     $0A             ; Line feed
0034 000d                    CR      EQU     $0D             ; Carriage return
0035 0020                    SP      EQU     $20             ; Space
0036                         
0037 0018                    PAGELEN EQU     24              ; Number of instructions to show before waiting for keypress
0038                         
0039                         ; ASSIST09 SWI call numbers
0040                         
0041 0000                    INCHNP  EQU     0               ; INPUT CHAR IN A REG - NO PARITY
0042 0001                    OUTCH   EQU     1               ; OUTPUT CHAR FROM A REG
0043 0002                    PDATA1  EQU     2               ; OUTPUT STRING
0044 0003                    PDATA   EQU     3               ; OUTPUT CR/LF THEN STRING
0045 0004                    OUT2HS  EQU     4               ; OUTPUT TWO HEX AND SPACE
0046 0005                    OUT4HS  EQU     5               ; OUTPUT FOUR HEX AND SPACE
0047 0006                    PCRLF   EQU     6               ; OUTPUT CR/LF
0048 0007                    SPACE   EQU     7               ; OUTPUT A SPACE
0049 0008                    MONITR  EQU     8               ; ENTER ASSIST09 MONITOR
0050 0009                    VCTRSW  EQU     9               ; VECTOR EXAMINE/SWITCH
0051 000a                    BRKPT   EQU     10              ; USER PROGRAM BREAKPOINT
0052 000b                    PAUSE   EQU     11              ; TASK PAUSE FUNCTION
0053                         
0054 002c                    .CMDL2  EQU     44              ; Secondary command list subcommand
0055                         
0056                         ; ASSIST09 Monitor Addresses
0057                         
0058 6093                    PCNTER  EQU     $6093           ; Stores last PC value
0059 fe60                    CDNUM   EQU     $FE60           ; Get number on command line. Note: Only valid for my ROM version
0060                         
0061                         ; Start address
0062 1000                            ORG     $1000
0063 1000 20 0d                      BRA     START           ; So start address stays constant
0064                         
0065                         ; Variables
0066                         
0067 1002                    ADDR    RMB     2               ; Current address to disassemble
0068 1004                    OPCODE  RMB     1               ; Opcode of instruction
0069 1005                    AM      RMB     1               ; Addressing mode of instruction
0070 1006                    OPTYPE  RMB     1               ; Instruction type
0071 1007                    POSTBYT RMB     1               ; Post byte (for indexed addressing)
0072 1008                    LEN     RMB     1               ; Length of instruction
0073 1009                    TEMP    RMB     2               ; Temp variable (used by print routines)
0074 100b                    TEMP1   RMB     2               ; Temp variable
0075 100d                    FIRST   RMB     1               ; Flag used to indicate first time an item printed
0076 100e                    PAGE23  RMB     1               ; Flag indicating page2/3 instruction when non-zero
0077                         
0078                         ; Instructions. Matches indexes into entries in table MNEMONICS.
0079                         
0080 0000                    OP_INV   EQU    $00
0081 0001                    OP_ABX   EQU    $01
0082 0002                    OP_ADCA  EQU    $02
0083 0003                    OP_ADCB  EQU    $03
0084 0004                    OP_ADDA  EQU    $04
0085 0005                    OP_ADDB  EQU    $05
0086 0006                    OP_ADDD  EQU    $06
0087 0007                    OP_ANDA  EQU    $07
0088 0008                    OP_ANDB  EQU    $08
0089 0009                    OP_ANDCC EQU    $09
0090 000a                    OP_ASL   EQU    $0A
0091 000b                    OP_ASLA  EQU    $0B
0092 000c                    OP_ASLB  EQU    $0C
0093 000d                    OP_ASR   EQU    $0D
0094 000e                    OP_ASRA  EQU    $0E
0095 000f                    OP_ASRB  EQU    $0F
0096 0010                    OP_BCC   EQU    $10
0097 0011                    OP_BCS   EQU    $11
0098 0012                    OP_BEQ   EQU    $12
0099 0013                    OP_BGE   EQU    $13
0100 0014                    OP_BGT   EQU    $14
0101 0015                    OP_BHI   EQU    $15
0102 0016                    OP_BHS   EQU    $16
0103 0017                    OP_BITA  EQU    $17
0104 0018                    OP_BITB  EQU    $18
0105 0019                    OP_BLE   EQU    $19
0106 001a                    OP_BLO   EQU    $1A
0107 001b                    OP_BLS   EQU    $1B
0108 001c                    OP_BLT   EQU    $1C
0109 001d                    OP_BMI   EQU    $1D
0110 001e                    OP_BNE   EQU    $1E
0111 001f                    OP_BPL   EQU    $1F
0112 0020                    OP_BRA   EQU    $20
0113 0021                    OP_BRN   EQU    $21
0114 0022                    OP_BSR   EQU    $22
0115 0023                    OP_BVC   EQU    $23
0116 0024                    OP_BVS   EQU    $24
0117 0025                    OP_CLR   EQU    $25
0118 0026                    OP_CLRA  EQU    $26
0119 0027                    OP_CLRB  EQU    $27
0120 0028                    OP_CMPA  EQU    $28
0121 0029                    OP_CMPB  EQU    $29
0122 002a                    OP_CMPD  EQU    $2A
0123 002b                    OP_CMPS  EQU    $2B
0124 002c                    OP_CMPU  EQU    $2C
0125 002d                    OP_CMPX  EQU    $2D
0126 002e                    OP_CMPY  EQU    $2E
0127 002f                    OP_COMA  EQU    $2F
0128 0030                    OP_COMB  EQU    $30
0129 0031                    OP_COM   EQU    $31
0130 0032                    OP_CWAI  EQU    $32
0131 0033                    OP_DAA   EQU    $33
0132 0034                    OP_DEC   EQU    $34
0133 0035                    OP_DECA  EQU    $35
0134 0036                    OP_DECB  EQU    $36
0135 0037                    OP_EORA  EQU    $37
0136 0038                    OP_EORB  EQU    $38
0137 0039                    OP_EXG   EQU    $39
0138 003a                    OP_INC   EQU    $3A
0139 003b                    OP_INCA  EQU    $3B
0140 003c                    OP_INCB  EQU    $3C
0141 003d                    OP_JMP   EQU    $3D
0142 003e                    OP_JSR   EQU    $3E
0143 003f                    OP_LBCC  EQU    $3F
0144 0040                    OP_LBCS  EQU    $40
0145 0041                    OP_LBEQ  EQU    $41
0146 0042                    OP_LBGE  EQU    $42
0147 0043                    OP_LBGT  EQU    $43
0148 0044                    OP_LBHI  EQU    $44
0149 0045                    OP_LBHS  EQU    $45
0150 0046                    OP_LBLE  EQU    $46
0151 0047                    OP_LBLO  EQU    $47
0152 0048                    OP_LBLS  EQU    $48
0153 0049                    OP_LBLT  EQU    $49
0154 004a                    OP_LBMI  EQU    $4A
0155 004b                    OP_LBNE  EQU    $4B
0156 004c                    OP_LBPL  EQU    $4C
0157 004d                    OP_LBRA  EQU    $4D
0158 004e                    OP_LBRN  EQU    $4E
0159 004f                    OP_LBSR  EQU    $4F
0160 0050                    OP_LBVC  EQU    $50
0161 0051                    OP_LBVS  EQU    $51
0162 0052                    OP_LDA   EQU    $52
0163 0053                    OP_LDB   EQU    $53
0164 0054                    OP_LDD   EQU    $54
0165 0055                    OP_LDS   EQU    $55
0166 0056                    OP_LDU   EQU    $56
0167 0057                    OP_LDX   EQU    $57
0168 0058                    OP_LDY   EQU    $58
0169 0059                    OP_LEAS  EQU    $59
0170 005a                    OP_LEAU  EQU    $5A
0171 005b                    OP_LEAX  EQU    $5B
0172 005c                    OP_LEAY  EQU    $5C
0173 005d                    OP_LSL   EQU    $5D
0174 005e                    OP_LSLA  EQU    $5E
0175 005f                    OP_LSLB  EQU    $5F
0176 0060                    OP_LSR   EQU    $60
0177 0061                    OP_LSRA  EQU    $61
0178 0062                    OP_LSRB  EQU    $62
0179 0063                    OP_MUL   EQU    $63
0180 0064                    OP_NEG   EQU    $64
0181 0065                    OP_NEGA  EQU    $65
0182 0066                    OP_NEGB  EQU    $66
0183 0067                    OP_NOP   EQU    $67
0184 0068                    OP_ORA   EQU    $68
0185 0069                    OP_ORB   EQU    $69
0186 006a                    OP_ORCC  EQU    $6A
0187 006b                    OP_PSHS  EQU    $6B
0188 006c                    OP_PSHU  EQU    $6C
0189 006d                    OP_PULS  EQU    $6D
0190 006e                    OP_PULU  EQU    $6E
0191 006f                    OP_ROL   EQU    $6F
0192 0070                    OP_ROLA  EQU    $70
0193 0071                    OP_ROLB  EQU    $71
0194 0072                    OP_ROR   EQU    $72
0195 0073                    OP_RORA  EQU    $73
0196 0074                    OP_RORB  EQU    $74
0197 0075                    OP_RTI   EQU    $75
0198 0076                    OP_RTS   EQU    $76
0199 0077                    OP_SBCA  EQU    $77
0200 0078                    OP_SBCB  EQU    $78
0201 0079                    OP_SEX   EQU    $79
0202 007a                    OP_STA   EQU    $7A
0203 007b                    OP_STB   EQU    $7B
0204 007c                    OP_STD   EQU    $7C
0205 007d                    OP_STS   EQU    $7D
0206 007e                    OP_STU   EQU    $7E
0207 007f                    OP_STX   EQU    $7F
0208 0080                    OP_STY   EQU    $80
0209 0081                    OP_SUBA  EQU    $81
0210 0082                    OP_SUBB  EQU    $82
0211 0083                    OP_SUBD  EQU    $83
0212 0084                    OP_SWI   EQU    $84
0213 0085                    OP_SWI2  EQU    $85
0214 0086                    OP_SWI3  EQU    $86
0215 0087                    OP_SYNC  EQU    $87
0216 0088                    OP_TFR   EQU    $88
0217 0089                    OP_TST   EQU    $89
0218 008a                    OP_TSTA  EQU    $8A
0219 008b                    OP_TSTB  EQU    $8B
0220                         
0221                         ; Addressing Modes. OPCODES table lists these for each instruction.
0222                         ; LENGTHS lists the instruction length for each addressing mode.
0223                         ; Need to distinguish relative modes that are 2 and 3 (long) bytes.
0224                         ; Some immediate are 2 and some 3 bytes.
0225                         ; Indexed modes can be longer depending on postbyte.
0226                         ; Page 2 and 3 opcodes are one byte longer (prefixed by 10 or 11)
0227                         
0228 0000                    AM_INVALID      EQU     0       ; $01 (1)
0229 0001                    AM_INHERENT     EQU     1       ; RTS (1)
0230 0002                    AM_IMMEDIATE8   EQU     2       ; LDA #$12 (2)
0231 0003                    AM_IMMEDIATE16  EQU     3       ; LDD #$1234 (3)
0232 0004                    AM_DIRECT       EQU     4       ; LDA $12 (2)
0233 0005                    AM_EXTENDED     EQU     5       ; LDA $1234 (3)
0234 0006                    AM_RELATIVE8    EQU     6       ; BSR $1234 (2)
0235 0007                    AM_RELATIVE16   EQU     7       ; LBSR $1234 (3)
0236 0008                    AM_INDEXED      EQU     8       ; LDA 0,X (2+)
0237                         
0238                         ; *** CODE ***
0239                         
0240                         ; Install custom command in ASSIST09 using secondary command list.
0241                         ; Adds a U (Unassemble) command, then returns to monitor.
0242                         
0243 100f 30 8d 00 05        START:  LEAX    MYCMDL,PCR      ; Load new handler address
0244 1013 86 2c                      LDA     #.CMDL2         ; Load subcode for vector swap
0245 1015 3f                         SWI                     ; Request service
0246 1016 09                         FCB    VCTRSW           ; Service code byte
0247 1017 39                         RTS                     ; Return to monitor
0248                         
0249                         MYCMDL:
0250 1018 04                         FCB     4               ; Table entry length
0251 1019 55                         FCC     'U'             ; Command name
0252 101a 00 03                      FDB     MAIN-*          ; Pointer to command (relative to here)
0253 101c fe                         FCB     $FE             ; -2 indicates end of table
0254                         
0255                         ; Main program. Disassembles a page at a time. Can be run directly or
0256                         ; as an ASSIST09 monitor external command. Gets start address from
0257                         ; comand line.
0258                         
0259 101d 17 ee 40           MAIN:   LBSR    CDNUM           ; Parse command line, return 16-bit number in D
0260 1020 fd 10 02                   STD     ADDR            ; Store it
0261 1023 86 18              PAGE:   LDA     #PAGELEN        ; Number of instruction to disassemble per page
0262 1025 34 02              DIS:    PSHS    A               ; Save A
0263 1027 17 00 97                   LBSR    DISASM          ; Do disassembly of one instruction
0264 102a 35 02                      PULS    A               ; Restore A
0265 102c 4a                         DECA                    ; Decrement count
0266 102d 26 f6                      BNE     DIS             ; Go back and repeat until a page has been done
0267 102f 30 8d 0b a8                LEAX    MSG2,PCR        ; Display message to press a key
0268 1033 17 00 84                   LBSR    PrintString
0269 1036 8d 63              BADKEY: BSR     GetChar         ; Wait for keyboard input
0270 1038 8d 11                      BSR     PrintCR
0271 103a 81 20                      CMPA    #SP             ; Space key pressed?
0272 103c 27 e5                      BEQ     PAGE            ; If so, display next page
0273 103e 81 51                      CMPA    #'Q             ; Q key pressed?
0274 1040 27 08                      BEQ     RETN            ; If so, return
0275 1042 81 71                      CMPA    #'q             ; q key pressed?
0276 1044 27 04                      BEQ     RETN            ; If so, return
0277 1046 8d 72                      BSR     PrintString     ; Bad key, prompt and try again
0278 1048 20 ec                      BRA     BADKEY
0279 104a 39                 RETN:   RTS                     ; Return to caller
0280                         
0281                         ; *** Utility Functions ***
0282                         ; Some of these call ASSIST09 ROM monitor routines.
0283                         
0284                         ; Print CR/LF to the console.
0285                         ; Registers changed: none
0286                         PrintCR:
0287 104b 34 02                      PSHS    A               ; Save A
0288 104d 86 0d                      LDA     #CR
0289 104f 8d 47                      BSR     PrintChar
0290 1051 86 0a                      LDA     #LF
0291 1053 8d 43                      BSR     PrintChar
0292 1055 35 02                      PULS    A               ; Restore A
0293 1057 39                         RTS
0294                         
0295                         ; Print dollar sign to the console.
0296                         ; Registers changed: none
0297                         PrintDollar:
0298 1058 34 02                      PSHS    A               ; Save A
0299 105a 86 24                      LDA     #'$
0300 105c 8d 3a                      BSR     PrintChar
0301 105e 35 02                      PULS    A               ; Restore A
0302 1060 39                         RTS
0303                         
0304                         ; Print comma to the console.
0305                         ; Registers changed: none
0306                         PrintComma:
0307 1061 34 02                      PSHS    A               ; Save A
0308 1063 86 2c                      LDA     #',
0309 1065 8d 31                      BSR     PrintChar
0310 1067 35 02                      PULS    A               ; Restore A
0311 1069 39                         RTS
0312                         
0313                         ; Print left square bracket to the console.
0314                         ; Registers changed: none
0315                         PrintLBracket:
0316 106a 34 02                      PSHS    A               ; Save A
0317 106c 86 5b                      LDA     #'[
0318 106e 8d 28                      BSR     PrintChar
0319 1070 35 02                      PULS    A               ; Restore A
0320 1072 39                         RTS
0321                         
0322                         ; Print right square bracket to the console.
0323                         ; Registers changed: none
0324                         PrintRBracket:
0325 1073 34 02                      PSHS    A               ; Save A
0326 1075 86 5d                      LDA     #']
0327 1077 8d 1f                      BSR     PrintChar
0328 1079 35 02                      PULS    A               ; Restore A
0329 107b 39                         RTS
0330                         
0331                         ; Print space sign to the console.
0332                         ; Registers changed: none
0333                         PrintSpace:
0334 107c 3f                         SWI
0335 107d 07                         FCB     SPACE
0336 107e 39                         RTS
0337                         
0338                         ; Print two spaces to the console.
0339                         ; Registers changed: none
0340                         Print2Spaces:
0341 107f 34 02                      PSHS    A               ; Save A
0342 1081 86 20                      LDA     #SP
0343 1083 8d 13                      BSR     PrintChar
0344 1085 8d 11                      BSR     PrintChar
0345 1087 35 02                      PULS    A               ; Restore A
0346 1089 39                         RTS
0347                         
0348                         ; Print several space characters.
0349                         ; A contains number of spaces to print.
0350                         ; Registers changed: none
0351                         PrintSpaces:
0352 108a 34 02                      PSHS    A               ; Save registers used
0353 108c 81 00              PS1:    CMPA    #0              ; Is count zero?
0354 108e 27 05                      BEQ     PS2             ; Is so, done
0355 1090 8d ea                      BSR     PrintSpace      ; Print a space
0356 1092 4a                         DECA                    ; Decrement count
0357 1093 20 f7                      BRA     PS1             ; Check again
0358 1095 35 02              PS2:    PULS    A               ; Restore registers used
0359 1097 39                         RTS
0360                         
0361                         ; Print character to the console
0362                         ; A contains character to print.
0363                         ; Registers changed: none
0364                         PrintChar:
0365 1098 3f                         SWI                     ; Call ASSIST09 monitor function
0366 1099 01                         FCB     OUTCH           ; Service code byte
0367 109a 39                         RTS
0368                         
0369                         ; Get character from the console
0370                         ; A contains character read. Blocks until key pressed. Character is
0371                         ; echoed. Ignores NULL ($00) and RUBOUT ($7F). CR ($OD) is converted
0372                         ; to LF ($0A).
0373                         ; Registers changed: none (flags may change). Returns char in A.
0374                         GetChar:
0375 109b 3f                         SWI                     ; Call ASSIST09 monitor function
0376 109c 00                         FCB     INCHNP          ; Service code byte
0377 109d 39                         RTS
0378                         
0379                         ; Print a byte as two hex digits followed by a space.
0380                         ; A contains byte to print.
0381                         ; Registers changed: none
0382                         PrintByte:
0383 109e 34 16                      PSHS    A,B,X           ; Save registers used
0384 10a0 b7 10 09                   STA     TEMP            ; Needs to be in memory so we can point to it
0385 10a3 30 8d ff 62                LEAX    TEMP,PCR        ; Get pointer to it
0386 10a7 3f                         SWI                     ; Call ASSIST09 monitor function
0387 10a8 04                         FCB     OUT2HS          ; Service code byte
0388 10a9 35 16                      PULS    X,B,A           ; Restore registers used
0389 10ab 39                         RTS
0390                         
0391                         ; Print a word as four hex digits followed by a space.
0392                         ; X contains word to print.
0393                         ; Registers changed: none
0394                         PrintAddress:
0395 10ac 34 16                      PSHS    A,B,X           ; Save registers used
0396 10ae bf 10 09                   STX     TEMP            ; Needs to be in memory so we can point to it
0397 10b1 30 8d ff 54                LEAX    TEMP,PCR        ; Get pointer to it
0398 10b5 3f                         SWI                     ; Call ASSIST09 monitor function
0399 10b6 05                         FCB     OUT4HS          ; Service code byte
0400 10b7 35 16                      PULS    X,B,A           ; Restore registers used
0401 10b9 39                         RTS
0402                         
0403                         ; Print a string.
0404                         ; X points to start of string to display.
0405                         ; String must be terminated in EOT character.
0406                         ; Registers changed: none
0407                         PrintString:
0408 10ba 34 10                      PSHS    X               ; Save registers used
0409 10bc 3f                         SWI                     ; Call ASSIST09 monitor function
0410 10bd 02                         FCB     PDATA1          ; Service code byte
0411 10be 35 10                      PULS    X               ; Restore registers used
0412 10c0 39                         RTS
0413                         
0414                         ; Disassemble instruction at address ADDR. On return, ADDR points to
0415                         ; next instruction so it can be called again.
0416                         
0417 10c1 7f 10 0e           DISASM: CLR     PAGE23          ; Clear page2/3 flag
0418 10c4 ae 8d ff 3a                LDX     ADDR,PCR        ; Get address of instruction
0419 10c8 e6 84                      LDB     ,X              ; Get instruction op code
0420 10ca c1 10                      CMPB    #$10            ; Is it a page 2 16-bit opcode prefix with 10?
0421 10cc 27 07                      BEQ     handle10        ; If so, do special handling
0422 10ce c1 11                      CMPB    #$11            ; Is it a page 3 16-bit opcode prefix with 11?
0423 10d0 27 53                      BEQ     handle11        ; If so, do special handling
0424 10d2 16 00 a1                   LBRA    not1011         ; If not, handle as normal case
0425                         
0426                         handle10:                       ; Handle page 2 instruction
0427 10d5 86 01                      LDA     #1              ; Set page2/3 flag
0428 10d7 b7 10 0e                   STA     PAGE23
0429 10da e6 01                      LDB     1,X             ; Get real opcode
0430 10dc f7 10 04                   STB     OPCODE          ; Save it.
0431 10df 30 8d 0a 5f                LEAX    PAGE2,PCR       ; Pointer to start of table
0432 10e3 4f                         CLRA                    ; Set index into table to zero
0433                         search10:
0434 10e4 e1 86                      CMPB    A,X             ; Check for match of opcode in table
0435 10e6 27 1f                      BEQ     found10         ; Branch if found
0436 10e8 8b 03                      ADDA    #3              ; Advance to next entry in table (entries are 3 bytes long)
0437 10ea 6d 86                      TST     A,X             ; Check entry
0438 10ec 27 02                      BEQ     notfound10      ; If zero, then reached end of table
0439 10ee 20 f4                      BRA     search10        ; If not, keep looking
0440                         
0441                         notfound10:                     ; Instruction not found, so is invalid.
0442 10f0 86 10                      LDA     #$10            ; Set opcode to 10
0443 10f2 b7 10 04                   STA     OPCODE
0444 10f5 86 00                      LDA     #OP_INV         ; Set as instruction type invalid
0445 10f7 b7 10 06                   STA     OPTYPE
0446 10fa 86 00                      LDA     #AM_INVALID     ; Set as addressing mode invalid
0447 10fc b7 10 05                   STA     AM
0448 10ff 86 01                      LDA     #1              ; Set length to one
0449 1101 b7 10 08                   STA     LEN
0450 1104 16 00 91                   LBRA    dism            ; Disassemble as normal
0451                         
0452                         found10:                        ; Found entry in table
0453 1107 8b 01                      ADDA    #1              ; Advance to instruction type entry in table
0454 1109 e6 86                      LDB     A,X             ; Get instruction type
0455 110b f7 10 06                   STB     OPTYPE          ; Save it
0456 110e 8b 01                      ADDA    #1              ; Advanced to address mode entry in table
0457 1110 e6 86                      LDB     A,X             ; Get address mode
0458 1112 f7 10 05                   STB     AM              ; Save it
0459 1115 4f                         CLRA                    ; Clear MSB of D, addressing mode is now in A:B (D)
0460 1116 1f 01                      TFR     D,X             ; Put addressing mode in X
0461 1118 e6 89 19 15                LDB     LENGTHS,X       ; Get instruction length from table
0462 111c f7 10 08                   STB     LEN             ; Store it
0463 111f 7c 10 08                   INC     LEN             ; Add one because it is a two byte op code
0464 1122 16 00 73                   LBRA    dism            ; Continue normal disassembly processing.
0465                         
0466                         handle11:                       ; Same logic as above, but use table for page 3 opcodes.
0467 1125 86 01                      LDA     #1              ; Set page2/3 flag
0468 1127 b7 10 0e                   STA     PAGE23
0469 112a e6 01                      LDB     1,X             ; Get real opcode
0470 112c f7 10 04                   STB     OPCODE          ; Save it.
0471 112f 30 8d 0a 82                LEAX    PAGE3,PCR       ; Pointer to start of table
0472 1133 4f                         CLRA                    ; Set index into table to zero
0473                         search11:
0474 1134 e1 86                      CMPB    A,X             ; Check for match of opcode in table
0475 1136 27 1f                      BEQ     found11         ; Branch if found
0476 1138 8b 03                      ADDA    #3              ; Advance to next entry in table (entries are 3 bytes long)
0477 113a 6d 86                      TST     A,X             ; Check entry
0478 113c 27 02                      BEQ     notfound11      ; If zero, then reached end of table
0479 113e 20 f4                      BRA     search11        ; If not, keep looking
0480                         
0481                         notfound11:                     ; Instruction not found, so is invalid.
0482 1140 86 11                      LDA     #$11            ; Set opcode to 10
0483 1142 b7 10 04                   STA     OPCODE
0484 1145 86 00                      LDA     #OP_INV         ; Set as instruction type invalid
0485 1147 b7 10 06                   STA     OPTYPE
0486 114a 86 00                      LDA     #AM_INVALID     ; Set as addressing mode invalid
0487 114c b7 10 05                   STA     AM
0488 114f 86 01                      LDA     #1              ; Set length to one
0489 1151 b7 10 08                   STA     LEN
0490 1154 16 00 41                   LBRA    dism            ; Disassemble as normal
0491                         
0492                         found11:                        ; Found entry in table
0493 1157 8b 01                      ADDA    #1              ; Advance to instruction type entry in table
0494 1159 e6 86                      LDB     A,X             ; Get instruction type
0495 115b f7 10 06                   STB     OPTYPE          ; Save it
0496 115e 8b 01                      ADDA    #1              ; Advanced to address mode entry in table
0497 1160 e6 86                      LDB     A,X             ; Get address mode
0498 1162 f7 10 05                   STB     AM              ; Save it
0499 1165 4f                         CLRA                    ; Clear MSB of D, addressing mode is now in A:B (D)
0500 1166 1f 01                      TFR     D,X             ; Put addressing mode in X
0501 1168 e6 89 19 15                LDB     LENGTHS,X       ; Get instruction length from table
0502 116c f7 10 08                   STB     LEN             ; Store it
0503 116f 7c 10 08                   INC     LEN             ; Add one because it is a two byte op code
0504 1172 16 00 23                   LBRA    dism            ; Continue normal disassembly processing.
0505 1175 39                         RTS
0506                         
0507                         not1011:
0508 1176 f7 10 04                   STB     OPCODE          ; Save the op code
0509 1179 4f                         CLRA                    ; Clear MSB of D
0510 117a 1f 01                      TFR     D,X             ; Put op code in X
0511 117c e6 89 19 42                LDB     OPCODES,X       ; Get opcode type from table
0512 1180 f7 10 06                   STB     OPTYPE          ; Store it
0513 1183 f6 10 04                   LDB     OPCODE          ; Get op code again
0514 1186 1f 01                      TFR     D,X             ; Put opcode in X
0515 1188 e6 89 1a 42                LDB     MODES,X         ; Get addressing mode type from table
0516 118c f7 10 05                   STB     AM              ; Store it
0517 118f 1f 01                      TFR     D,X             ; Put addressing mode in X
0518 1191 e6 89 19 15                LDB     LENGTHS,X       ; Get instruction length from table
0519 1195 f7 10 08                   STB     LEN             ; Store it
0520                         
0521                         ; If addressing mode is indexed, get and save the indexed addressing
0522                         ; post byte.
0523                         
0524 1198 b6 10 05           dism:   LDA     AM              ; Get addressing mode
0525 119b 81 08                      CMPA    #AM_INDEXED     ; Is it indexed mode?
0526 119d 26 22                      BNE     NotIndexed      ; Branch if not
0527 119f ae 8d fe 5f                LDX     ADDR,PCR        ; Get address of op code
0528                                                         ; If it is a page2/3 instruction, op code is the next byte after ADDR
0529 11a3 7d 10 0e                   TST     PAGE23          ; Page2/3 instruction?
0530 11a6 27 04                      BEQ     norm            ; Branch of not
0531 11a8 a6 02                      LDA     2,X             ; Post byte is two past ADDR
0532 11aa 20 02                      BRA     getpb
0533 11ac a6 01              norm:   LDA     1,X             ; Get next byte (the post byte)
0534 11ae b7 10 07           getpb:  STA     POSTBYT         ; Save it
0535                         
0536                         ; Determine number of additional bytes for indexed addressing based on
0537                         ; postbyte. If most significant bit is 0, there are no additional
0538                         ; bytes and we can skip the rest of the check.
0539                         
0540 11b1 2a 0e                      BPL     NotIndexed      ; Branch of MSB is zero
0541                         
0542                         ; Else if most significant bit is 1, mask off all but low order 5 bits
0543                         ; and look up length in table.
0544                         
0545 11b3 84 1f                      ANDA    #%00011111      ; Mask off bits
0546 11b5 30 8d 07 69                LEAX    POSTBYTES,PCR   ; Lookup table of lengths
0547 11b9 a6 86                      LDA     A,X             ; Get table entry
0548 11bb bb 10 08                   ADDA    LEN             ; Add to instruction length
0549 11be b7 10 08                   STA     LEN             ; Save new length
0550                         
0551                         NotIndexed:
0552                         
0553                         ; Print address followed by a space
0554 11c1 ae 8d fe 3d                LDX     ADDR,PCR
0555 11c5 17 fe e4                   LBSR    PrintAddress
0556                         
0557                         ; Print one more space
0558                         
0559 11c8 17 fe b1                   LBSR    PrintSpace
0560                         
0561                         ; Print the op code bytes based on the instruction length
0562                         
0563 11cb f6 10 08                   LDB     LEN             ; Number of bytes in instruction
0564 11ce ae 8d fe 30                LDX     ADDR,PCR        ; Pointer to start of instruction
0565 11d2 a6 80              opby:   LDA     ,X+             ; Get instruction byte and increment pointer
0566 11d4 17 fe c7                   LBSR    PrintByte       ; Print it, followed by a space
0567 11d7 5a                         DECB                    ; Decrement byte count
0568 11d8 26 f8                      BNE     opby            ; Repeat until done
0569                         
0570                         ; Print needed remaining spaces to pad out to correct column
0571                         
0572 11da 30 8d 07 40                LEAX    PADDING,PCR     ; Pointer to start of lookup table
0573 11de b6 10 08                   LDA     LEN             ; Number of bytes in instruction
0574 11e1 4a                         DECA                    ; Subtract 1 since table starts at 1, not 0
0575 11e2 a6 86                      LDA     A,X             ; Get number of spaces to print
0576 11e4 17 fe a3                   LBSR    PrintSpaces
0577                         
0578                         ; If a page2/3 instruction, advance ADDR to the next byte which points
0579                         ; to the real op code.
0580                         
0581 11e7 7d 10 0e                   TST     PAGE23          ; Flag set
0582 11ea 27 09                      BEQ     noinc           ; Branch if not
0583 11ec fc 10 02                   LDD     ADDR            ; Increment 16-bit address
0584 11ef c3 00 01                   ADDD    #1
0585 11f2 fd 10 02                   STD     ADDR
0586                         
0587                         ; Get and print mnemonic (4 chars)
0588                         
0589 11f5 f6 10 06           noinc   LDB     OPTYPE          ; Get instruction type to index into table
0590 11f8 4f                         CLRA                    ; Clear MSB of D
0591 11f9 58                         ASLB                    ; 16-bit shift of D: Rotate B, MSB into Carry
0592 11fa 49                         ROLA                    ; Rotate A, Carry into LSB
0593 11fb 58                         ASLB                    ; Do it twice to multiple by four
0594 11fc 49                         ROLA                    ;
0595 11fd 30 8d 04 e4                LEAX    MNEMONICS,PCR   ; Pointer to start of table
0596 1201 b7 10 0b                   STA     TEMP1           ; Save value of A
0597 1204 a6 8b                      LDA     D,X             ; Get first char of mnemonic
0598 1206 17 fe 8f                   LBSR    PrintChar       ; Print it
0599 1209 b6 10 0b                   LDA     TEMP1           ; Restore value of A
0600 120c 5c                         INCB                    ; Advance pointer
0601 120d a6 8b                      LDA     D,X             ; Get second char of mnemonic
0602 120f 17 fe 86                   LBSR    PrintChar       ; Print it
0603 1212 b6 10 0b                   LDA     TEMP1           ; Restore value of A
0604 1215 5c                         INCB                    ; Advance pointer
0605 1216 a6 8b                      LDA     D,X             ; Get third char of mnemonic
0606 1218 17 fe 7d                   LBSR    PrintChar       ; Print it
0607 121b b6 10 0b                   LDA     TEMP1           ; Restore value of A
0608 121e 5c                         INCB                    ; Advance pointer
0609 121f a6 8b                      LDA     D,X             ; Get fourth char of mnemonic
0610 1221 17 fe 74                   LBSR    PrintChar       ; Print it
0611                         
0612                         ; Display any operands based on addressing mode and call appropriate
0613                         ; routine. TODO: Could use a lookup table for this.
0614                         
0615 1224 b6 10 05                   LDA     AM              ; Get addressing mode
0616 1227 81 00                      CMPA    #AM_INVALID
0617 1229 27 2e                      BEQ     DO_INVALID
0618 122b 81 01                      CMPA    #AM_INHERENT
0619 122d 27 39                      BEQ     DO_INHERENT
0620 122f 81 02                      CMPA    #AM_IMMEDIATE8
0621 1231 27 38                      BEQ     DO_IMMEDIATE8
0622 1233 81 03                      CMPA    #AM_IMMEDIATE16
0623 1235 10 27 01 af                LBEQ    DO_IMMEDIATE16
0624 1239 81 04                      CMPA    #AM_DIRECT
0625 123b 10 27 01 c4                LBEQ    DO_DIRECT
0626 123f 81 05                      CMPA    #AM_EXTENDED
0627 1241 10 27 01 d0                LBEQ    DO_EXTENDED
0628 1245 81 06                      CMPA    #AM_RELATIVE8
0629 1247 10 27 01 e0                LBEQ    DO_RELATIVE8
0630 124b 81 07                      CMPA    #AM_RELATIVE16
0631 124d 10 27 01 f5                LBEQ    DO_RELATIVE16
0632 1251 81 08                      CMPA    #AM_INDEXED
0633 1253 10 27 02 09                LBEQ    DO_INDEXED
0634 1257 20 00                      BRA     DO_INVALID      ; Should never be reached
0635                         
0636                         DO_INVALID:                     ; Display "   ; INVALID"
0637 1259 86 0f                      LDA     #15             ; Want 15 spaces
0638 125b 17 fe 2c                   LBSR    PrintSpaces
0639 125e 30 8d 09 6f                LEAX    MSG1,PCR
0640 1262 17 fe 55                   LBSR    PrintString
0641 1265 16 04 67                   LBRA    done
0642                         
0643                         DO_INHERENT:                    ; Nothing else to do
0644 1268 16 04 64                   LBRA    done
0645                         
0646                         DO_IMMEDIATE8:
0647 126b b6 10 06                   LDA     OPTYPE          ; Get opcode type
0648 126e 81 88                      CMPA    #OP_TFR         ; Is is TFR?
0649 1270 27 33                      BEQ     XFREXG          ; Handle special case of TFR
0650 1272 81 39                      CMPA    #OP_EXG         ; Is is EXG?
0651 1274 27 2f                      BEQ     XFREXG          ; Handle special case of EXG
0652                         
0653 1276 81 6d                      CMPA    #OP_PULS        ; Is is PULS?
0654 1278 10 27 00 ad                LBEQ    PULPSH
0655 127c 81 6e                      CMPA    #OP_PULU        ; Is is PULU?
0656 127e 10 27 00 a7                LBEQ    PULPSH
0657 1282 81 6b                      CMPA    #OP_PSHS        ; Is is PSHS?
0658 1284 10 27 00 a1                LBEQ    PULPSH
0659 1288 81 6c                      CMPA    #OP_PSHU        ; Is is PSHU?
0660 128a 10 27 00 9b                LBEQ    PULPSH
0661                         
0662                                                         ; Display "  #$nn"
0663 128e 17 fd ee                   LBSR    Print2Spaces    ; Two spaces
0664 1291 86 23                      LDA     #'#             ; Number sign
0665 1293 17 fe 02                   LBSR    PrintChar
0666 1296 17 fd bf                   LBSR    PrintDollar     ; Dollar sign
0667 1299 ae 8d fd 65                LDX     ADDR,PCR        ; Get address of op code
0668 129d a6 01                      LDA     1,X             ; Get next byte (immediate data)
0669 129f 17 fd fc                   LBSR    PrintByte       ; Print as hex value
0670 12a2 16 04 2a                   LBRA    done
0671                         
0672                         XFREXG:                         ; Handle special case of TFR and EXG
0673                                                         ; Display "  r1,r2"
0674 12a5 17 fd d7                   LBSR    Print2Spaces    ; Two spaces
0675 12a8 ae 8d fd 56                LDX     ADDR,PCR        ; Get address of op code
0676 12ac a6 01                      LDA     1,X             ; Get next byte (postbyte)
0677 12ae 84 f0                      ANDA    #%11110000      ; Mask out source register bits
0678 12b0 44                         LSRA                    ; Shift into low order bits
0679 12b1 44                         LSRA
0680 12b2 44                         LSRA
0681 12b3 44                         LSRA
0682 12b4 8d 0e                      BSR     TFREXGRegister  ; Print source register name
0683 12b6 86 2c                      LDA     #',             ; Print comma
0684 12b8 17 fd dd                   LBSR    PrintChar
0685 12bb a6 01                      LDA     1,X             ; Get postbyte again
0686 12bd 84 0f                      ANDA    #%00001111      ; Mask out destination register bits
0687 12bf 8d 03                      BSR     TFREXGRegister  ; Print destination register name
0688 12c1 16 04 0b                   LBRA    done
0689                         
0690                         ; Look up register name (in A) from Transfer/Exchange postbyte. 4 LSB
0691                         ; bits determine the register name. Value is printed. Invalid value
0692                         ; is shown as '?'.
0693                         ; Value:    0 1 2 3 4 5  8 9 10 11
0694                         ; Register: D X Y U S PC A B CC DP
0695                         
0696                         TFREXGRegister:
0697 12c4 81 00                      CMPA    #0
0698 12c6 26 04                      BNE     Try1
0699 12c8 86 44                      LDA     #'D
0700 12ca 20 50                      BRA     Print1Reg
0701 12cc 81 01              Try1:   CMPA    #1
0702 12ce 26 04                      BNE     Try2
0703 12d0 86 58                      LDA     #'X
0704 12d2 20 48                      BRA     Print1Reg
0705 12d4 81 02              Try2:   CMPA    #2
0706 12d6 26 04                      BNE     Try3
0707 12d8 86 59                      LDA     #'Y
0708 12da 20 40                      BRA     Print1Reg
0709 12dc 81 03              Try3:   CMPA    #3
0710 12de 26 04                      BNE     Try4
0711 12e0 86 55                      LDA     #'U
0712 12e2 20 38                      BRA     Print1Reg
0713 12e4 81 04              Try4:   CMPA    #4
0714 12e6 26 04                      BNE     Try5
0715 12e8 86 53                      LDA     #'S
0716 12ea 20 30                      BRA     Print1Reg
0717 12ec 81 05              Try5:   CMPA    #5
0718 12ee 26 06                      BNE     Try8
0719 12f0 86 50                      LDA     #'P
0720 12f2 c6 43                      LDB     #'C
0721 12f4 20 2a                      BRA     Print2Reg
0722 12f6 81 08              Try8:   CMPA    #8
0723 12f8 26 04                      BNE     Try9
0724 12fa 86 41                      LDA     #'A
0725 12fc 20 1e                      BRA     Print1Reg
0726 12fe 81 09              Try9:   CMPA    #9
0727 1300 26 04                      BNE     Try10
0728 1302 86 42                      LDA     #'B
0729 1304 20 16                      BRA     Print1Reg
0730 1306 81 0a              Try10:  CMPA    #10
0731 1308 26 06                      BNE     Try11
0732 130a 86 43                      LDA     #'C
0733 130c c6 43                      LDB     #'C
0734 130e 20 10                      BRA     Print2Reg
0735 1310 81 0b              Try11:  CMPA    #11
0736 1312 26 06                      BNE     Inv
0737 1314 86 44                      LDA     #'D
0738 1316 c6 50                      LDB     #'P
0739 1318 20 06                      BRA     Print2Reg
0740 131a 86 3f              Inv:    LDA     #'?             ; Invalid
0741                                                         ; Fall through
0742                         Print1Reg:
0743 131c 17 fd 79                   LBSR   PrintChar        ; Print character
0744 131f 39                         RTS
0745                         Print2Reg:
0746 1320 17 fd 75                   LBSR   PrintChar        ; Print first character
0747 1323 1f 98                      TFR    B,A
0748 1325 17 fd 70                   LBSR   PrintChar        ; Print second character
0749 1328 39                         RTS
0750                         
0751                         ; Handle PSHS/PSHU/PULS/PULU instruction operands
0752                         ; Format is a register list, eg; "  A,B,X"
0753                         
0754                         PULPSH:
0755 1329 17 fd 53                   LBSR    Print2Spaces    ; Two spaces
0756 132c 86 01                      LDA     #1
0757 132e b7 10 0d                   STA     FIRST           ; Flag set before any items printed
0758 1331 ae 8d fc cd                LDX     ADDR,PCR        ; Get address of op code
0759 1335 a6 01                      LDA     1,X             ; Get next byte (postbyte)
0760                         
0761                         ; Postbyte bits indicate registers to push/pull when 1.
0762                         ; 7  6   5 4 3  2 1 0
0763                         ; PC S/U Y X DP B A CC
0764                         
0765                         ; TODO: Could simplify this with shifting and lookup table.
0766                         
0767 1337 85 80                      BITA    #%10000000      ; Bit 7 set?
0768 1339 27 0d                      BEQ     bit6
0769 133b 34 06                      PSHS    A,B
0770 133d 86 50                      LDA     #'P
0771 133f c6 43                      LDB     #'C
0772 1341 8d dd                      BSR     Print2Reg       ; Print PC
0773 1343 7f 10 0d                   CLR     FIRST
0774 1346 35 06                      PULS    A,B
0775 1348 85 40              bit6:   BITA    #%01000000      ; Bit 6 set?
0776 134a 27 21                      BEQ     bit5
0777                         
0778                         ; Need to show S or U depending on instruction
0779                         
0780 134c 34 02                      PSHS    A               ; Save postbyte
0781 134e b6 10 06                   LDA     OPTYPE          ; Get opcode type
0782 1351 81 6d                      CMPA    #OP_PULS
0783 1353 27 12                      BEQ     printu
0784 1355 81 6b                      CMPA    #OP_PSHS
0785 1357 27 0e                      BEQ     printu
0786 1359 17 00 81                   LBSR    PrintCommaIfNotFirst
0787 135c 86 53                      LDA     #'S             ; Print S
0788 135e 8d bc              pr1     BSR     Print1Reg
0789 1360 7f 10 0d                   CLR     FIRST
0790 1363 35 02                      PULS    A
0791 1365 20 06                      bra     bit5
0792 1367 8d 74              printu: BSR     PrintCommaIfNotFirst
0793 1369 86 55                      LDA     #'U             ; Print U
0794 136b 20 f1                      bra     pr1
0795 136d 85 20              bit5:   BITA    #%00100000      ; Bit 5 set?
0796 136f 27 0d                      BEQ     bit4
0797 1371 34 02                      PSHS    A
0798 1373 8d 68                      BSR     PrintCommaIfNotFirst
0799 1375 86 59                      LDA     #'Y
0800 1377 8d a3                      BSR     Print1Reg       ; Print Y
0801 1379 7f 10 0d                   CLR     FIRST
0802 137c 35 02                      PULS    A
0803 137e 85 10              bit4:   BITA    #%00010000      ; Bit 4 set?
0804 1380 27 0d                      BEQ     bit3
0805 1382 34 02                      PSHS    A
0806 1384 8d 57                      BSR     PrintCommaIfNotFirst
0807 1386 86 58                      LDA     #'X
0808 1388 8d 92                      BSR     Print1Reg       ; Print X
0809 138a 7f 10 0d                   CLR     FIRST
0810 138d 35 02                      PULS    A
0811 138f 85 08              bit3:   BITA    #%00001000      ; Bit 3 set?
0812 1391 27 0f                      BEQ     bit2
0813 1393 34 06                      PSHS    A,B
0814 1395 8d 46                      BSR     PrintCommaIfNotFirst
0815 1397 86 44                      LDA     #'D
0816 1399 c6 50                      LDB     #'P
0817 139b 8d 83                      BSR     Print2Reg       ; Print DP
0818 139d 7f 10 0d                   CLR     FIRST
0819 13a0 35 06                      PULS    A,B
0820 13a2 85 04              bit2:   BITA    #%00000100      ; Bit 2 set?
0821 13a4 27 0e                      BEQ     bit1
0822 13a6 34 02                      PSHS    A
0823 13a8 8d 33                      BSR     PrintCommaIfNotFirst
0824 13aa 86 42                      LDA     #'B
0825 13ac 17 ff 6d                   LBSR    Print1Reg       ; Print B
0826 13af 7f 10 0d                   CLR     FIRST
0827 13b2 35 02                      PULS    A
0828 13b4 85 02              bit1:   BITA    #%00000010      ; Bit 1 set?
0829 13b6 27 0e                      BEQ     bit0
0830 13b8 34 02                      PSHS    A
0831 13ba 8d 21                      BSR     PrintCommaIfNotFirst
0832 13bc 86 41                      LDA     #'A
0833 13be 17 ff 5b                   LBSR    Print1Reg       ; Print A
0834 13c1 7f 10 0d                   CLR     FIRST
0835 13c4 35 02                      PULS    A
0836 13c6 85 01              bit0:   BITA    #%00000001      ; Bit 0 set?
0837 13c8 27 10                      BEQ     done1
0838 13ca 34 06                      PSHS    A,B
0839 13cc 8d 0f                      BSR     PrintCommaIfNotFirst
0840 13ce 86 43                      LDA     #'C
0841 13d0 c6 43                      LDB     #'C
0842 13d2 17 ff 4b                   LBSR    Print2Reg       ; Print CC
0843 13d5 7f 10 0d                   CLR     FIRST
0844 13d8 35 06                      PULS    A,B
0845 13da 16 02 f2           done1   LBRA    done
0846                         
0847                         ; Print comma if FIRST flag is not set.
0848                         PrintCommaIfNotFirst:
0849 13dd 7d 10 0d                   TST     FIRST
0850 13e0 26 05                      BNE     ret1
0851 13e2 86 2c                      LDA     #',
0852 13e4 17 fc b1                   LBSR    PrintChar
0853 13e7 39                 ret1:   RTS
0854                         
0855                         DO_IMMEDIATE16:                 ; Display "  #$nnnn"
0856 13e8 17 fc 94                   LBSR    Print2Spaces    ; Two spaces
0857 13eb 86 23                      LDA     #'#             ; Number sign
0858 13ed 17 fc a8                   LBSR    PrintChar
0859 13f0 17 fc 65                   LBSR    PrintDollar     ; Dollar sign
0860 13f3 ae 8d fc 0b                LDX     ADDR,PCR        ; Get address of op code
0861 13f7 a6 01                      LDA     1,X             ; Get first byte (immediate data MSB)
0862 13f9 e6 02                      LDB     2,X             ; Get second byte (immediate data LSB)
0863 13fb 1f 01                      TFR     D,X             ; Put in X to print
0864 13fd 17 fc ac                   LBSR    PrintAddress    ; Print as hex value
0865 1400 16 02 cc                   LBRA    done
0866                         
0867                         DO_DIRECT:                      ; Display "  $nn"
0868 1403 17 fc 79                   LBSR    Print2Spaces    ; Two spaces
0869 1406 17 fc 4f                   LBSR    PrintDollar     ; Dollar sign
0870 1409 ae 8d fb f5                LDX     ADDR,PCR        ; Get address of op code
0871 140d a6 01                      LDA     1,X             ; Get next byte (byte data)
0872 140f 17 fc 8c                   LBSR    PrintByte       ; Print as hex value
0873 1412 16 02 ba                   LBRA    done
0874                         
0875                         DO_EXTENDED:                    ; Display "  $nnnn"
0876 1415 17 fc 67                   LBSR    Print2Spaces    ; Two spaces
0877 1418 17 fc 3d                   LBSR    PrintDollar     ; Dollar sign
0878 141b ae 8d fb e3                LDX     ADDR,PCR        ; Get address of op code
0879 141f a6 01                      LDA     1,X             ; Get first byte (address MSB)
0880 1421 e6 02                      LDB     2,X             ; Get second byte (address LSB)
0881 1423 1f 01                      TFR     D,X             ; Put in X to print
0882 1425 17 fc 84                   LBSR    PrintAddress    ; Print as hex value
0883 1428 16 02 a4                   LBRA    done
0884                         
0885                         DO_RELATIVE8:                   ; Display "  $nnnn"
0886 142b 17 fc 51                   LBSR    Print2Spaces    ; Two spaces
0887 142e 17 fc 27                   LBSR    PrintDollar     ; Dollar sign
0888                         
0889                         ; Destination address for relative branch is address of opcode + (sign
0890                         ; extended)offset + 2, e.g.
0891                         ;   $1015 + $(FF)FC + 2 = $1013
0892                         ;   $101B + $(00)27 + 2 = $1044
0893                         
0894 1431 ae 8d fb cd                LDX     ADDR,PCR        ; Get address of op code
0895 1435 e6 01                      LDB     1,X             ; Get first byte (8-bit branch offset)
0896 1437 1d                         SEX                     ; Sign extend to 16 bits
0897 1438 f3 10 02                   ADDD    ADDR            ; Add address of op code
0898 143b c3 00 02                   ADDD    #2              ; Add 2
0899 143e 1f 01                      TFR     D,X             ; Put in X to print
0900 1440 17 fc 69                   LBSR    PrintAddress    ; Print as hex value
0901 1443 16 02 89                   LBRA    done
0902                         
0903                         DO_RELATIVE16:                  ; Display "  $nnnn"
0904 1446 17 fc 36                   LBSR    Print2Spaces    ; Two spaces
0905 1449 17 fc 0c                   LBSR    PrintDollar     ; Dollar sign
0906                         
0907                         ; Destination address calculation is similar to above, except offset
0908                         ; is 16 bits and need to add 3.
0909                         
0910 144c ae 8d fb b2                LDX     ADDR,PCR        ; Get address of op code
0911 1450 ec 01                      LDD     1,X             ; Get next 2 bytes (16-bit branch offset)
0912 1452 f3 10 02                   ADDD    ADDR            ; Add address of op code
0913 1455 c3 00 03                   ADDD    #3              ; Add 3
0914 1458 1f 01                      TFR     D,X             ; Put in X to print
0915 145a 17 fc 4f                   LBSR    PrintAddress    ; Print as hex value
0916 145d 16 02 6f                   LBRA    done
0917                         
0918                         DO_INDEXED:
0919 1460 17 fc 1c                   LBSR    Print2Spaces    ; Two spaces
0920                         
0921                         ; Addressing modes are determined by the postbyte:
0922                         ;
0923                         ; Postbyte  Format  Additional Bytes
0924                         ; --------  ------  ----------------
0925                         ; 0RRnnnnn  n,R     0
0926                         ; 1RR00100  ,R      0
0927                         ; 1RR01000  n,R     1
0928                         ; 1RR01001  n,R     2
0929                         ; 1RR00110  A,R     0
0930                         ; 1RR00101  B,R     0
0931                         ; 1RR01011  D,R     0
0932                         ; 1RR00000  ,R+     0
0933                         ; 1RR00001  ,R++    0
0934                         ; 1RR00010  ,-R     0
0935                         ; 1RR00011  ,--R    0
0936                         ; 1xx01100  n,PCR   1
0937                         ; 1xx01101  n,PCR   2
0938                         ; 1RR10100  [,R]    0
0939                         ; 1RR11000  [n,R]   1
0940                         ; 1RR11001  [n,R]   2
0941                         ; 1RR10110  [A,R]   0
0942                         ; 1RR10101  [B,R]   0
0943                         ; 1RR11011  [D,R]   0
0944                         ; 1RR10001  [,R++]  0
0945                         ; 1RR10011  [,--R]  0
0946                         ; 1xx11100  [n,PCR] 1
0947                         ; 1xx11101  [n,PCR] 2
0948                         ; 10011111  [n]     2
0949                         ;
0950                         ; Where RR: 00=X 01=Y 10=U 11=S
0951                         
0952 1463 b6 10 07                   LDA     POSTBYT         ; Get postbyte
0953 1466 2b 14                      BMI     ind2            ; Branch if MSB is 1
0954                         
0955                                                         ; Format is 0RRnnnnn  n,R
0956 1468 84 1f                      ANDA    #%00011111      ; Get 5-bit offset
0957 146a 17 fb eb                   LBSR    PrintDollar     ; Dollar sign
0958 146d 17 fc 2e                   LBSR    PrintByte       ; Print offset
0959 1470 17 fb ee                   LBSR    PrintComma      ; Print comma
0960 1473 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0961 1476 17 02 35                   LBSR    PrintRegister   ; Print register name
0962 1479 16 02 53                   LBRA    done
0963                         ind2:
0964 147c 84 9f                      ANDA    #%10011111      ; Mask out register bits
0965 147e 81 84                      CMPA    #%10000100      ; Check against pattern
0966 1480 26 0c                      BNE     ind3
0967                                                         ; Format is 1RR00100  ,R
0968 1482 17 fb dc                   LBSR    PrintComma      ; Print comma
0969 1485 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0970 1488 17 02 23                   LBSR    PrintRegister   ; Print register name
0971 148b 16 02 41                   LBRA    done
0972                         ind3:
0973 148e 81 88                      CMPA    #%10001000      ; Check against pattern
0974 1490 26 18                      BNE     ind4
0975                                                         ; Format is 1RR01000  n,R
0976 1492 ae 8d fb 6c                LDX     ADDR,PCR
0977 1496 a6 02                      LDA     2,X             ; Get 8-bit offset
0978 1498 17 fb bd                   LBSR    PrintDollar     ; Dollar sign
0979 149b 17 fc 00                   LBSR    PrintByte       ; Display it
0980 149e 17 fb c0                   LBSR    PrintComma      ; Print comma
0981 14a1 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0982 14a4 17 02 07                   LBSR    PrintRegister   ; Print register name
0983 14a7 16 02 25                   LBRA    done
0984                         ind4:
0985 14aa 81 89                      CMPA    #%10001001      ; Check against pattern
0986 14ac 26 1a                      BNE     ind5
0987                                                         ; Format is 1RR01001  n,R
0988 14ae ae 8d fb 50                LDX     ADDR,PCR
0989 14b2 ec 02                      LDD     2,X             ; Get 16-bit offset
0990 14b4 1f 01                      TFR     D,X
0991 14b6 17 fb 9f                   LBSR    PrintDollar     ; Dollar sign
0992 14b9 17 fb f0                   LBSR    PrintAddress    ; Display it
0993 14bc 17 fb a2                   LBSR    PrintComma      ; Print comma
0994 14bf b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0995 14c2 17 01 e9                   LBSR    PrintRegister   ; Print register name
0996 14c5 16 02 07                   LBRA    done
0997                         ind5:
0998 14c8 81 86                      CMPA    #%10000110      ; Check against pattern
0999 14ca 26 11                      BNE     ind6
1000                                                         ; Format is 1RR00110  A,R
1001 14cc 86 41                      LDA     #'A
1002 14ce 17 fb c7                   LBSR    PrintChar       ; Print A
1003 14d1 17 fb 8d           commar: LBSR    PrintComma      ; Print comma
1004 14d4 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1005 14d7 17 01 d4                   LBSR    PrintRegister   ; Print register name
1006 14da 16 01 f2                   LBRA    done
1007                         ind6:
1008 14dd 81 85                      CMPA    #%10000101      ; Check against pattern
1009 14df 26 07                      BNE     ind7
1010                                                         ; Format is 1RR00101  B,R
1011 14e1 86 42                      LDA     #'B
1012 14e3 17 fb b2                   LBSR    PrintChar
1013 14e6 20 e9                      BRA     commar
1014                         ind7:
1015 14e8 81 8b                      CMPA    #%10001011      ; Check against pattern
1016 14ea 26 07                      BNE     ind8
1017                                                         ; Format is 1RR01011  D,R
1018 14ec 86 44                      LDA     #'D
1019 14ee 17 fb a7                   LBSR    PrintChar
1020 14f1 20 de                      BRA     commar
1021                         ind8:
1022 14f3 81 80                      CMPA    #%10000000      ; Check against pattern
1023 14f5 26 11                      BNE     ind9
1024                                                         ; Format is 1RR00000  ,R+
1025 14f7 17 fb 67                   LBSR    PrintComma      ; Print comma
1026 14fa b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1027 14fd 17 01 ae                   LBSR    PrintRegister   ; Print register name
1028 1500 86 2b                      LDA     #'+             ; Print plus
1029 1502 17 fb 93                   LBSR    PrintChar
1030 1505 16 01 c7                   LBRA    done
1031                         ind9:
1032 1508 81 81                      CMPA    #%10000001      ; Check against pattern
1033 150a 26 14                      BNE     ind10
1034                                                         ; Format is 1RR00001  ,R++
1035 150c 17 fb 52                   LBSR    PrintComma      ; Print comma
1036 150f b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1037 1512 17 01 99                   LBSR    PrintRegister   ; Print register name
1038 1515 86 2b                      LDA     #'+             ; Print plus twice
1039 1517 17 fb 7e                   LBSR    PrintChar
1040 151a 17 fb 7b                   LBSR    PrintChar
1041 151d 16 01 af                   LBRA    done
1042                         ind10:
1043 1520 81 82                      CMPA    #%10000010      ; Check against pattern
1044 1522 26 11                      BNE     ind11
1045                                                         ; Format is 1RR00010  ,-R
1046 1524 17 fb 3a                   LBSR    PrintComma      ; Print comma
1047 1527 86 2d                      LDA     #'-             ; Print minus
1048 1529 17 fb 6c                   LBSR    PrintChar
1049 152c b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1050 152f 17 01 7c                   LBSR    PrintRegister   ; Print register name
1051 1532 16 01 9a                   LBRA    done
1052                         ind11:
1053 1535 81 83                      CMPA    #%10000011      ; Check against pattern
1054 1537 26 14                      BNE     ind12
1055                                                         ; Format is 1RR00011  ,--R
1056 1539 17 fb 25                   LBSR    PrintComma      ; Print comma
1057 153c 86 2d                      LDA     #'-             ; Print minus twice
1058 153e 17 fb 57                   LBSR    PrintChar
1059 1541 17 fb 54                   LBSR    PrintChar
1060 1544 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1061 1547 17 01 64                   LBSR    PrintRegister   ; Print register name
1062 154a 16 01 82                   LBRA    done
1063                         ind12:
1064 154d 81 8c                      CMPA    #%10001100      ; Check against pattern
1065 154f 26 15                      BNE     ind13
1066                                                         ; Format is 1xx01100  n,PCR
1067 1551 ae 8d fa ad                LDX     ADDR,PCR
1068 1555 a6 02                      LDA     2,X             ; Get 8-bit offset
1069 1557 17 fa fe                   LBSR    PrintDollar     ; Dollar sign
1070 155a 17 fb 41                   LBSR    PrintByte       ; Display it
1071 155d 17 fb 01                   LBSR    PrintComma      ; Print comma
1072 1560 17 01 64                   LBSR    PrintPCR        ; Print PCR
1073 1563 16 01 69                   LBRA    done
1074                         ind13:
1075 1566 81 8d                      CMPA    #%10001101      ; Check against pattern
1076 1568 26 17                      BNE     ind14
1077                                                         ; Format is 1xx01101  n,PCR
1078 156a ae 8d fa 94                LDX     ADDR,PCR
1079 156e ec 02                      LDD     2,X             ; Get 16-bit offset
1080 1570 1f 01                      TFR     D,X
1081 1572 17 fa e3                   LBSR    PrintDollar     ; Dollar sign
1082 1575 17 fb 34                   LBSR    PrintAddress    ; Display it
1083 1578 17 fa e6                   LBSR    PrintComma      ; Print comma
1084 157b 17 01 49                   LBSR    PrintPCR        ; Print PCR
1085 157e 16 01 4e                   LBRA    done
1086                         ind14:
1087 1581 81 94                      CMPA    #%10010100      ; Check against pattern
1088 1583 26 12                      BNE     ind15
1089                                                         ; Format is 1RR10100  [,R]
1090 1585 17 fa e2                   LBSR    PrintLBracket   ; Print left bracket
1091 1588 17 fa d6                   LBSR    PrintComma      ; Print comma
1092 158b b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1093 158e 17 01 1d                   LBSR    PrintRegister   ; Print register name
1094 1591 17 fa df                   LBSR    PrintRBracket   ; Print right bracket
1095 1594 16 01 38                   LBRA    done
1096                         ind15:
1097 1597 81 98                      CMPA    #%10011000      ; Check against pattern
1098 1599 26 1e                      BNE     ind16
1099                                                         ; Format is 1RR11000  [n,R]
1100 159b 17 fa cc                   LBSR    PrintLBracket   ; Print left bracket
1101 159e ae 8d fa 60                LDX     ADDR,PCR
1102 15a2 a6 02                      LDA     2,X             ; Get 8-bit offset
1103 15a4 17 fa b1                   LBSR    PrintDollar     ; Dollar sign
1104 15a7 17 fa f4                   LBSR    PrintByte       ; Display it
1105 15aa 17 fa b4                   LBSR    PrintComma      ; Print comma
1106 15ad b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1107 15b0 17 00 fb                   LBSR    PrintRegister   ; Print register name
1108 15b3 17 fa bd                   LBSR    PrintRBracket   ; Print right bracket
1109 15b6 16 01 16                   LBRA    done
1110                         ind16:
1111 15b9 81 99                      CMPA    #%10011001      ; Check against pattern
1112 15bb 26 20                      BNE     ind17
1113                                                         ; Format is 1RR11001  [n,R]
1114 15bd 17 fa aa                   LBSR    PrintLBracket   ; Print left bracket
1115 15c0 ae 8d fa 3e                LDX     ADDR,PCR
1116 15c4 ec 02                      LDD     2,X             ; Get 16-bit offset
1117 15c6 1f 01                      TFR     D,X
1118 15c8 17 fa 8d                   LBSR    PrintDollar     ; Dollar sign
1119 15cb 17 fa de                   LBSR    PrintAddress    ; Display it
1120 15ce 17 fa 90                   LBSR    PrintComma      ; Print comma
1121 15d1 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1122 15d4 17 00 d7                   LBSR    PrintRegister   ; Print register name
1123 15d7 17 fa 99                   LBSR    PrintRBracket   ; Print right bracket
1124 15da 16 00 f2                   LBRA    done
1125                         ind17:
1126 15dd 81 96                      CMPA    #%10010110      ; Check against pattern
1127 15df 26 17                      BNE     ind18
1128                                                         ; Format is 1RR10110  [A,R]
1129 15e1 17 fa 86                   LBSR    PrintLBracket   ; Print left bracket
1130 15e4 86 41                      LDA     #'A
1131 15e6 17 fa af                   LBSR    PrintChar       ; Print A
1132 15e9 17 fa 75           comrb:  LBSR    PrintComma      ; Print comma
1133 15ec b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1134 15ef 17 00 bc                   LBSR    PrintRegister   ; Print register name
1135 15f2 17 fa 7e                   LBSR    PrintRBracket   ; Print right bracket
1136 15f5 16 00 d7                   LBRA    done
1137                         ind18:
1138 15f8 81 95                      CMPA    #%10010101      ; Check against pattern
1139 15fa 26 0a                      BNE     ind19
1140                                                         ; Format is 1RR10101  [B,R]
1141 15fc 17 fa 6b                   LBSR    PrintLBracket   ; Print left bracket
1142 15ff 86 42                      LDA     #'B
1143 1601 17 fa 94                   LBSR    PrintChar
1144 1604 20 e3                      BRA     comrb
1145                         ind19:
1146 1606 81 9b                      CMPA    #%10011011      ; Check against pattern
1147 1608 26 0a                      BNE     ind20
1148                                                         ; Format is 1RR11011  [D,R]
1149 160a 17 fa 5d                   LBSR    PrintLBracket   ; Print left bracket
1150 160d 86 44                      LDA     #'D
1151 160f 17 fa 86                   LBSR    PrintChar
1152 1612 20 d5                      BRA     comrb
1153                         ind20:
1154 1614 81 91                      CMPA    #%10010001      ; Check against pattern
1155 1616 26 1a                      BNE     ind21
1156                                                         ; Format is 1RR10001  [,R++]
1157 1618 17 fa 4f                   LBSR    PrintLBracket   ; Print left bracket
1158 161b 17 fa 43                   LBSR    PrintComma      ; Print comma
1159 161e b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1160 1621 17 00 8a                   LBSR    PrintRegister   ; Print register name
1161 1624 86 2b                      LDA     #'+             ; Print plus twice
1162 1626 17 fa 6f                   LBSR    PrintChar
1163 1629 17 fa 6c                   LBSR    PrintChar
1164 162c 17 fa 44                   LBSR    PrintRBracket   ; Print right bracket
1165 162f 16 00 9d                   LBRA    done
1166                         ind21:
1167 1632 81 93                      CMPA    #%10010011      ; Check against pattern
1168 1634 26 1a                      BNE     ind22
1169                                                         ; Format is 1RR10011  [,--R]
1170 1636 17 fa 31                   LBSR    PrintLBracket   ; Print left bracket
1171 1639 17 fa 25                   LBSR    PrintComma      ; Print comma
1172 163c 86 2d                      LDA     #'-             ; Print minus twice
1173 163e 17 fa 57                   LBSR    PrintChar
1174 1641 17 fa 54                   LBSR    PrintChar
1175 1644 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1176 1647 17 00 64                   LBSR    PrintRegister   ; Print register name
1177 164a 17 fa 26                   LBSR    PrintRBracket   ; Print right bracket
1178 164d 16 00 7f                   LBRA    done
1179                         ind22:
1180 1650 81 9c                      CMPA    #%10011100      ; Check against pattern
1181 1652 26 1b                      BNE     ind23
1182                                                         ; Format is 1xx11100  [n,PCR]
1183 1654 17 fa 13                   LBSR    PrintLBracket   ; Print left bracket
1184 1657 ae 8d f9 a7                LDX     ADDR,PCR
1185 165b a6 02                      LDA     2,X             ; Get 8-bit offset
1186 165d 17 f9 f8                   LBSR    PrintDollar     ; Dollar sign
1187 1660 17 fa 3b                   LBSR    PrintByte       ; Display it
1188 1663 17 f9 fb                   LBSR    PrintComma      ; Print comma
1189 1666 17 00 5e                   LBSR    PrintPCR        ; Print PCR
1190 1669 17 fa 07                   LBSR    PrintRBracket   ; Print right bracket
1191 166c 16 00 60                   LBRA    done
1192                         ind23:
1193 166f 81 9d                      CMPA    #%10011101      ; Check against pattern
1194 1671 26 1d                      BNE     ind24
1195                                                         ; Format is 1xx11101  [n,PCR]
1196 1673 17 f9 f4                   LBSR    PrintLBracket   ; Print left bracket
1197 1676 ae 8d f9 88                LDX     ADDR,PCR
1198 167a ec 02                      LDD     2,X             ; Get 16-bit offset
1199 167c 1f 01                      TFR     D,X
1200 167e 17 f9 d7                   LBSR    PrintDollar     ; Dollar sign
1201 1681 17 fa 28                   LBSR    PrintAddress    ; Display it
1202 1684 17 f9 da                   LBSR    PrintComma      ; Print comma
1203 1687 17 00 3d                   LBSR    PrintPCR        ; Print PCR
1204 168a 17 f9 e6                   LBSR    PrintRBracket   ; Print right bracket
1205 168d 16 00 3f                   LBRA    done
1206                         ind24:
1207 1690 81 9f                      CMPA    #%10011111      ; Check against pattern
1208 1692 26 17                      BNE     ind25
1209                                                         ; Format is 1xx11111  [n]
1210 1694 17 f9 d3                   LBSR    PrintLBracket   ; Print left bracket
1211 1697 ae 8d f9 67                LDX     ADDR,PCR
1212 169b ec 02                      LDD     2,X             ; Get 16-bit offset
1213 169d 1f 01                      TFR     D,X
1214 169f 17 f9 b6                   LBSR    PrintDollar     ; Dollar sign
1215 16a2 17 fa 07                   LBSR    PrintAddress    ; Display it
1216 16a5 17 f9 cb                   LBSR    PrintRBracket   ; Print right bracket
1217 16a8 16 00 24                   LBRA    done
1218                         ind25:                          ; Should never be reached
1219 16ab 16 00 21                   LBRA    done
1220                         
1221                         ; Print register name encoded in bits 5 and 6 of A for indexed
1222                         ; addressing: xRRxxxxx where RR: 00=X 01=Y 10=U 11=S
1223                         ; Registers changed: X
1224                         PrintRegister:
1225 16ae 34 02                      PSHS    A               ; Save A
1226 16b0 84 60                      ANDA    #%01100000      ; Mask out other bits
1227 16b2 44                         LSRA                    ; Shift into 2 LSB
1228 16b3 44                         LSRA
1229 16b4 44                         LSRA
1230 16b5 44                         LSRA
1231 16b6 44                         LSRA
1232 16b7 30 8d 00 08                LEAX    REGTABLE,PCR    ; Lookup table of register name characters
1233 16bb a6 86                      LDA     A,X             ; Get character
1234 16bd 17 f9 d8                   LBSR    PrintChar       ; Print it
1235 16c0 35 02                      PULS    A               ; Restore A
1236 16c2 39                         RTS                     ; Return
1237                         REGTABLE:
1238 16c3 58 59 55 53                FCC     "XYUS"
1239                         
1240                         
1241                         ; Print the string "PCR" on the console.
1242                         ; Registers changed: X
1243                         PrintPCR:
1244 16c7 30 8d 05 38                LEAX    MSG3,PCR        ; "PCR" string
1245 16cb 17 f9 ec                   LBSR    PrintString
1246 16ce 39                         RTS
1247                         
1248                         ; Print final CR
1249                         
1250 16cf 17 f9 79           done:   LBSR    PrintCR
1251                         
1252                         ; Update address to next instruction
1253                         ; If it was a page 2/3 instruction, we need to subtract one from the
1254                         ; length to account for ADDR being moved to the second byte of the
1255                         ; instruction.
1256                         
1257 16d2 7d 10 0e                   TST     PAGE23          ; Flag set
1258 16d5 27 03                      BEQ     not23           ; Branch if not
1259 16d7 7a 10 08                   DEC     LEN             ; Decrement length
1260 16da 4f                 not23:  CLRA                    ; Clear MSB of D
1261 16db f6 10 08                   LDB     LEN             ; Get length byte in LSB of D
1262 16de f3 10 02                   ADDD    ADDR            ; Add to address
1263 16e1 fd 10 02                   STD     ADDR            ; Write new address
1264                         
1265                         ; Return
1266 16e4 39                         RTS
1267                         
1268                         ; *** DATA
1269                         
1270                         ; Table of instruction strings. 4 bytes per table entry
1271                         MNEMONICS:
1272 16e5 3f 3f 3f 20                FCC     "??? "          ; $00
1273 16e9 41 42 58 20                FCC     "ABX "          ; $01
1274 16ed 41 44 43 41                FCC     "ADCA"          ; $02
1275 16f1 41 44 43 42                FCC     "ADCB"          ; $03
1276 16f5 41 44 44 41                FCC     "ADDA"          ; $04
1277 16f9 41 44 44 42                FCC     "ADDB"          ; $05
1278 16fd 41 44 44 44                FCC     "ADDD"          ; $06
1279 1701 41 4e 44 41                FCC     "ANDA"          ; $07
1280 1705 41 4e 44 42                FCC     "ANDB"          ; $08
1281 1709 41 4e 44 43                FCC     "ANDC"          ; $09 Should really  be "ANDCC"
1282 170d 41 53 4c 20                FCC     "ASL "          ; $0A
1283 1711 41 53 4c 41                FCC     "ASLA"          ; $0B
1284 1715 41 53 4c 42                FCC     "ASLB"          ; $0C
1285 1719 41 53 52 20                FCC     "ASR "          ; $0D
1286 171d 41 53 52 41                FCC     "ASRA"          ; $0E
1287 1721 41 53 52 42                FCC     "ASRB"          ; $0F
1288 1725 42 43 43 20                FCC     "BCC "          ; $10
1289 1729 42 43 53 20                FCC     "BCS "          ; $11
1290 172d 42 45 51 20                FCC     "BEQ "          ; $12
1291 1731 42 47 45 20                FCC     "BGE "          ; $13
1292 1735 42 47 54 20                FCC     "BGT "          ; $14
1293 1739 42 48 49 20                FCC     "BHI "          ; $15
1294 173d 42 48 53 20                FCC     "BHS "          ; $16
1295 1741 42 49 54 41                FCC     "BITA"          ; $17
1296 1745 42 49 54 42                FCC     "BITB"          ; $18
1297 1749 42 4c 45 20                FCC     "BLE "          ; $19
1298 174d 42 4c 4f 20                FCC     "BLO "          ; $1A
1299 1751 42 4c 53 20                FCC     "BLS "          ; $1B
1300 1755 42 4c 54 20                FCC     "BLT "          ; $1C
1301 1759 42 4d 49 20                FCC     "BMI "          ; $1D
1302 175d 42 4e 45 20                FCC     "BNE "          ; $1E
1303 1761 42 50 4c 20                FCC     "BPL "          ; $1F
1304 1765 42 52 41 20                FCC     "BRA "          ; $20
1305 1769 42 52 4e 20                FCC     "BRN "          ; $21
1306 176d 42 53 52 20                FCC     "BSR "          ; $22
1307 1771 42 56 43 20                FCC     "BVC "          ; $23
1308 1775 42 56 53 20                FCC     "BVS "          ; $24
1309 1779 43 4c 52 20                FCC     "CLR "          ; $25
1310 177d 43 4c 52 41                FCC     "CLRA"          ; $26
1311 1781 43 4c 52 42                FCC     "CLRB"          ; $27
1312 1785 43 4d 50 41                FCC     "CMPA"          ; $28
1313 1789 43 4d 50 42                FCC     "CMPB"          ; $29
1314 178d 43 4d 50 44                FCC     "CMPD"          ; $2A
1315 1791 43 4d 50 53                FCC     "CMPS"          ; $2B
1316 1795 43 4d 50 55                FCC     "CMPU"          ; $2C
1317 1799 43 4d 50 58                FCC     "CMPX"          ; $2D
1318 179d 43 4d 50 59                FCC     "CMPY"          ; $2E
1319 17a1 43 4f 4d 41                FCC     "COMA"          ; $2F
1320 17a5 43 4f 4d 42                FCC     "COMB"          ; $30
1321 17a9 43 4f 4d 20                FCC     "COM "          ; $31
1322 17ad 43 57 41 49                FCC     "CWAI"          ; $32
1323 17b1 44 41 41 20                FCC     "DAA "          ; $33
1324 17b5 44 45 43 20                FCC     "DEC "          ; $34
1325 17b9 44 45 43 41                FCC     "DECA"          ; $35
1326 17bd 44 45 43 42                FCC     "DECB"          ; $36
1327 17c1 45 4f 52 41                FCC     "EORA"          ; $37
1328 17c5 45 4f 52 42                FCC     "EORB"          ; $38
1329 17c9 45 58 47 20                FCC     "EXG "          ; $39
1330 17cd 49 4e 43 20                FCC     "INC "          ; $3A
1331 17d1 49 4e 43 41                FCC     "INCA"          ; $3B
1332 17d5 49 4e 43 42                FCC     "INCB"          ; $3C
1333 17d9 4a 4d 50 20                FCC     "JMP "          ; $3D
1334 17dd 4a 53 52 20                FCC     "JSR "          ; $3E
1335 17e1 4c 42 43 43                FCC     "LBCC"          ; $3F
1336 17e5 4c 42 43 53                FCC     "LBCS"          ; $40
1337 17e9 4c 42 45 51                FCC     "LBEQ"          ; $41
1338 17ed 4c 42 47 45                FCC     "LBGE"          ; $42
1339 17f1 4c 42 47 54                FCC     "LBGT"          ; $43
1340 17f5 4c 42 48 49                FCC     "LBHI"          ; $44
1341 17f9 4c 42 48 53                FCC     "LBHS"          ; $45
1342 17fd 4c 42 4c 45                FCC     "LBLE"          ; $46
1343 1801 4c 42 4c 4f                FCC     "LBLO"          ; $47
1344 1805 4c 42 4c 53                FCC     "LBLS"          ; $48
1345 1809 4c 42 4c 54                FCC     "LBLT"          ; $49
1346 180d 4c 42 4d 49                FCC     "LBMI"          ; $4A
1347 1811 4c 42 4e 45                FCC     "LBNE"          ; $4B
1348 1815 4c 42 50 4c                FCC     "LBPL"          ; $4C
1349 1819 4c 42 52 41                FCC     "LBRA"          ; $4D
1350 181d 4c 42 52 4e                FCC     "LBRN"          ; $4E
1351 1821 4c 42 53 52                FCC     "LBSR"          ; $4F
1352 1825 4c 42 56 43                FCC     "LBVC"          ; $50
1353 1829 4c 42 56 53                FCC     "LBVS"          ; $51
1354 182d 4c 44 41 20                FCC     "LDA "          ; $52
1355 1831 4c 44 42 20                FCC     "LDB "          ; $53
1356 1835 4c 44 44 20                FCC     "LDD "          ; $54
1357 1839 4c 44 53 20                FCC     "LDS "          ; $55
1358 183d 4c 44 55 20                FCC     "LDU "          ; $56
1359 1841 4c 44 58 20                FCC     "LDX "          ; $57
1360 1845 4c 44 59 20                FCC     "LDY "          ; $58
1361 1849 4c 45 41 53                FCC     "LEAS"          ; $59
1362 184d 4c 45 41 55                FCC     "LEAU"          ; $5A
1363 1851 4c 45 41 58                FCC     "LEAX"          ; $5B
1364 1855 4c 45 41 59                FCC     "LEAY"          ; $5C
1365 1859 4c 53 4c 20                FCC     "LSL "          ; $5D
1366 185d 4c 53 4c 41                FCC     "LSLA"          ; $5E
1367 1861 4c 53 4c 42                FCC     "LSLB"          ; $5F
1368 1865 4c 53 52 20                FCC     "LSR "          ; $60
1369 1869 4c 53 52 41                FCC     "LSRA"          ; $61
1370 186d 4c 53 52 42                FCC     "LSRB"          ; $62
1371 1871 4d 55 4c 20                FCC     "MUL "          ; $63
1372 1875 4e 45 47 20                FCC     "NEG "          ; $64
1373 1879 4e 45 47 41                FCC     "NEGA"          ; $65
1374 187d 4e 45 47 42                FCC     "NEGB"          ; $66
1375 1881 4e 4f 50 20                FCC     "NOP "          ; $67
1376 1885 4f 52 41 20                FCC     "ORA "          ; $68
1377 1889 4f 52 42 20                FCC     "ORB "          ; $69
1378 188d 4f 52 43 43                FCC     "ORCC"          ; $6A
1379 1891 50 53 48 53                FCC     "PSHS"          ; $6B
1380 1895 50 53 48 55                FCC     "PSHU"          ; $6C
1381 1899 50 55 4c 53                FCC     "PULS"          ; $6D
1382 189d 50 55 4c 55                FCC     "PULU"          ; $6E
1383 18a1 52 4f 4c 20                FCC     "ROL "          ; $6F
1384 18a5 52 4f 4c 41                FCC     "ROLA"          ; $70
1385 18a9 52 4f 4c 42                FCC     "ROLB"          ; $71
1386 18ad 52 4f 52 20                FCC     "ROR "          ; $72
1387 18b1 52 4f 52 41                FCC     "RORA"          ; $73
1388 18b5 52 4f 52 42                FCC     "RORB"          ; $74
1389 18b9 52 54 49 20                FCC     "RTI "          ; $75
1390 18bd 52 54 53 20                FCC     "RTS "          ; $76
1391 18c1 53 42 43 41                FCC     "SBCA"          ; $77
1392 18c5 53 42 43 42                FCC     "SBCB"          ; $78
1393 18c9 53 45 58 20                FCC     "SEX "          ; $79
1394 18cd 53 54 41 20                FCC     "STA "          ; $7A
1395 18d1 53 54 42 20                FCC     "STB "          ; $7B
1396 18d5 53 54 44 20                FCC     "STD "          ; $7C
1397 18d9 53 54 53 20                FCC     "STS "          ; $7D
1398 18dd 53 54 55 20                FCC     "STU "          ; $7E
1399 18e1 53 54 58 20                FCC     "STX "          ; $7F
1400 18e5 53 54 59 20                FCC     "STY "          ; $80
1401 18e9 53 55 42 41                FCC     "SUBA"          ; $81
1402 18ed 53 55 42 42                FCC     "SUBB"          ; $82
1403 18f1 53 55 42 44                FCC     "SUBD"          ; $83
1404 18f5 53 57 49 20                FCC     "SWI "          ; $84
1405 18f9 53 57 49 32                FCC     "SWI2"          ; $85
1406 18fd 53 57 49 33                FCC     "SWI3"          ; $86
1407 1901 53 59 4e 43                FCC     "SYNC"          ; $87
1408 1905 54 46 52 20                FCC     "TFR "          ; $88
1409 1909 54 53 54 20                FCC     "TST "          ; $89
1410 190d 54 53 54 41                FCC     "TSTA"          ; $8A
1411 1911 54 53 54 42                FCC     "TSTB"          ; $8B
1412                         
1413                         ; Lengths of instructions given an addressing mode. Matches values of
1414                         ; AM_* Indexed addessing instructions lenth can increase due to post
1415                         ; byte.
1416                         LENGTHS:
1417 1915 01                         FCB     1               ; 0 AM_INVALID
1418 1916 01                         FCB     1               ; 1 AM_INHERENT
1419 1917 02                         FCB     2               ; 2 AM_IMMEDIATE8
1420 1918 03                         FCB     3               ; 3 AM_IMMEDIATE16
1421 1919 02                         FCB     2               ; 4 AM_DIRECT
1422 191a 03                         FCB     3               ; 5 AM_EXTENDED
1423 191b 02                         FCB     2               ; 6 AM_RELATIVE8
1424 191c 03                         FCB     3               ; 7 AM_RELATIVE16
1425 191d 02                         FCB     2               ; 8 AM_INDEXED
1426                         
1427                         ; Lookup table to return needed remaining spaces to print to pad out
1428                         ; instruction to correct column in disassembly.
1429                         ; # bytes: 1 2 3 4
1430                         ; Padding: 9 6 3 0
1431                         PADDING:
1432 191e 0a 07 04 01                FCB     10, 7, 4, 1
1433                         
1434                         ; Lookup table to return number of additional bytes for indexed
1435                         ; addressing based on low order 5 bits of postbyte. Based on
1436                         ; detailed list of values below.
1437                         
1438                         POSTBYTES:
1439 1922 00 00 00 00 00 00          FCB     0, 0, 0, 0, 0, 0, 0, 0
     00 00
1440 192a 01 02 00 00 01 02          FCB     1, 2, 0, 0, 1, 2, 0, 0
     00 00
1441 1932 00 00 00 00 00 00          FCB     0, 0, 0, 0, 0, 0, 0, 0
     00 00
1442 193a 01 02 00 00 01 02          FCB     1, 2, 0, 0, 1, 2, 0, 2
     00 02
1443                         
1444                         ; Pattern:  # Extra bytes:
1445                         ; --------  --------------
1446                         ; 0XXXXXXX   0
1447                         ; 1XX00000   0
1448                         ; 1XX00001   0
1449                         ; 1XX00010   0
1450                         ; 1XX00011   0
1451                         ; 1XX00100   0
1452                         ; 1X000101   0
1453                         ; 1XX00110   0
1454                         ; 1XX00111   0 (INVALID)
1455                         ; 1XX01000   1
1456                         ; 1XX01001   2
1457                         ; 1XX01010   0 (INVALID)
1458                         ; 1XX01011   0
1459                         ; 1XX01100   1
1460                         ; 1XX01101   2
1461                         ; 1XX01110   0 (INVALID)
1462                         ; 1XX01111   0 (INVALID)
1463                         ; 1XX10000   0 (INVALID)
1464                         ; 1XX10001   0
1465                         ; 1XX10010   0 (INVALID)
1466                         ; 1XX10011   0
1467                         ; 1XX10100   0
1468                         ; 1XX10101   0
1469                         ; 1XX10110   0
1470                         ; 1XX10111   0 (INVALID)
1471                         ; 1XX11000   1
1472                         ; 1XX11001   2
1473                         ; 1XX11010   0 (INVALID)
1474                         ; 1XX11011   0
1475                         ; 1XX11100   1
1476                         ; 1XX11101   2
1477                         ; 1XX11110   0 (INVALID)
1478                         ; 1XX11111   2
1479                         
1480                         ; Opcodes. Listed in order indexed by op code. Defines the mnemonic.
1481                         OPCODES:
1482 1942 64                         FCB     OP_NEG          ; 00
1483 1943 00                         FCB     OP_INV          ; 01
1484 1944 00                         FCB     OP_INV          ; 02
1485 1945 30                         FCB     OP_COMB         ; 03
1486 1946 60                         FCB     OP_LSR          ; 04
1487 1947 00                         FCB     OP_INV          ; 05
1488 1948 72                         FCB     OP_ROR          ; 06
1489 1949 0d                         FCB     OP_ASR          ; 07
1490 194a 0a                         FCB     OP_ASL          ; 08 OR LSL
1491 194b 6f                         FCB     OP_ROL          ; 09
1492 194c 34                         FCB     OP_DEC          ; 0A
1493 194d 00                         FCB     OP_INV          ; 0B
1494 194e 3a                         FCB     OP_INC          ; 0C
1495 194f 89                         FCB     OP_TST          ; 0D
1496 1950 3d                         FCB     OP_JMP          ; 0E
1497 1951 25                         FCB     OP_CLR          ; 0F
1498                         
1499 1952 00                         FCB     OP_INV          ; 10 Page 2 extended opcodes (see other table)
1500 1953 00                         FCB     OP_INV          ; 11 Page 3 extended opcodes (see other table)
1501 1954 67                         FCB     OP_NOP          ; 12
1502 1955 87                         FCB     OP_SYNC         ; 13
1503 1956 00                         FCB     OP_INV          ; 14
1504 1957 00                         FCB     OP_INV          ; 15
1505 1958 4d                         FCB     OP_LBRA         ; 16
1506 1959 4f                         FCB     OP_LBSR         ; 17
1507 195a 00                         FCB     OP_INV          ; 18
1508 195b 33                         FCB     OP_DAA          ; 19
1509 195c 6a                         FCB     OP_ORCC         ; 1A
1510 195d 00                         FCB     OP_INV          ; 1B
1511 195e 09                         FCB     OP_ANDCC        ; 1C
1512 195f 79                         FCB     OP_SEX          ; 1D
1513 1960 39                         FCB     OP_EXG          ; 1E
1514 1961 88                         FCB     OP_TFR          ; 1F
1515                         
1516 1962 20                         FCB     OP_BRA          ; 20
1517 1963 21                         FCB     OP_BRN          ; 21
1518 1964 15                         FCB     OP_BHI          ; 22
1519 1965 1b                         FCB     OP_BLS          ; 23
1520 1966 16                         FCB     OP_BHS          ; 24
1521 1967 1a                         FCB     OP_BLO          ; 25
1522 1968 1e                         FCB     OP_BNE          ; 26
1523 1969 12                         FCB     OP_BEQ          ; 27
1524 196a 23                         FCB     OP_BVC          ; 28
1525 196b 24                         FCB     OP_BVS          ; 29
1526 196c 1f                         FCB     OP_BPL          ; 2A
1527 196d 1d                         FCB     OP_BMI          ; 2B
1528 196e 13                         FCB     OP_BGE          ; 2C
1529 196f 1c                         FCB     OP_BLT          ; 2D
1530 1970 14                         FCB     OP_BGT          ; 2E
1531 1971 19                         FCB     OP_BLE          ; 2F
1532                         
1533 1972 5b                         FCB     OP_LEAX         ; 30
1534 1973 5c                         FCB     OP_LEAY         ; 31
1535 1974 59                         FCB     OP_LEAS         ; 32
1536 1975 5a                         FCB     OP_LEAU         ; 33
1537 1976 6b                         FCB     OP_PSHS         ; 34
1538 1977 6d                         FCB     OP_PULS         ; 35
1539 1978 6c                         FCB     OP_PSHU         ; 36
1540 1979 6e                         FCB     OP_PULU         ; 37
1541 197a 00                         FCB     OP_INV          ; 38
1542 197b 76                         FCB     OP_RTS          ; 39
1543 197c 01                         FCB     OP_ABX          ; 3A
1544 197d 75                         FCB     OP_RTI          ; 3B
1545 197e 32                         FCB     OP_CWAI         ; 3C
1546 197f 63                         FCB     OP_MUL          ; 3D
1547 1980 00                         FCB     OP_INV          ; 3E
1548 1981 84                         FCB     OP_SWI          ; 3F
1549                         
1550 1982 65                         FCB     OP_NEGA         ; 40
1551 1983 00                         FCB     OP_INV          ; 41
1552 1984 00                         FCB     OP_INV          ; 42
1553 1985 2f                         FCB     OP_COMA         ; 43
1554 1986 61                         FCB     OP_LSRA         ; 44
1555 1987 00                         FCB     OP_INV          ; 45
1556 1988 73                         FCB     OP_RORA         ; 46
1557 1989 0e                         FCB     OP_ASRA         ; 47
1558 198a 0b                         FCB     OP_ASLA         ; 48
1559 198b 70                         FCB     OP_ROLA         ; 49
1560 198c 35                         FCB     OP_DECA         ; 4A
1561 198d 00                         FCB     OP_INV          ; 4B
1562 198e 3b                         FCB     OP_INCA         ; 4C
1563 198f 8a                         FCB     OP_TSTA         ; 4D
1564 1990 00                         FCB     OP_INV          ; 4E
1565 1991 26                         FCB     OP_CLRA         ; 4F
1566                         
1567 1992 66                         FCB     OP_NEGB         ; 50
1568 1993 00                         FCB     OP_INV          ; 51
1569 1994 00                         FCB     OP_INV          ; 52
1570 1995 30                         FCB     OP_COMB         ; 53
1571 1996 62                         FCB     OP_LSRB         ; 54
1572 1997 00                         FCB     OP_INV          ; 55
1573 1998 74                         FCB     OP_RORB         ; 56
1574 1999 0f                         FCB     OP_ASRB         ; 57
1575 199a 0c                         FCB     OP_ASLB         ; 58
1576 199b 71                         FCB     OP_ROLB         ; 59
1577 199c 36                         FCB     OP_DECB         ; 5A
1578 199d 00                         FCB     OP_INV          ; 5B
1579 199e 3c                         FCB     OP_INCB         ; 5C
1580 199f 8b                         FCB     OP_TSTB         ; 5D
1581 19a0 00                         FCB     OP_INV          ; 5E
1582 19a1 27                         FCB     OP_CLRB         ; 5F
1583                         
1584 19a2 64                         FCB     OP_NEG          ; 60
1585 19a3 00                         FCB     OP_INV          ; 61
1586 19a4 00                         FCB     OP_INV          ; 62
1587 19a5 31                         FCB     OP_COM          ; 63
1588 19a6 60                         FCB     OP_LSR          ; 64
1589 19a7 00                         FCB     OP_INV          ; 65
1590 19a8 72                         FCB     OP_ROR          ; 66
1591 19a9 0d                         FCB     OP_ASR          ; 67
1592 19aa 0a                         FCB     OP_ASL          ; 68
1593 19ab 6f                         FCB     OP_ROL          ; 69
1594 19ac 34                         FCB     OP_DEC          ; 6A
1595 19ad 00                         FCB     OP_INV          ; 6B
1596 19ae 3a                         FCB     OP_INC          ; 6C
1597 19af 89                         FCB     OP_TST          ; 6D
1598 19b0 3d                         FCB     OP_JMP          ; 6E
1599 19b1 25                         FCB     OP_CLR          ; 6F
1600                         
1601 19b2 64                         FCB     OP_NEG          ; 70
1602 19b3 00                         FCB     OP_INV          ; 71
1603 19b4 00                         FCB     OP_INV          ; 72
1604 19b5 31                         FCB     OP_COM          ; 73
1605 19b6 60                         FCB     OP_LSR          ; 74
1606 19b7 00                         FCB     OP_INV          ; 75
1607 19b8 72                         FCB     OP_ROR          ; 76
1608 19b9 0d                         FCB     OP_ASR          ; 77
1609 19ba 0a                         FCB     OP_ASL          ; 78
1610 19bb 6f                         FCB     OP_ROL          ; 79
1611 19bc 34                         FCB     OP_DEC          ; 7A
1612 19bd 00                         FCB     OP_INV          ; 7B
1613 19be 3a                         FCB     OP_INC          ; 7C
1614 19bf 89                         FCB     OP_TST          ; 7D
1615 19c0 3d                         FCB     OP_JMP          ; 7E
1616 19c1 25                         FCB     OP_CLR          ; 7F
1617                         
1618 19c2 81                         FCB     OP_SUBA         ; 80
1619 19c3 28                         FCB     OP_CMPA         ; 81
1620 19c4 77                         FCB     OP_SBCA         ; 82
1621 19c5 83                         FCB     OP_SUBD         ; 83
1622 19c6 07                         FCB     OP_ANDA         ; 84
1623 19c7 17                         FCB     OP_BITA         ; 85
1624 19c8 52                         FCB     OP_LDA          ; 86
1625 19c9 00                         FCB     OP_INV          ; 87
1626 19ca 37                         FCB     OP_EORA         ; 88
1627 19cb 02                         FCB     OP_ADCA         ; 89
1628 19cc 68                         FCB     OP_ORA          ; 8A
1629 19cd 04                         FCB     OP_ADDA         ; 8B
1630 19ce 2d                         FCB     OP_CMPX         ; 8C
1631 19cf 22                         FCB     OP_BSR          ; 8D
1632 19d0 57                         FCB     OP_LDX          ; 8E
1633 19d1 00                         FCB     OP_INV          ; 8F
1634                         
1635 19d2 81                         FCB     OP_SUBA         ; 90
1636 19d3 28                         FCB     OP_CMPA         ; 91
1637 19d4 77                         FCB     OP_SBCA         ; 92
1638 19d5 83                         FCB     OP_SUBD         ; 93
1639 19d6 07                         FCB     OP_ANDA         ; 94
1640 19d7 17                         FCB     OP_BITA         ; 95
1641 19d8 52                         FCB     OP_LDA          ; 96
1642 19d9 7a                         FCB     OP_STA          ; 97
1643 19da 37                         FCB     OP_EORA         ; 98
1644 19db 02                         FCB     OP_ADCA         ; 99
1645 19dc 68                         FCB     OP_ORA          ; 9A
1646 19dd 04                         FCB     OP_ADDA         ; 9B
1647 19de 2d                         FCB     OP_CMPX         ; 9C
1648 19df 3e                         FCB     OP_JSR          ; 9D
1649 19e0 57                         FCB     OP_LDX          ; 9E
1650 19e1 7f                         FCB     OP_STX          ; 9F
1651                         
1652 19e2 81                         FCB     OP_SUBA         ; A0
1653 19e3 28                         FCB     OP_CMPA         ; A1
1654 19e4 77                         FCB     OP_SBCA         ; A2
1655 19e5 83                         FCB     OP_SUBD         ; A3
1656 19e6 07                         FCB     OP_ANDA         ; A4
1657 19e7 17                         FCB     OP_BITA         ; A5
1658 19e8 52                         FCB     OP_LDA          ; A6
1659 19e9 7a                         FCB     OP_STA          ; A7
1660 19ea 37                         FCB     OP_EORA         ; A8
1661 19eb 02                         FCB     OP_ADCA         ; A9
1662 19ec 68                         FCB     OP_ORA          ; AA
1663 19ed 04                         FCB     OP_ADDA         ; AB
1664 19ee 2d                         FCB     OP_CMPX         ; AC
1665 19ef 3e                         FCB     OP_JSR          ; AD
1666 19f0 57                         FCB     OP_LDX          ; AE
1667 19f1 7f                         FCB     OP_STX          ; AF
1668                         
1669 19f2 81                         FCB     OP_SUBA         ; B0
1670 19f3 28                         FCB     OP_CMPA         ; B1
1671 19f4 77                         FCB     OP_SBCA         ; B2
1672 19f5 83                         FCB     OP_SUBD         ; B3
1673 19f6 07                         FCB     OP_ANDA         ; B4
1674 19f7 17                         FCB     OP_BITA         ; B5
1675 19f8 52                         FCB     OP_LDA          ; B6
1676 19f9 7a                         FCB     OP_STA          ; B7
1677 19fa 37                         FCB     OP_EORA         ; B8
1678 19fb 02                         FCB     OP_ADCA         ; B9
1679 19fc 68                         FCB     OP_ORA          ; BA
1680 19fd 04                         FCB     OP_ADDA         ; BB
1681 19fe 2d                         FCB     OP_CMPX         ; BC
1682 19ff 3e                         FCB     OP_JSR          ; BD
1683 1a00 57                         FCB     OP_LDX          ; BE
1684 1a01 7f                         FCB     OP_STX          ; BF
1685                         
1686 1a02 82                         FCB     OP_SUBB         ; C0
1687 1a03 29                         FCB     OP_CMPB         ; C1
1688 1a04 78                         FCB     OP_SBCB         ; C2
1689 1a05 06                         FCB     OP_ADDD         ; C3
1690 1a06 08                         FCB     OP_ANDB         ; C4
1691 1a07 18                         FCB     OP_BITB         ; C5
1692 1a08 53                         FCB     OP_LDB          ; C6
1693 1a09 00                         FCB     OP_INV          ; C7
1694 1a0a 38                         FCB     OP_EORB         ; C8
1695 1a0b 03                         FCB     OP_ADCB         ; C9
1696 1a0c 69                         FCB     OP_ORB          ; CA
1697 1a0d 05                         FCB     OP_ADDB         ; CB
1698 1a0e 54                         FCB     OP_LDD          ; CC
1699 1a0f 00                         FCB     OP_INV          ; CD
1700 1a10 56                         FCB     OP_LDU          ; CE
1701 1a11 00                         FCB     OP_INV          ; CF
1702                         
1703 1a12 82                         FCB     OP_SUBB         ; D0
1704 1a13 29                         FCB     OP_CMPB         ; D1
1705 1a14 78                         FCB     OP_SBCB         ; D2
1706 1a15 06                         FCB     OP_ADDD         ; D3
1707 1a16 08                         FCB     OP_ANDB         ; D4
1708 1a17 18                         FCB     OP_BITB         ; D5
1709 1a18 53                         FCB     OP_LDB          ; D6
1710 1a19 7b                         FCB     OP_STB          ; D7
1711 1a1a 38                         FCB     OP_EORB         ; D8
1712 1a1b 03                         FCB     OP_ADCB         ; D9
1713 1a1c 69                         FCB     OP_ORB          ; DA
1714 1a1d 05                         FCB     OP_ADDB         ; DB
1715 1a1e 54                         FCB     OP_LDD          ; DC
1716 1a1f 7c                         FCB     OP_STD          ; DD
1717 1a20 56                         FCB     OP_LDU          ; DE
1718 1a21 7e                         FCB     OP_STU          ; DF
1719                         
1720 1a22 82                         FCB     OP_SUBB         ; E0
1721 1a23 29                         FCB     OP_CMPB         ; E1
1722 1a24 78                         FCB     OP_SBCB         ; E2
1723 1a25 06                         FCB     OP_ADDD         ; E3
1724 1a26 08                         FCB     OP_ANDB         ; E4
1725 1a27 18                         FCB     OP_BITB         ; E5
1726 1a28 53                         FCB     OP_LDB          ; E6
1727 1a29 7b                         FCB     OP_STB          ; E7
1728 1a2a 38                         FCB     OP_EORB         ; E8
1729 1a2b 03                         FCB     OP_ADCB         ; E9
1730 1a2c 69                         FCB     OP_ORB          ; EA
1731 1a2d 05                         FCB     OP_ADDB         ; EB
1732 1a2e 54                         FCB     OP_LDD          ; EC
1733 1a2f 7c                         FCB     OP_STD          ; ED
1734 1a30 56                         FCB     OP_LDU          ; EE
1735 1a31 7e                         FCB     OP_STU          ; EF
1736                         
1737 1a32 82                         FCB     OP_SUBB         ; F0
1738 1a33 29                         FCB     OP_CMPB         ; F1
1739 1a34 78                         FCB     OP_SBCB         ; F2
1740 1a35 06                         FCB     OP_ADDD         ; F3
1741 1a36 08                         FCB     OP_ANDB         ; F4
1742 1a37 18                         FCB     OP_BITB         ; F5
1743 1a38 53                         FCB     OP_LDB          ; F6
1744 1a39 7b                         FCB     OP_STB          ; F7
1745 1a3a 38                         FCB     OP_EORB         ; F8
1746 1a3b 03                         FCB     OP_ADCB         ; F9
1747 1a3c 69                         FCB     OP_ORB          ; FA
1748 1a3d 05                         FCB     OP_ADDB         ; FB
1749 1a3e 54                         FCB     OP_LDD          ; FC
1750 1a3f 7c                         FCB     OP_STD          ; FD
1751 1a40 56                         FCB     OP_LDU          ; FE
1752 1a41 7e                         FCB     OP_STU          ; FF
1753                         
1754                         ; Table of addressing modes. Listed in order,indexed by op code.
1755                         MODES:
1756 1a42 04                         FCB     AM_DIRECT       ; 00
1757 1a43 00                         FCB     AM_INVALID      ; 01
1758 1a44 00                         FCB     AM_INVALID      ; 02
1759 1a45 04                         FCB     AM_DIRECT       ; 03
1760 1a46 04                         FCB     AM_DIRECT       ; 04
1761 1a47 00                         FCB     AM_INVALID      ; 05
1762 1a48 04                         FCB     AM_DIRECT       ; 06
1763 1a49 04                         FCB     AM_DIRECT       ; 07
1764 1a4a 04                         FCB     AM_DIRECT       ; 08
1765 1a4b 04                         FCB     AM_DIRECT       ; 09
1766 1a4c 04                         FCB     AM_DIRECT       ; 0A
1767 1a4d 00                         FCB     AM_INVALID      ; 0B
1768 1a4e 04                         FCB     AM_DIRECT       ; 0C
1769 1a4f 04                         FCB     AM_DIRECT       ; 0D
1770 1a50 04                         FCB     AM_DIRECT       ; 0E
1771 1a51 04                         FCB     AM_DIRECT       ; 0F
1772                         
1773 1a52 00                         FCB     AM_INVALID      ; 10 Page 2 extended opcodes (see other table)
1774 1a53 00                         FCB     AM_INVALID      ; 11 Page 3 extended opcodes (see other table)
1775 1a54 01                         FCB     AM_INHERENT     ; 12
1776 1a55 01                         FCB     AM_INHERENT     ; 13
1777 1a56 00                         FCB     AM_INVALID      ; 14
1778 1a57 00                         FCB     AM_INVALID      ; 15
1779 1a58 07                         FCB     AM_RELATIVE16   ; 16
1780 1a59 07                         FCB     AM_RELATIVE16   ; 17
1781 1a5a 00                         FCB     AM_INVALID      ; 18
1782 1a5b 01                         FCB     AM_INHERENT     ; 19
1783 1a5c 02                         FCB     AM_IMMEDIATE8   ; 1A
1784 1a5d 00                         FCB     AM_INVALID      ; 1B
1785 1a5e 02                         FCB     AM_IMMEDIATE8   ; 1C
1786 1a5f 01                         FCB     AM_INHERENT     ; 1D
1787 1a60 02                         FCB     AM_IMMEDIATE8   ; 1E
1788 1a61 02                         FCB     AM_IMMEDIATE8   ; 1F
1789                         
1790 1a62 06                         FCB     AM_RELATIVE8    ; 20
1791 1a63 06                         FCB     AM_RELATIVE8    ; 21
1792 1a64 06                         FCB     AM_RELATIVE8    ; 22
1793 1a65 06                         FCB     AM_RELATIVE8    ; 23
1794 1a66 06                         FCB     AM_RELATIVE8    ; 24
1795 1a67 06                         FCB     AM_RELATIVE8    ; 25
1796 1a68 06                         FCB     AM_RELATIVE8    ; 26
1797 1a69 06                         FCB     AM_RELATIVE8    ; 27
1798 1a6a 06                         FCB     AM_RELATIVE8    ; 28
1799 1a6b 06                         FCB     AM_RELATIVE8    ; 29
1800 1a6c 06                         FCB     AM_RELATIVE8    ; 2A
1801 1a6d 06                         FCB     AM_RELATIVE8    ; 2B
1802 1a6e 06                         FCB     AM_RELATIVE8    ; 2C
1803 1a6f 06                         FCB     AM_RELATIVE8    ; 2D
1804 1a70 06                         FCB     AM_RELATIVE8    ; 2E
1805 1a71 06                         FCB     AM_RELATIVE8    ; 2F
1806                         
1807 1a72 08                         FCB     AM_INDEXED      ; 30
1808 1a73 08                         FCB     AM_INDEXED      ; 31
1809 1a74 08                         FCB     AM_INDEXED      ; 32
1810 1a75 08                         FCB     AM_INDEXED      ; 33
1811 1a76 02                         FCB     AM_IMMEDIATE8   ; 34
1812 1a77 02                         FCB     AM_IMMEDIATE8   ; 35
1813 1a78 02                         FCB     AM_IMMEDIATE8   ; 36
1814 1a79 02                         FCB     AM_IMMEDIATE8   ; 37
1815 1a7a 00                         FCB     AM_INVALID      ; 38
1816 1a7b 01                         FCB     AM_INHERENT     ; 39
1817 1a7c 01                         FCB     AM_INHERENT     ; 3A
1818 1a7d 01                         FCB     AM_INHERENT     ; 3B
1819 1a7e 02                         FCB     AM_IMMEDIATE8   ; 3C
1820 1a7f 01                         FCB     AM_INHERENT     ; 3D
1821 1a80 00                         FCB     AM_INVALID      ; 3E
1822 1a81 01                         FCB     AM_INHERENT     ; 3F
1823                         
1824 1a82 01                         FCB     AM_INHERENT     ; 40
1825 1a83 00                         FCB     AM_INVALID      ; 41
1826 1a84 00                         FCB     AM_INVALID      ; 42
1827 1a85 01                         FCB     AM_INHERENT     ; 43
1828 1a86 01                         FCB     AM_INHERENT     ; 44
1829 1a87 00                         FCB     AM_INVALID      ; 45
1830 1a88 01                         FCB     AM_INHERENT     ; 46
1831 1a89 01                         FCB     AM_INHERENT     ; 47
1832 1a8a 01                         FCB     AM_INHERENT     ; 48
1833 1a8b 01                         FCB     AM_INHERENT     ; 49
1834 1a8c 01                         FCB     AM_INHERENT     ; 4A
1835 1a8d 00                         FCB     AM_INVALID      ; 4B
1836 1a8e 01                         FCB     AM_INHERENT     ; 4C
1837 1a8f 01                         FCB     AM_INHERENT     ; 4D
1838 1a90 00                         FCB     AM_INVALID      ; 4E
1839 1a91 01                         FCB     AM_INHERENT     ; 4F
1840                         
1841 1a92 01                         FCB     AM_INHERENT     ; 50
1842 1a93 00                         FCB     AM_INVALID      ; 51
1843 1a94 00                         FCB     AM_INVALID      ; 52
1844 1a95 01                         FCB     AM_INHERENT     ; 53
1845 1a96 01                         FCB     AM_INHERENT     ; 54
1846 1a97 00                         FCB     AM_INVALID      ; 55
1847 1a98 01                         FCB     AM_INHERENT     ; 56
1848 1a99 01                         FCB     AM_INHERENT     ; 57
1849 1a9a 01                         FCB     AM_INHERENT     ; 58
1850 1a9b 01                         FCB     AM_INHERENT     ; 59
1851 1a9c 01                         FCB     AM_INHERENT     ; 5A
1852 1a9d 00                         FCB     AM_INVALID      ; 5B
1853 1a9e 01                         FCB     AM_INHERENT     ; 5C
1854 1a9f 01                         FCB     AM_INHERENT     ; 5D
1855 1aa0 00                         FCB     AM_INVALID      ; 5E
1856 1aa1 01                         FCB     AM_INHERENT     ; 5F
1857                         
1858 1aa2 08                         FCB     AM_INDEXED      ; 60
1859 1aa3 00                         FCB     AM_INVALID      ; 61
1860 1aa4 00                         FCB     AM_INVALID      ; 62
1861 1aa5 08                         FCB     AM_INDEXED      ; 63
1862 1aa6 08                         FCB     AM_INDEXED      ; 64
1863 1aa7 00                         FCB     AM_INVALID      ; 65
1864 1aa8 08                         FCB     AM_INDEXED      ; 66
1865 1aa9 08                         FCB     AM_INDEXED      ; 67
1866 1aaa 08                         FCB     AM_INDEXED      ; 68
1867 1aab 08                         FCB     AM_INDEXED      ; 69
1868 1aac 08                         FCB     AM_INDEXED      ; 6A
1869 1aad 00                         FCB     AM_INVALID      ; 6B
1870 1aae 08                         FCB     AM_INDEXED      ; 6C
1871 1aaf 08                         FCB     AM_INDEXED      ; 6D
1872 1ab0 08                         FCB     AM_INDEXED      ; 6E
1873 1ab1 08                         FCB     AM_INDEXED      ; 6F
1874                         
1875 1ab2 05                         FCB     AM_EXTENDED     ; 70
1876 1ab3 00                         FCB     AM_INVALID      ; 71
1877 1ab4 00                         FCB     AM_INVALID      ; 72
1878 1ab5 05                         FCB     AM_EXTENDED     ; 73
1879 1ab6 05                         FCB     AM_EXTENDED     ; 74
1880 1ab7 00                         FCB     AM_INVALID      ; 75
1881 1ab8 05                         FCB     AM_EXTENDED     ; 76
1882 1ab9 05                         FCB     AM_EXTENDED     ; 77
1883 1aba 05                         FCB     AM_EXTENDED     ; 78
1884 1abb 05                         FCB     AM_EXTENDED     ; 79
1885 1abc 05                         FCB     AM_EXTENDED     ; 7A
1886 1abd 00                         FCB     AM_INVALID      ; 7B
1887 1abe 05                         FCB     AM_EXTENDED     ; 7C
1888 1abf 05                         FCB     AM_EXTENDED     ; 7D
1889 1ac0 05                         FCB     AM_EXTENDED     ; 7E
1890 1ac1 05                         FCB     AM_EXTENDED     ; 7F
1891                         
1892 1ac2 02                         FCB     AM_IMMEDIATE8   ; 80
1893 1ac3 02                         FCB     AM_IMMEDIATE8   ; 81
1894 1ac4 02                         FCB     AM_IMMEDIATE8   ; 82
1895 1ac5 03                         FCB     AM_IMMEDIATE16  ; 83
1896 1ac6 02                         FCB     AM_IMMEDIATE8   ; 84
1897 1ac7 02                         FCB     AM_IMMEDIATE8   ; 85
1898 1ac8 02                         FCB     AM_IMMEDIATE8   ; 86
1899 1ac9 00                         FCB     AM_INVALID      ; 87
1900 1aca 02                         FCB     AM_IMMEDIATE8   ; 88
1901 1acb 02                         FCB     AM_IMMEDIATE8   ; 89
1902 1acc 02                         FCB     AM_IMMEDIATE8   ; 8A
1903 1acd 02                         FCB     AM_IMMEDIATE8   ; 8B
1904 1ace 03                         FCB     AM_IMMEDIATE16  ; 8C
1905 1acf 06                         FCB     AM_RELATIVE8    ; 8D
1906 1ad0 03                         FCB     AM_IMMEDIATE16  ; 8E
1907 1ad1 00                         FCB     AM_INVALID      ; 8F
1908                         
1909 1ad2 04                         FCB     AM_DIRECT       ; 90
1910 1ad3 04                         FCB     AM_DIRECT       ; 91
1911 1ad4 04                         FCB     AM_DIRECT       ; 92
1912 1ad5 04                         FCB     AM_DIRECT       ; 93
1913 1ad6 04                         FCB     AM_DIRECT       ; 94
1914 1ad7 04                         FCB     AM_DIRECT       ; 95
1915 1ad8 04                         FCB     AM_DIRECT       ; 96
1916 1ad9 04                         FCB     AM_DIRECT       ; 97
1917 1ada 04                         FCB     AM_DIRECT       ; 98
1918 1adb 04                         FCB     AM_DIRECT       ; 99
1919 1adc 04                         FCB     AM_DIRECT       ; 9A
1920 1add 04                         FCB     AM_DIRECT       ; 9B
1921 1ade 04                         FCB     AM_DIRECT       ; 9C
1922 1adf 04                         FCB     AM_DIRECT       ; 9D
1923 1ae0 04                         FCB     AM_DIRECT       ; 9E
1924 1ae1 04                         FCB     AM_DIRECT       ; 9F
1925                         
1926 1ae2 08                         FCB     AM_INDEXED      ; A0
1927 1ae3 08                         FCB     AM_INDEXED      ; A1
1928 1ae4 08                         FCB     AM_INDEXED      ; A2
1929 1ae5 08                         FCB     AM_INDEXED      ; A3
1930 1ae6 08                         FCB     AM_INDEXED      ; A4
1931 1ae7 08                         FCB     AM_INDEXED      ; A5
1932 1ae8 08                         FCB     AM_INDEXED      ; A6
1933 1ae9 08                         FCB     AM_INDEXED      ; A7
1934 1aea 08                         FCB     AM_INDEXED      ; A8
1935 1aeb 08                         FCB     AM_INDEXED      ; A9
1936 1aec 08                         FCB     AM_INDEXED      ; AA
1937 1aed 08                         FCB     AM_INDEXED      ; AB
1938 1aee 08                         FCB     AM_INDEXED      ; AC
1939 1aef 08                         FCB     AM_INDEXED      ; AD
1940 1af0 08                         FCB     AM_INDEXED      ; AE
1941 1af1 08                         FCB     AM_INDEXED      ; AF
1942                         
1943 1af2 05                         FCB     AM_EXTENDED     ; B0
1944 1af3 05                         FCB     AM_EXTENDED     ; B1
1945 1af4 05                         FCB     AM_EXTENDED     ; B2
1946 1af5 05                         FCB     AM_EXTENDED     ; B3
1947 1af6 05                         FCB     AM_EXTENDED     ; B4
1948 1af7 05                         FCB     AM_EXTENDED     ; B5
1949 1af8 05                         FCB     AM_EXTENDED     ; B6
1950 1af9 05                         FCB     AM_EXTENDED     ; B7
1951 1afa 05                         FCB     AM_EXTENDED     ; B8
1952 1afb 05                         FCB     AM_EXTENDED     ; B9
1953 1afc 05                         FCB     AM_EXTENDED     ; BA
1954 1afd 05                         FCB     AM_EXTENDED     ; BB
1955 1afe 05                         FCB     AM_EXTENDED     ; BC
1956 1aff 05                         FCB     AM_EXTENDED     ; BD
1957 1b00 05                         FCB     AM_EXTENDED     ; BE
1958 1b01 05                         FCB     AM_EXTENDED     ; BF
1959                         
1960 1b02 02                         FCB     AM_IMMEDIATE8   ; C0
1961 1b03 02                         FCB     AM_IMMEDIATE8   ; C1
1962 1b04 02                         FCB     AM_IMMEDIATE8   ; C2
1963 1b05 03                         FCB     AM_IMMEDIATE16  ; C3
1964 1b06 02                         FCB     AM_IMMEDIATE8   ; C4
1965 1b07 02                         FCB     AM_IMMEDIATE8   ; C5
1966 1b08 02                         FCB     AM_IMMEDIATE8   ; C6
1967 1b09 00                         FCB     AM_INVALID      ; C7
1968 1b0a 02                         FCB     AM_IMMEDIATE8   ; C8
1969 1b0b 02                         FCB     AM_IMMEDIATE8   ; C9
1970 1b0c 02                         FCB     AM_IMMEDIATE8   ; CA
1971 1b0d 02                         FCB     AM_IMMEDIATE8   ; CB
1972 1b0e 02                         FCB     AM_IMMEDIATE8   ; CC
1973 1b0f 01                         FCB     AM_INHERENT     ; CD
1974 1b10 02                         FCB     AM_IMMEDIATE8   ; CE
1975 1b11 00                         FCB     AM_INVALID      ; CF
1976                         
1977 1b12 04                         FCB     AM_DIRECT       ; D0
1978 1b13 04                         FCB     AM_DIRECT       ; D1
1979 1b14 04                         FCB     AM_DIRECT       ; D2
1980 1b15 04                         FCB     AM_DIRECT       ; D3
1981 1b16 04                         FCB     AM_DIRECT       ; D4
1982 1b17 04                         FCB     AM_DIRECT       ; D5
1983 1b18 04                         FCB     AM_DIRECT       ; D6
1984 1b19 04                         FCB     AM_DIRECT       ; D7
1985 1b1a 04                         FCB     AM_DIRECT       ; D8
1986 1b1b 04                         FCB     AM_DIRECT       ; D9
1987 1b1c 04                         FCB     AM_DIRECT       ; DA
1988 1b1d 04                         FCB     AM_DIRECT       ; DB
1989 1b1e 04                         FCB     AM_DIRECT       ; DC
1990 1b1f 04                         FCB     AM_DIRECT       ; DD
1991 1b20 04                         FCB     AM_DIRECT       ; DE
1992 1b21 04                         FCB     AM_DIRECT       ; DF
1993                         
1994 1b22 08                         FCB     AM_INDEXED      ; E0
1995 1b23 08                         FCB     AM_INDEXED      ; E1
1996 1b24 08                         FCB     AM_INDEXED      ; E2
1997 1b25 08                         FCB     AM_INDEXED      ; E3
1998 1b26 08                         FCB     AM_INDEXED      ; E4
1999 1b27 08                         FCB     AM_INDEXED      ; E5
2000 1b28 08                         FCB     AM_INDEXED      ; E6
2001 1b29 08                         FCB     AM_INDEXED      ; E7
2002 1b2a 08                         FCB     AM_INDEXED      ; E8
2003 1b2b 08                         FCB     AM_INDEXED      ; E9
2004 1b2c 08                         FCB     AM_INDEXED      ; EA
2005 1b2d 08                         FCB     AM_INDEXED      ; EB
2006 1b2e 08                         FCB     AM_INDEXED      ; EC
2007 1b2f 08                         FCB     AM_INDEXED      ; ED
2008 1b30 08                         FCB     AM_INDEXED      ; EE
2009 1b31 08                         FCB     AM_INDEXED      ; EF
2010                         
2011 1b32 05                         FCB     AM_EXTENDED     ; F0
2012 1b33 05                         FCB     AM_EXTENDED     ; F1
2013 1b34 05                         FCB     AM_EXTENDED     ; F2
2014 1b35 05                         FCB     AM_EXTENDED     ; F3
2015 1b36 05                         FCB     AM_EXTENDED     ; F4
2016 1b37 05                         FCB     AM_EXTENDED     ; F5
2017 1b38 05                         FCB     AM_EXTENDED     ; F6
2018 1b39 05                         FCB     AM_EXTENDED     ; F7
2019 1b3a 05                         FCB     AM_EXTENDED     ; F8
2020 1b3b 05                         FCB     AM_EXTENDED     ; F9
2021 1b3c 05                         FCB     AM_EXTENDED     ; FA
2022 1b3d 05                         FCB     AM_EXTENDED     ; FB
2023 1b3e 05                         FCB     AM_EXTENDED     ; FC
2024 1b3f 05                         FCB     AM_EXTENDED     ; FD
2025 1b40 05                         FCB     AM_EXTENDED     ; FE
2026 1b41 05                         FCB     AM_EXTENDED     ; FF
2027                         
2028                         ; Special table for page 2 instructions prefixed by $10.
2029                         ; Format: opcode (less 10), instruction, addressing mode
2030                         
2031                         PAGE2:
2032 1b42 21 4e 07                   FCB     $21, OP_LBRN,  AM_RELATIVE16
2033 1b45 22 44 07                   FCB     $22, OP_LBHI,  AM_RELATIVE16
2034 1b48 23 48 07                   FCB     $23, OP_LBLS,  AM_RELATIVE16
2035 1b4b 24 45 07                   FCB     $24, OP_LBHS,  AM_RELATIVE16
2036 1b4e 25 40 07                   FCB     $25, OP_LBCS,  AM_RELATIVE16
2037 1b51 26 4b 07                   FCB     $26, OP_LBNE,  AM_RELATIVE16
2038 1b54 27 41 07                   FCB     $27, OP_LBEQ,  AM_RELATIVE16
2039 1b57 28 50 07                   FCB     $28, OP_LBVC,  AM_RELATIVE16
2040 1b5a 29 51 07                   FCB     $29, OP_LBVS,  AM_RELATIVE16
2041 1b5d 2a 4c 07                   FCB     $2A, OP_LBPL,  AM_RELATIVE16
2042 1b60 2b 4a 07                   FCB     $2B, OP_LBMI,  AM_RELATIVE16
2043 1b63 2c 42 07                   FCB     $2C, OP_LBGE,  AM_RELATIVE16
2044 1b66 2d 49 07                   FCB     $2D, OP_LBLT,  AM_RELATIVE16
2045 1b69 2e 43 07                   FCB     $2E, OP_LBGT,  AM_RELATIVE16
2046 1b6c 2f 46 07                   FCB     $2F, OP_LBLE,  AM_RELATIVE16
2047 1b6f 3f 85 01                   FCB     $3F, OP_SWI2,  AM_INHERENT
2048 1b72 83 2a 03                   FCB     $83, OP_CMPD,  AM_IMMEDIATE16
2049 1b75 8c 2e 03                   FCB     $8C, OP_CMPY,  AM_IMMEDIATE16
2050 1b78 8e 58 03                   FCB     $8E, OP_LDY,   AM_IMMEDIATE16
2051 1b7b 93 2a 04                   FCB     $93, OP_CMPD,  AM_DIRECT
2052 1b7e 9c 2e 04                   FCB     $9C, OP_CMPY,  AM_DIRECT
2053 1b81 9e 58 04                   FCB     $9E, OP_LDY,   AM_DIRECT
2054 1b84 9d 80 04                   FCB     $9D, OP_STY,   AM_DIRECT
2055 1b87 a3 2a 08                   FCB     $A3, OP_CMPD,  AM_INDEXED
2056 1b8a ac 2e 08                   FCB     $AC, OP_CMPY,  AM_INDEXED
2057 1b8d ae 58 08                   FCB     $AE, OP_LDY,   AM_INDEXED
2058 1b90 af 80 08                   FCB     $AF, OP_STY,   AM_INDEXED
2059 1b93 b3 2a 05                   FCB     $B3, OP_CMPD,  AM_EXTENDED
2060 1b96 bc 2e 05                   FCB     $BC, OP_CMPY,  AM_EXTENDED
2061 1b99 be 58 05                   FCB     $BE, OP_LDY,   AM_EXTENDED
2062 1b9c bf 80 05                   FCB     $BF, OP_STY,   AM_EXTENDED
2063 1b9f ce 55 03                   FCB     $CE, OP_LDS,   AM_IMMEDIATE16
2064 1ba2 de 55 04                   FCB     $DE, OP_LDS,   AM_DIRECT
2065 1ba5 dd 7d 04                   FCB     $DD, OP_STS,   AM_DIRECT
2066 1ba8 ee 55 08                   FCB     $EE, OP_LDS,   AM_INDEXED
2067 1bab ef 7d 08                   FCB     $EF, OP_STS,   AM_INDEXED
2068 1bae fe 55 05                   FCB     $FE, OP_LDS,   AM_EXTENDED
2069 1bb1 ff 7d 05                   FCB     $FF, OP_STS,   AM_EXTENDED
2070 1bb4 00                         FCB     0                             ; indicates end of table
2071                         
2072                         ; Special table for page 3 instructions prefixed by $11.
2073                         ; Same format as table above.
2074                         
2075                         PAGE3:
2076 1bb5 3f 86 01                   FCB     $3F, OP_SWI3,  AM_INHERENT
2077 1bb8 83 2c 03                   FCB     $83, OP_CMPU,  AM_IMMEDIATE16
2078 1bbb 8c 2b 03                   FCB     $8C, OP_CMPS,  AM_IMMEDIATE16
2079 1bbe 93 2c 04                   FCB     $93, OP_CMPU,  AM_DIRECT
2080 1bc1 9c 2b 04                   FCB     $9C, OP_CMPS,  AM_DIRECT
2081 1bc4 a3 2c 08                   FCB     $A3, OP_CMPU,  AM_INDEXED
2082 1bc7 ac 2b 08                   FCB     $AC, OP_CMPS,  AM_INDEXED
2083 1bca b3 2c 05                   FCB     $B3, OP_CMPU,  AM_EXTENDED
2084 1bcd bc 2b 05                   FCB     $BC, OP_CMPS,  AM_EXTENDED
2085 1bd0 00                         FCB     0                             ; indicates end of table
2086                         
2087                         ; Display strings. Should be terminated in EOT character.
2088                         
2089 1bd1 3b 20 49 4e 56 41  MSG1:   FCC     "; INVALID"
     4c 49 44
2090 1bda 04                         FCB     EOT
2091                         
2092 1bdb 50 52 45 53 53 20  MSG2:   FCC     "PRESS <SPACE> TO CONTINUE, <Q> TO QUIT "
     3c 53 50 41 43 45
     3e 20 54 4f 20 43
     4f 4e 54 49 4e 55
     45 2c 20 3c 51 3e
     20 54 4f 20 51 55
     49 54 20
2093 1c02 04                         FCB     EOT
2094                         
2095 1c03 50 43 52           MSG3:   FCC     "PCR"
2096 1c06 04                         FCB     EOT
