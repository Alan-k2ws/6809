0001                         ;
0002                         ; 6809 Disassembler
0003                         ;
0004                         ; Copyright (C) 2019 by Jeff Tranter <tranter@pobox.com>
0005                         ;
0006                         ; Licensed under the Apache License, Version 2.0 (the "License");
0007                         ; you may not use this file except in compliance with the License.
0008                         ; You may obtain a copy of the License at
0009                         ;
0010                         ;   http://www.apache.org/licenses/LICENSE-2.0
0011                         ;
0012                         ; Unless required by applicable law or agreed to in writing, software
0013                         ; distributed under the License is distributed on an "AS IS" BASIS,
0014                         ; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0015                         ; See the License for the specific language governing permissions and
0016                         ; limitations under the License.
0017                         ;
0018                         ; Revision History
0019                         ; Version Date         Comments
0020                         ; 0.0     29-Jan-2019  First version started, based on 6502 code.
0021                         ; 0.1     03-Feb-2019  All instructions now supported.
0022                         ;
0023                         ; To Do:
0024                         ; - Other TODOs in code
0025                         ; - Add option to suppress data bytes in output (for feeding back into assembler)
0026                         ; - Add option to show invalid opcodes as constants
0027                         ; - Some unwanted spaces in output due to use of ASSIST09 routines
0028                         
0029                         ; Character defines
0030                         
0031 0004                    EOT     EQU     $04             ; String terminator
0032 000a                    LF      EQU     $0A             ; Line feed
0033 000d                    CR      EQU     $0D             ; Carriage return
0034 0020                    SP      EQU     $20             ; Space
0035                         
0036 0018                    PAGELEN EQU     24              ; Number of instructions to show before waiting for keypress
0037                         
0038                         ; ASSIST09 SWI call numbers
0039                         
0040 0000                    INCHNP  EQU     0               ; INPUT CHAR IN A REG - NO PARITY
0041 0001                    OUTCH   EQU     1               ; OUTPUT CHAR FROM A REG
0042 0002                    PDATA1  EQU     2               ; OUTPUT STRING
0043 0003                    PDATA   EQU     3               ; OUTPUT CR/LF THEN STRING
0044 0004                    OUT2HS  EQU     4               ; OUTPUT TWO HEX AND SPACE
0045 0005                    OUT4HS  EQU     5               ; OUTPUT FOUR HEX AND SPACE
0046 0006                    PCRLF   EQU     6               ; OUTPUT CR/LF
0047 0007                    SPACE   EQU     7               ; OUTPUT A SPACE
0048 0008                    MONITR  EQU     8               ; ENTER ASSIST09 MONITOR
0049 0009                    VCTRSW  EQU     9               ; VECTOR EXAMINE/SWITCH
0050 000a                    BRKPT   EQU     10              ; USER PROGRAM BREAKPOINT
0051 000b                    PAUSE   EQU     11              ; TASK PAUSE FUNCTION
0052                         
0053                         ; Start address
0054 1000                            ORG     $1000
0055 1000 20 0d                      BRA     MAIN            ; So start address stays constant
0056                         
0057                         ; Variables
0058                         
0059 1002                    ADDR    RMB     2               ; Current address to disassemble
0060 1004                    OPCODE  RMB     1               ; Opcode of instruction
0061 1005                    AM      RMB     1               ; Addressing mode of instruction
0062 1006                    OPTYPE  RMB     1               ; Instruction type
0063 1007                    POSTBYT RMB     1               ; Post byte (for indexed addressing)
0064 1008                    LEN     RMB     1               ; Length of instruction
0065 1009                    TEMP    RMB     2               ; Temp variable (used by print routines)
0066 100b                    TEMP1   RMB     2               ; Temp variable
0067 100d                    FIRST   RMB     1               ; Flag used to indicate first time an item printed
0068 100e                    PAGE23  RMB     1               ; Flag indicating page2/3 instruction when non-zero
0069                         
0070                         ; Instructions. Matches indexes into entries in table MNEMONICS.
0071                         
0072 0000                    OP_INV   EQU    $00
0073 0001                    OP_ABX   EQU    $01
0074 0002                    OP_ADCA  EQU    $02
0075 0003                    OP_ADCB  EQU    $03
0076 0004                    OP_ADDA  EQU    $04
0077 0005                    OP_ADDB  EQU    $05
0078 0006                    OP_ADDD  EQU    $06
0079 0007                    OP_ANDA  EQU    $07
0080 0008                    OP_ANDB  EQU    $08
0081 0009                    OP_ANDCC EQU    $09
0082 000a                    OP_ASL   EQU    $0A
0083 000b                    OP_ASLA  EQU    $0B
0084 000c                    OP_ASLB  EQU    $0C
0085 000d                    OP_ASR   EQU    $0D
0086 000e                    OP_ASRA  EQU    $0E
0087 000f                    OP_ASRB  EQU    $0F
0088 0010                    OP_BCC   EQU    $10
0089 0011                    OP_BCS   EQU    $11
0090 0012                    OP_BEQ   EQU    $12
0091 0013                    OP_BGE   EQU    $13
0092 0014                    OP_BGT   EQU    $14
0093 0015                    OP_BHI   EQU    $15
0094 0016                    OP_BITA  EQU    $16
0095 0017                    OP_BITB  EQU    $17
0096 0018                    OP_BLE   EQU    $18
0097 0019                    OP_BLS   EQU    $19
0098 001a                    OP_BLT   EQU    $1A
0099 001b                    OP_BMI   EQU    $1B
0100 001c                    OP_BNE   EQU    $1C
0101 001d                    OP_BPL   EQU    $1D
0102 001e                    OP_BRA   EQU    $1E
0103 001f                    OP_BRN   EQU    $1F
0104 0020                    OP_BSR   EQU    $20
0105 0021                    OP_BVC   EQU    $21
0106 0022                    OP_BVS   EQU    $22
0107 0023                    OP_CLR   EQU    $23
0108 0024                    OP_CLRA  EQU    $24
0109 0025                    OP_CLRB  EQU    $25
0110 0026                    OP_CMPA  EQU    $26
0111 0027                    OP_CMPB  EQU    $27
0112 0028                    OP_CMPD  EQU    $28
0113 0029                    OP_CMPS  EQU    $29
0114 002a                    OP_CMPU  EQU    $2A
0115 002b                    OP_CMPX  EQU    $2B
0116 002c                    OP_CMPY  EQU    $2C
0117 002d                    OP_COMA  EQU    $2D
0118 002e                    OP_COMB  EQU    $2E
0119 002f                    OP_COM   EQU    $2F
0120 0030                    OP_CWAI  EQU    $30
0121 0031                    OP_DAA   EQU    $31
0122 0032                    OP_DEC   EQU    $32
0123 0033                    OP_DECA  EQU    $33
0124 0034                    OP_DECB  EQU    $34
0125 0035                    OP_EORA  EQU    $35
0126 0036                    OP_EORB  EQU    $36
0127 0037                    OP_EXG   EQU    $37
0128 0038                    OP_INC   EQU    $38
0129 0039                    OP_INCA  EQU    $39
0130 003a                    OP_INCB  EQU    $3A
0131 003b                    OP_JMP   EQU    $3B
0132 003c                    OP_JSR   EQU    $3C
0133 003d                    OP_LBCC  EQU    $3D
0134 003e                    OP_LBCS  EQU    $3E
0135 003f                    OP_LBEQ  EQU    $3F
0136 0040                    OP_LBGE  EQU    $40
0137 0041                    OP_LBGT  EQU    $41
0138 0042                    OP_LBHI  EQU    $42
0139 0043                    OP_LBLE  EQU    $43
0140 0044                    OP_LBLS  EQU    $44
0141 0045                    OP_LBLT  EQU    $45
0142 0046                    OP_LBMI  EQU    $46
0143 0047                    OP_LBNE  EQU    $47
0144 0048                    OP_LBPL  EQU    $48
0145 0049                    OP_LBRA  EQU    $49
0146 004a                    OP_LBRN  EQU    $4A
0147 004b                    OP_LBSR  EQU    $4B
0148 004c                    OP_LBVC  EQU    $4C
0149 004d                    OP_LBVS  EQU    $4D
0150 004e                    OP_LDA   EQU    $4E
0151 004f                    OP_LDB   EQU    $4F
0152 0050                    OP_LDD   EQU    $50
0153 0051                    OP_LDS   EQU    $51
0154 0052                    OP_LDU   EQU    $52
0155 0053                    OP_LDX   EQU    $53
0156 0054                    OP_LDY   EQU    $54
0157 0055                    OP_LEAS  EQU    $55
0158 0056                    OP_LEAU  EQU    $56
0159 0057                    OP_LEAX  EQU    $57
0160 0058                    OP_LEAY  EQU    $58
0161 0059                    OP_LSR   EQU    $59
0162 005a                    OP_LSRA  EQU    $5A
0163 005b                    OP_LSRB  EQU    $5B
0164 005c                    OP_MUL   EQU    $5C
0165 005d                    OP_NEG   EQU    $5D
0166 005e                    OP_NEGA  EQU    $5E
0167 005f                    OP_NEGB  EQU    $5F
0168 0060                    OP_NOP   EQU    $60
0169 0061                    OP_ORA   EQU    $61
0170 0062                    OP_ORB   EQU    $62
0171 0063                    OP_ORCC  EQU    $63
0172 0064                    OP_PSHS  EQU    $64
0173 0065                    OP_PSHU  EQU    $65
0174 0066                    OP_PULS  EQU    $66
0175 0067                    OP_PULU  EQU    $67
0176 0068                    OP_ROL   EQU    $68
0177 0069                    OP_ROLA  EQU    $69
0178 006a                    OP_ROLB  EQU    $6A
0179 006b                    OP_ROR   EQU    $6B
0180 006c                    OP_RORA  EQU    $6C
0181 006d                    OP_RORB  EQU    $6D
0182 006e                    OP_RTI   EQU    $6E
0183 006f                    OP_RTS   EQU    $6F
0184 0070                    OP_SBCA  EQU    $70
0185 0071                    OP_SBCB  EQU    $71
0186 0072                    OP_SEX   EQU    $72
0187 0073                    OP_STA   EQU    $73
0188 0074                    OP_STB   EQU    $74
0189 0075                    OP_STD   EQU    $75
0190 0076                    OP_STS   EQU    $76
0191 0077                    OP_STU   EQU    $77
0192 0078                    OP_STX   EQU    $78
0193 0079                    OP_STY   EQU    $79
0194 007a                    OP_SUBA  EQU    $7A
0195 007b                    OP_SUBB  EQU    $7B
0196 007c                    OP_SUBD  EQU    $7C
0197 007d                    OP_SWI   EQU    $7D
0198 007e                    OP_SWI2  EQU    $7E
0199 007f                    OP_SWI3  EQU    $7F
0200 0080                    OP_SYNC  EQU    $80
0201 0081                    OP_TFR   EQU    $81
0202 0082                    OP_TST   EQU    $82
0203 0083                    OP_TSTA  EQU    $83
0204 0084                    OP_TSTB  EQU    $84
0205                         
0206                         ; Addressing Modes. OPCODES table lists these for each instruction.
0207                         ; LENGTHS lists the instruction length for each addressing mode.
0208                         ; Need to distinguish relative modes that are 2 and 3 (long) bytes.
0209                         ; Some immediate are 2 and some 3 bytes.
0210                         ; Indexed modes can be longer depending on postbyte.
0211                         ; Page 2 and 3 opcodes are one byte longer (prefixed by 10 or 11)
0212                         
0213 0000                    AM_INVALID      EQU     0       ; $01 (1)
0214 0001                    AM_INHERENT     EQU     1       ; RTS (1)
0215 0002                    AM_IMMEDIATE8   EQU     2       ; LDA #$12 (2)
0216 0003                    AM_IMMEDIATE16  EQU     3       ; LDD #$1234 (3)
0217 0004                    AM_DIRECT       EQU     4       ; LDA $12 (2)
0218 0005                    AM_EXTENDED     EQU     5       ; LDA $1234 (3)
0219 0006                    AM_RELATIVE8    EQU     6       ; BSR $1234 (2)
0220 0007                    AM_RELATIVE16   EQU     7       ; LBSR $1234 (3)
0221 0008                    AM_INDEXED      EQU     8       ; LDA 0,X (2+)
0222                         
0223                         ; *** CODE ***
0224                         
0225                         ; Main program. Disassembles a page at a time.
0226                         
0227 100f 8e 10 0f           MAIN    LDX     #MAIN           ; Starting address for disassembly (this code)
0228 1012 bf 10 02                   STX     ADDR            ; Store it
0229 1015 86 18              PAGE    LDA     #PAGELEN        ; Number of instruction to disassemble per page
0230 1017 34 02              DIS     PSHS    A               ; Save A
0231 1019 17 00 97                   LBSR    DISASM          ; Do disassembly of one instruction
0232 101c 35 02                      PULS    A               ; Restore A
0233 101e 4a                         DECA                    ; Decrement count
0234 101f 26 f6                      BNE     DIS             ; Go back and repeat until a page has been done
0235 1021 30 8d 0b 80                LEAX    MSG2,PCR        ; Display message to press a key
0236 1025 17 00 84                   LBSR    PrintString
0237 1028 8d 63              BADKEY  BSR     GetChar         ; Wait for keyboard input
0238 102a 8d 11                      BSR     PrintCR
0239 102c 81 20                      CMPA    #SP             ; Space key pressed?
0240 102e 27 e5                      BEQ     PAGE            ; If so, display next page
0241 1030 81 51                      CMPA    #'Q             ; Q key pressed?
0242 1032 27 08                      BEQ     RETN            ; If so, return
0243 1034 81 71                      CMPA    #'q             ; q key pressed?
0244 1036 27 04                      BEQ     RETN            ; If so, return
0245 1038 8d 72                      BSR     PrintString     ; Bad key, prompt and try again
0246 103a 20 ec                      BRA     BADKEY
0247 103c 39                 RETN    RTS                     ; Return to caller
0248                         
0249                         ; *** Utility Functions ***
0250                         ; Some of these call ASSIST09 ROM monitor routines.
0251                         
0252                         ; Print CR/LF to the console.
0253                         ; Registers changed: none
0254                         PrintCR
0255 103d 34 02                      PSHS    A               ; Save A
0256 103f 86 0d                      LDA     #CR
0257 1041 8d 47                      BSR     PrintChar
0258 1043 86 0a                      LDA     #LF
0259 1045 8d 43                      BSR     PrintChar
0260 1047 35 02                      PULS    A               ; Restore A
0261 1049 39                         RTS
0262                         
0263                         ; Print dollar sign to the console.
0264                         ; Registers changed: none
0265                         PrintDollar
0266 104a 34 02                      PSHS    A               ; Save A
0267 104c 86 24                      LDA     #'$
0268 104e 8d 3a                      BSR     PrintChar
0269 1050 35 02                      PULS    A               ; Restore A
0270 1052 39                         RTS
0271                         
0272                         ; Print comma to the console.
0273                         ; Registers changed: none
0274                         PrintComma
0275 1053 34 02                      PSHS    A               ; Save A
0276 1055 86 2c                      LDA     #',
0277 1057 8d 31                      BSR     PrintChar
0278 1059 35 02                      PULS    A               ; Restore A
0279 105b 39                         RTS
0280                         
0281                         ; Print left square bracket to the console.
0282                         ; Registers changed: none
0283                         PrintLBracket
0284 105c 34 02                      PSHS    A               ; Save A
0285 105e 86 5b                      LDA     #'[
0286 1060 8d 28                      BSR     PrintChar
0287 1062 35 02                      PULS    A               ; Restore A
0288 1064 39                         RTS
0289                         
0290                         ; Print right square bracket to the console.
0291                         ; Registers changed: none
0292                         PrintRBracket
0293 1065 34 02                      PSHS    A               ; Save A
0294 1067 86 5d                      LDA     #']
0295 1069 8d 1f                      BSR     PrintChar
0296 106b 35 02                      PULS    A               ; Restore A
0297 106d 39                         RTS
0298                         
0299                         ; Print space sign to the console.
0300                         ; Registers changed: none
0301                         PrintSpace
0302 106e 3f                         SWI
0303 106f 07                         FCB     SPACE
0304 1070 39                         RTS
0305                         
0306                         ; Print two spaces to the console.
0307                         ; Registers changed: none
0308                         Print2Spaces
0309 1071 34 02                      PSHS    A               ; Save A
0310 1073 86 20                      LDA     #SP
0311 1075 8d 13                      BSR     PrintChar
0312 1077 8d 11                      BSR     PrintChar
0313 1079 35 02                      PULS    A               ; Restore A
0314 107b 39                         RTS
0315                         
0316                         ; Print several space characters.
0317                         ; A contains number of spaces to print.
0318                         ; Registers changed: none
0319                         PrintSpaces
0320 107c 34 02                      PSHS    A               ; Save registers used
0321 107e 81 00              PS1     CMPA    #0              ; Is count zero?
0322 1080 27 05                      BEQ     PS2             ; Is so, done
0323 1082 8d ea                      BSR     PrintSpace      ; Print a space
0324 1084 4a                         DECA                    ; Decrement count
0325 1085 20 f7                      BRA     PS1             ; Check again
0326 1087 35 02              PS2     PULS    A               ; Restore registers used
0327 1089 39                         RTS
0328                         
0329                         ; Print character to the console
0330                         ; A contains character to print.
0331                         ; Registers changed: none
0332                         PrintChar
0333 108a 3f                         SWI                     ; Call ASSIST09 monitor function
0334 108b 01                         FCB     OUTCH           ; Service code byte
0335 108c 39                         RTS
0336                         
0337                         ; Get character from the console
0338                         ; A contains character read. Blocks until key pressed. Character is
0339                         ; echoed. Ignores NULL ($00) and RUBOUT ($7F). CR ($OD) is converted
0340                         ; to LF ($0A).
0341                         ; Registers changed: none (flags may change). Returns char in A.
0342                         GetChar
0343 108d 3f                         SWI                     ; Call ASSIST09 monitor function
0344 108e 00                         FCB     INCHNP          ; Service code byte
0345 108f 39                         RTS
0346                         
0347                         ; Print a byte as two hex digits followed by a space.
0348                         ; A contains byte to print.
0349                         ; Registers changed: none
0350                         PrintByte
0351 1090 34 16                      PSHS    A,B,X           ; Save registers used
0352 1092 b7 10 09                   STA     TEMP            ; Needs to be in memory so we can point to it
0353 1095 30 8d ff 70                LEAX    TEMP,PCR        ; Get pointer to it
0354 1099 3f                         SWI                     ; Call ASSIST09 monitor function
0355 109a 04                         FCB     OUT2HS          ; Service code byte
0356 109b 35 16                      PULS    X,B,A           ; Restore registers used
0357 109d 39                         RTS
0358                         
0359                         ; Print a word as four hex digits followed by a space.
0360                         ; X contains word to print.
0361                         ; Registers changed: none
0362                         PrintAddress
0363 109e 34 16                      PSHS    A,B,X           ; Save registers used
0364 10a0 bf 10 09                   STX     TEMP            ; Needs to be in memory so we can point to it
0365 10a3 30 8d ff 62                LEAX    TEMP,PCR        ; Get pointer to it
0366 10a7 3f                         SWI                     ; Call ASSIST09 monitor function
0367 10a8 05                         FCB     OUT4HS          ; Service code byte
0368 10a9 35 16                      PULS    X,B,A           ; Restore registers used
0369 10ab 39                         RTS
0370                         
0371                         ; Print a string.
0372                         ; X points to start of string to display.
0373                         ; String must be terminated in EOT character.
0374                         ; Registers changed: none
0375                         PrintString
0376 10ac 34 10                      PSHS    X               ; Save registers used
0377 10ae 3f                         SWI                     ; Call ASSIST09 monitor function
0378 10af 02                         FCB     PDATA1          ; Service code byte
0379 10b0 35 10                      PULS    X               ; Restore registers used
0380 10b2 39                         RTS
0381                         
0382                         ; Disassemble instruction at address ADDR. On return, ADDR points to
0383                         ; next instruction so it can be called again.
0384                         
0385 10b3 7f 10 0e           DISASM  CLR     PAGE23          ; Clear page2/3 flag
0386 10b6 ae 8d ff 48                LDX     ADDR,PCR        ; Get address of instruction
0387 10ba e6 84                      LDB     ,X              ; Get instruction op code
0388 10bc c1 10                      CMPB    #$10            ; Is it a page 2 16-bit opcode prefix with 10?
0389 10be 27 07                      BEQ     handle10        ; If so, do special handling
0390 10c0 c1 11                      CMPB    #$11            ; Is it a page 3 16-bit opcode prefix with 11?
0391 10c2 27 52                      BEQ     handle11        ; If so, do special handling
0392 10c4 16 00 9e                   LBRA    not1011         ; If not, handle as normal case
0393                         
0394                         handle10                        ; Handle page 2 instruction
0395 10c7 86 01                      LDA     #1              ; Set page2/3 flag
0396 10c9 b7 10 0e                   STA     PAGE23
0397 10cc e6 01                      LDB     1,X             ; Get real opcode
0398 10ce f7 10 04                   STB     OPCODE          ; Save it.
0399 10d1 30 8d 0a 37                LEAX    PAGE2,PCR       ; Pointer to start of table
0400 10d5 4f                         CLRA                    ; Set index into table to zero
0401                         search10
0402 10d6 e1 86                      CMPB    A,X             ; Check for match of opcode in table
0403 10d8 27 1f                      BEQ     found10         ; Branch if found
0404 10da 8b 03                      ADDA    #3              ; Advance to next entry in table (entries are 3 bytes long)
0405 10dc 6d 86                      TST     A,X             ; Check entry
0406 10de 27 02                      BEQ     notfound10      ; If zero, then reached end of table
0407 10e0 20 f4                      BRA     search10        ; If not, keep looking
0408                         
0409                         notfound10                      ; Instruction not found, so is invalid.
0410 10e2 86 10                      LDA     #$10            ; Set opcode to 10
0411 10e4 b7 10 04                   STA     OPCODE
0412 10e7 86 00                      LDA     #OP_INV         ; Set as instruction type invalid
0413 10e9 b7 10 06                   STA     OPTYPE
0414 10ec 86 00                      LDA     #AM_INVALID     ; Set as addressing mode invalid
0415 10ee b7 10 05                   STA     AM
0416 10f1 86 01                      LDA     #1              ; Set length to one
0417 10f3 b7 10 08                   STA     LEN
0418 10f6 16 00 8e                   LBRA    dism            ; Disassemble as normal
0419                         
0420                         found10                         ; Found entry in table
0421 10f9 8b 01                      ADDA    #1              ; Advance to instruction type entry in table
0422 10fb e6 86                      LDB     A,X             ; Get instruction type
0423 10fd f7 10 06                   STB     OPTYPE          ; Save it
0424 1100 8b 01                      ADDA    #1              ; Advanced to address mode entry in table
0425 1102 e6 86                      LDB     A,X             ; Get address mode
0426 1104 f7 10 05                   STB     AM              ; Save it
0427 1107 4f                         CLRA                    ; Clear MSB of D, addressing mode is now in A:B (D)
0428 1108 1f 01                      TFR     D,X             ; Put addressing mode in X
0429 110a e6 89 18 df                LDB     LENGTHS,X       ; Get instruction length from table
0430 110e f7 10 08                   STB     LEN             ; Store it
0431 1111 7c 10 08                   INC     LEN             ; Add one because it is a two byte op code
0432 1114 20 71                      BRA     dism            ; Continue normal disassembly processing.
0433                         
0434                         handle11                        ; Same logic as above, but use table for page 3 opcodes.
0435 1116 86 01                      LDA     #1              ; Set page2/3 flag
0436 1118 b7 10 0e                   STA     PAGE23
0437 111b e6 01                      LDB     1,X             ; Get real opcode
0438 111d f7 10 04                   STB     OPCODE          ; Save it.
0439 1120 30 8d 0a 5b                LEAX    PAGE3,PCR       ; Pointer to start of table
0440 1124 4f                         CLRA                    ; Set index into table to zero
0441                         search11
0442 1125 e1 86                      CMPB    A,X             ; Check for match of opcode in table
0443 1127 27 1e                      BEQ     found11         ; Branch if found
0444 1129 8b 03                      ADDA    #3              ; Advance to next entry in table (entries are 3 bytes long)
0445 112b 6d 86                      TST     A,X             ; Check entry
0446 112d 27 02                      BEQ     notfound11      ; If zero, then reached end of table
0447 112f 20 f4                      BRA     search11        ; If not, keep looking
0448                         
0449                         notfound11                      ; Instruction not found, so is invalid.
0450 1131 86 11                      LDA     #$11            ; Set opcode to 10
0451 1133 b7 10 04                   STA     OPCODE
0452 1136 86 00                      LDA     #OP_INV         ; Set as instruction type invalid
0453 1138 b7 10 06                   STA     OPTYPE
0454 113b 86 00                      LDA     #AM_INVALID     ; Set as addressing mode invalid
0455 113d b7 10 05                   STA     AM
0456 1140 86 01                      LDA     #1              ; Set length to one
0457 1142 b7 10 08                   STA     LEN
0458 1145 20 40                      BRA     dism            ; Disassemble as normal
0459                         
0460                         found11                         ; Found entry in table
0461 1147 8b 01                      ADDA    #1              ; Advance to instruction type entry in table
0462 1149 e6 86                      LDB     A,X             ; Get instruction type
0463 114b f7 10 06                   STB     OPTYPE          ; Save it
0464 114e 8b 01                      ADDA    #1              ; Advanced to address mode entry in table
0465 1150 e6 86                      LDB     A,X             ; Get address mode
0466 1152 f7 10 05                   STB     AM              ; Save it
0467 1155 4f                         CLRA                    ; Clear MSB of D, addressing mode is now in A:B (D)
0468 1156 1f 01                      TFR     D,X             ; Put addressing mode in X
0469 1158 e6 89 18 df                LDB     LENGTHS,X       ; Get instruction length from table
0470 115c f7 10 08                   STB     LEN             ; Store it
0471 115f 7c 10 08                   INC     LEN             ; Add one because it is a two byte op code
0472 1162 20 23                      BRA     dism            ; Continue normal disassembly processing.
0473 1164 39                         RTS
0474                         
0475                         not1011
0476 1165 f7 10 04                   STB     OPCODE          ; Save the op code
0477 1168 4f                         CLRA                    ; Clear MSB of D
0478 1169 1f 01                      TFR     D,X             ; Put op code in X
0479 116b e6 89 19 0c                LDB     OPCODES,X       ; Get opcode type from table
0480 116f f7 10 06                   STB     OPTYPE          ; Store it
0481 1172 f6 10 04                   LDB     OPCODE          ; Get op code again
0482 1175 1f 01                      TFR     D,X             ; Put opcode in X
0483 1177 e6 89 1a 0c                LDB     MODES,X         ; Get addressing mode type from table
0484 117b f7 10 05                   STB     AM              ; Store it
0485 117e 1f 01                      TFR     D,X             ; Put addressing mode in X
0486 1180 e6 89 18 df                LDB     LENGTHS,X       ; Get instruction length from table
0487 1184 f7 10 08                   STB     LEN             ; Store it
0488                         
0489                         ; If addressing mode is indexed, get and save the indexed addressing
0490                         ; post byte.
0491                         
0492 1187 b6 10 05           dism    LDA     AM              ; Get addressing mode
0493 118a 81 08                      CMPA    #AM_INDEXED     ; Is it indexed mode?
0494 118c 26 22                      BNE     NotIndexed      ; Branch if not
0495 118e ae 8d fe 70                LDX     ADDR,PCR        ; Get address of op code
0496                                                         ; If it is a page2/3 instruction, op code is the next byte after ADDR
0497 1192 7d 10 0e                   TST     PAGE23          ; Page2/3 instruction?
0498 1195 27 04                      BEQ     norm            ; Branch of not
0499 1197 a6 02                      LDA     2,X             ; Post byte is two past ADDR
0500 1199 20 02                      BRA     getpb
0501 119b a6 01              norm    LDA     1,X             ; Get next byte (the post byte)
0502 119d b7 10 07           getpb   STA     POSTBYT         ; Save it
0503                         
0504                         ; Determine number of additional bytes for indexed addressing based on
0505                         ; postbyte. If most significant bit is 0, there are no additional
0506                         ; bytes and we can skip the rest of the check.
0507                         
0508 11a0 2a 0e                      BPL     NotIndexed      ; Branch of MSB is zero
0509                         
0510                         ; Else if most significant bit is 1, mask off all but low order 5 bits
0511                         ; and look up length in table.
0512                         
0513 11a2 84 1f                      ANDA    #%00011111      ; Mask off bits
0514 11a4 30 8d 07 44                LEAX    POSTBYTES,PCR   ; Lookup table of lengths
0515 11a8 a6 86                      LDA     A,X             ; Get table entry
0516 11aa bb 10 08                   ADDA    LEN             ; Add to instruction length
0517 11ad b7 10 08                   STA     LEN             ; Save new length
0518                         
0519                         NotIndexed
0520                         
0521                         ; Print address followed by a space
0522 11b0 ae 8d fe 4e                LDX     ADDR,PCR
0523 11b4 17 fe e7                   LBSR    PrintAddress
0524                         
0525                         ; Print one more space
0526                         
0527 11b7 17 fe b4                   LBSR    PrintSpace
0528                         
0529                         ; Print the op code bytes based on the instruction length
0530                         
0531 11ba f6 10 08                   LDB     LEN             ; Number of bytes in instruction
0532 11bd ae 8d fe 41                LDX     ADDR,PCR        ; Pointer to start of instruction
0533 11c1 a6 80              opby    LDA     ,X+             ; Get instruction byte and increment pointer
0534 11c3 17 fe ca                   LBSR    PrintByte       ; Print it, followed by a space
0535 11c6 5a                         DECB                    ; Decrement byte count
0536 11c7 26 f8                      BNE     opby            ; Repeat until done
0537                         
0538                         ; Print needed remaining spaces to pad out to correct column
0539                         
0540 11c9 30 8d 07 1b                LEAX    PADDING,PCR     ; Pointer to start of lookup table
0541 11cd b6 10 08                   LDA     LEN             ; Number of bytes in instruction
0542 11d0 4a                         DECA                    ; Subtract 1 since table starts at 1, not 0
0543 11d1 a6 86                      LDA     A,X             ; Get number of spaces to print
0544 11d3 17 fe a6                   LBSR    PrintSpaces
0545                         
0546                         ; If a page2/3 instruction, advance ADDR to the next byte which points
0547                         ; to the real op code.
0548                         
0549 11d6 7d 10 0e                   TST     PAGE23          ; Flag set
0550 11d9 27 09                      BEQ     noinc           ; Branch if not
0551 11db fc 10 02                   LDD     ADDR            ; Increment 16-bit address
0552 11de c3 00 01                   ADDD    #1
0553 11e1 fd 10 02                   STD     ADDR
0554                         
0555                         ; Get and print mnemonic (4 chars)
0556                         
0557 11e4 f6 10 06           noinc   LDB     OPTYPE          ; Get instruction type to index into table
0558 11e7 4f                         CLRA                    ; Clear MSB of D
0559 11e8 58                         ASLB                    ; 16-bit shift of D: Rotate B, MSB into Carry
0560 11e9 49                         ROLA                    ; Rotate A, Carry into LSB
0561 11ea 58                         ASLB                    ; Do it twice to multiple by four
0562 11eb 49                         ROLA                    ;
0563 11ec 30 8d 04 db                LEAX    MNEMONICS,PCR   ; Pointer to start of table
0564 11f0 b7 10 0b                   STA     TEMP1           ; Save value of A
0565 11f3 a6 8b                      LDA     D,X             ; Get first char of mnemonic
0566 11f5 17 fe 92                   LBSR    PrintChar       ; Print it
0567 11f8 b6 10 0b                   LDA     TEMP1           ; Restore value of A
0568 11fb 5c                         INCB                    ; Advance pointer
0569 11fc a6 8b                      LDA     D,X             ; Get second char of mnemonic
0570 11fe 17 fe 89                   LBSR    PrintChar       ; Print it
0571 1201 b6 10 0b                   LDA     TEMP1           ; Restore value of A
0572 1204 5c                         INCB                    ; Advance pointer
0573 1205 a6 8b                      LDA     D,X             ; Get third char of mnemonic
0574 1207 17 fe 80                   LBSR    PrintChar       ; Print it
0575 120a b6 10 0b                   LDA     TEMP1           ; Restore value of A
0576 120d 5c                         INCB                    ; Advance pointer
0577 120e a6 8b                      LDA     D,X             ; Get fourth char of mnemonic
0578 1210 17 fe 77                   LBSR    PrintChar       ; Print it
0579                         
0580                         ; Display any operands based on addressing mode and call appropriate
0581                         ; routine. TODO: Could use a lookup table for this.
0582                         
0583 1213 b6 10 05                   LDA     AM              ; Get addressing mode
0584 1216 81 00                      CMPA    #AM_INVALID
0585 1218 27 2e                      BEQ     DO_INVALID
0586 121a 81 01                      CMPA    #AM_INHERENT
0587 121c 27 39                      BEQ     DO_INHERENT
0588 121e 81 02                      CMPA    #AM_IMMEDIATE8
0589 1220 27 38                      BEQ     DO_IMMEDIATE8
0590 1222 81 03                      CMPA    #AM_IMMEDIATE16
0591 1224 10 27 01 af                LBEQ    DO_IMMEDIATE16
0592 1228 81 04                      CMPA    #AM_DIRECT
0593 122a 10 27 01 c4                LBEQ    DO_DIRECT
0594 122e 81 05                      CMPA    #AM_EXTENDED
0595 1230 10 27 01 d0                LBEQ    DO_EXTENDED
0596 1234 81 06                      CMPA    #AM_RELATIVE8
0597 1236 10 27 01 e0                LBEQ    DO_RELATIVE8
0598 123a 81 07                      CMPA    #AM_RELATIVE16
0599 123c 10 27 01 f5                LBEQ    DO_RELATIVE16
0600 1240 81 08                      CMPA    #AM_INDEXED
0601 1242 10 27 02 09                LBEQ    DO_INDEXED
0602 1246 20 00                      BRA     DO_INVALID      ; Should never be reached
0603                         
0604                         DO_INVALID                      ; Display "   ; INVALID"
0605 1248 86 0f                      LDA     #15             ; Want 15 spaces
0606 124a 17 fe 2f                   LBSR    PrintSpaces
0607 124d 30 8d 09 4a                LEAX    MSG1,PCR
0608 1251 17 fe 58                   LBSR    PrintString
0609 1254 16 04 5e                   LBRA    done
0610                         
0611                         DO_INHERENT                    ; Nothing else to do
0612 1257 16 04 5b                   LBRA    done
0613                         
0614                         DO_IMMEDIATE8
0615 125a b6 10 06                   LDA     OPTYPE          ; Get opcode type
0616 125d 81 81                      CMPA    #OP_TFR         ; Is is TFR?
0617 125f 27 33                      BEQ     XFREXG          ; Handle special case of TFR
0618 1261 81 37                      CMPA    #OP_EXG         ; Is is EXG?
0619 1263 27 2f                      BEQ     XFREXG          ; Handle special case of EXG
0620                         
0621 1265 81 66                      CMPA    #OP_PULS        ; Is is PULS?
0622 1267 10 27 00 ad                LBEQ    PULPSH
0623 126b 81 67                      CMPA    #OP_PULU        ; Is is PULU?
0624 126d 10 27 00 a7                LBEQ    PULPSH
0625 1271 81 64                      CMPA    #OP_PSHS        ; Is is PSHS?
0626 1273 10 27 00 a1                LBEQ    PULPSH
0627 1277 81 65                      CMPA    #OP_PSHU        ; Is is PSHU?
0628 1279 10 27 00 9b                LBEQ    PULPSH
0629                                                         ; Display "  #$nn"
0630 127d 17 fd f1                   LBSR    Print2Spaces    ; Two spaces
0631 1280 86 23                      LDA     #'#             ; Number sign
0632 1282 17 fe 05                   LBSR    PrintChar
0633 1285 17 fd c2                   LBSR    PrintDollar     ; Dollar sign
0634 1288 ae 8d fd 76                LDX     ADDR,PCR        ; Get address of op code
0635 128c a6 01                      LDA     1,X             ; Get next byte (immediate data)
0636 128e 17 fd ff                   LBSR    PrintByte       ; Print as hex value
0637 1291 16 04 21                   LBRA    done
0638                         
0639                         XFREXG                          ; Handle special case of TFR and EXG
0640                                                         ; Display "  r1,r2"
0641 1294 17 fd da                   LBSR    Print2Spaces    ; Two spaces
0642 1297 ae 8d fd 67                LDX     ADDR,PCR        ; Get address of op code
0643 129b a6 01                      LDA     1,X             ; Get next byte (postbyte)
0644 129d 84 f0                      ANDA    #%11110000      ; Mask out source register bits
0645 129f 44                         LSRA                    ; Shift into low order bits
0646 12a0 44                         LSRA
0647 12a1 44                         LSRA
0648 12a2 44                         LSRA
0649 12a3 8d 0e                      BSR     TFREXGRegister  ; Print source register name
0650 12a5 86 2c                      LDA     #',             ; Print comma
0651 12a7 17 fd e0                   LBSR    PrintChar
0652 12aa a6 01                      LDA     1,X             ; Get postbyte again
0653 12ac 84 0f                      ANDA    #%00001111      ; Mask out destination register bits
0654 12ae 8d 03                      BSR     TFREXGRegister  ; Print destination register name
0655 12b0 16 04 02                   LBRA    done
0656                         
0657                         ; Look up register name (in A) from Transfer/Exchange postbyte. 4 LSB
0658                         ; bits determine the register name. Value is printed. Invalid value
0659                         ; is shown as '?'.
0660                         ; Value:    0 1 2 3 4 5  8 9 10 11
0661                         ; Register: D X Y U S PC A B CC DP
0662                         
0663                         TFREXGRegister
0664 12b3 81 00                      CMPA    #0
0665 12b5 26 04                      BNE     Try1
0666 12b7 86 44                      LDA     #'D
0667 12b9 20 50                      BRA     Print1Reg
0668 12bb 81 01              Try1    CMPA    #1
0669 12bd 26 04                      BNE     Try2
0670 12bf 86 58                      LDA     #'X
0671 12c1 20 48                      BRA     Print1Reg
0672 12c3 81 02              Try2    CMPA    #2
0673 12c5 26 04                      BNE     Try3
0674 12c7 86 59                      LDA     #'Y
0675 12c9 20 40                      BRA     Print1Reg
0676 12cb 81 03              Try3    CMPA    #3
0677 12cd 26 04                      BNE     Try4
0678 12cf 86 55                      LDA     #'U
0679 12d1 20 38                      BRA     Print1Reg
0680 12d3 81 04              Try4    CMPA    #4
0681 12d5 26 04                      BNE     Try5
0682 12d7 86 53                      LDA     #'S
0683 12d9 20 30                      BRA     Print1Reg
0684 12db 81 05              Try5    CMPA    #5
0685 12dd 26 06                      BNE     Try8
0686 12df 86 50                      LDA     #'P
0687 12e1 c6 43                      LDB     #'C
0688 12e3 20 2a                      BRA     Print2Reg
0689 12e5 81 08              Try8    CMPA    #8
0690 12e7 26 04                      BNE     Try9
0691 12e9 86 41                      LDA     #'A
0692 12eb 20 1e                      BRA     Print1Reg
0693 12ed 81 09              Try9    CMPA    #9
0694 12ef 26 04                      BNE     Try10
0695 12f1 86 42                      LDA     #'B
0696 12f3 20 16                      BRA     Print1Reg
0697 12f5 81 0a              Try10   CMPA    #10
0698 12f7 26 06                      BNE     Try11
0699 12f9 86 43                      LDA     #'C
0700 12fb c6 43                      LDB     #'C
0701 12fd 20 10                      BRA     Print2Reg
0702 12ff 81 0b              Try11   CMPA    #11
0703 1301 26 06                      BNE     Inv
0704 1303 86 44                      LDA     #'D
0705 1305 c6 50                      LDB     #'P
0706 1307 20 06                      BRA     Print2Reg
0707 1309 86 3f              Inv     LDA     #'?             ; Invalid
0708                                                         ; Fall through
0709                         Print1Reg
0710 130b 17 fd 7c                   LBSR   PrintChar        ; Print character
0711 130e 39                         RTS
0712                         Print2Reg
0713 130f 17 fd 78                   LBSR   PrintChar        ; Print first character
0714 1312 1f 98                      TFR    B,A
0715 1314 17 fd 73                   LBSR   PrintChar        ; Print second character
0716 1317 39                         RTS
0717                         
0718                         ; Handle PSHS/PSHU/PULS/PULU instruction operands
0719                         ; Format is a register list, eg; "  A,B,X"
0720                         
0721                         PULPSH
0722 1318 17 fd 56                   LBSR    Print2Spaces    ; Two spaces
0723 131b 86 01                      LDA     #1
0724 131d b7 10 0d                   STA     FIRST           ; Flag set before any items printed
0725 1320 ae 8d fc de                LDX     ADDR,PCR        ; Get address of op code
0726 1324 a6 01                      LDA     1,X             ; Get next byte (postbyte)
0727                         
0728                         ; Postbyte bits indicate registers to push/pull when 1.
0729                         ; 7  6   5 4 3  2 1 0
0730                         ; PC S/U Y X DP B A CC
0731                         
0732                         ; TODO: Could simplify this with shifting and lookup table.
0733                         
0734 1326 85 80                      BITA    #%10000000      ; Bit 7 set?
0735 1328 27 0d                      BEQ     bit6
0736 132a 34 06                      PSHS    A,B
0737 132c 86 50                      LDA     #'P
0738 132e c6 43                      LDB     #'C
0739 1330 8d dd                      BSR     Print2Reg       ; Print PC
0740 1332 7f 10 0d                   CLR     FIRST
0741 1335 35 06                      PULS    A,B
0742 1337 85 40              bit6    BITA    #%01000000      ; Bit 6 set?
0743 1339 27 21                      BEQ     bit5
0744                         
0745                         ; Need to show S or U depending on instruction
0746                         
0747 133b 34 02                      PSHS    A               ; Save postbyte
0748 133d b6 10 06                   LDA     OPTYPE          ; Get opcode type
0749 1340 81 66                      CMPA    #OP_PULS
0750 1342 27 12                      BEQ     printu
0751 1344 81 64                      CMPA    #OP_PSHS
0752 1346 27 0e                      BEQ     printu
0753 1348 17 00 81                   LBSR    PrintCommaIfNotFirst
0754 134b 86 53                      LDA     #'S             ; Print S
0755 134d 8d bc              pr1     BSR     Print1Reg
0756 134f 7f 10 0d                   CLR     FIRST
0757 1352 35 02                      PULS    A
0758 1354 20 06                      bra     bit5
0759 1356 8d 74              printu  BSR     PrintCommaIfNotFirst
0760 1358 86 55                      LDA     #'U             ; Print U
0761 135a 20 f1                      bra     pr1
0762 135c 85 20              bit5    BITA    #%00100000      ; Bit 5 set?
0763 135e 27 0d                      BEQ     bit4
0764 1360 34 02                      PSHS    A
0765 1362 8d 68                      BSR     PrintCommaIfNotFirst
0766 1364 86 59                      LDA     #'Y
0767 1366 8d a3                      BSR     Print1Reg       ; Print Y
0768 1368 7f 10 0d                   CLR     FIRST
0769 136b 35 02                      PULS    A
0770 136d 85 10              bit4    BITA    #%00010000      ; Bit 4 set?
0771 136f 27 0d                      BEQ     bit3
0772 1371 34 02                      PSHS    A
0773 1373 8d 57                      BSR     PrintCommaIfNotFirst
0774 1375 86 58                      LDA     #'X
0775 1377 8d 92                      BSR     Print1Reg       ; Print X
0776 1379 7f 10 0d                   CLR     FIRST
0777 137c 35 02                      PULS    A
0778 137e 85 08              bit3    BITA    #%00001000      ; Bit 3 set?
0779 1380 27 0f                      BEQ     bit2
0780 1382 34 06                      PSHS    A,B
0781 1384 8d 46                      BSR     PrintCommaIfNotFirst
0782 1386 86 44                      LDA     #'D
0783 1388 c6 50                      LDB     #'P
0784 138a 8d 83                      BSR     Print2Reg       ; Print DP
0785 138c 7f 10 0d                   CLR     FIRST
0786 138f 35 06                      PULS    A,B
0787 1391 85 04              bit2    BITA    #%00000100      ; Bit 2 set?
0788 1393 27 0e                      BEQ     bit1
0789 1395 34 02                      PSHS    A
0790 1397 8d 33                      BSR     PrintCommaIfNotFirst
0791 1399 86 42                      LDA     #'B
0792 139b 17 ff 6d                   LBSR    Print1Reg       ; Print B
0793 139e 7f 10 0d                   CLR     FIRST
0794 13a1 35 02                      PULS    A
0795 13a3 85 02              bit1    BITA    #%00000010      ; Bit 1 set?
0796 13a5 27 0e                      BEQ     bit0
0797 13a7 34 02                      PSHS    A
0798 13a9 8d 21                      BSR     PrintCommaIfNotFirst
0799 13ab 86 41                      LDA     #'A
0800 13ad 17 ff 5b                   LBSR    Print1Reg       ; Print A
0801 13b0 7f 10 0d                   CLR     FIRST
0802 13b3 35 02                      PULS    A
0803 13b5 85 01              bit0    BITA    #%00000001      ; Bit 0 set?
0804 13b7 27 10                      BEQ     done1
0805 13b9 34 06                      PSHS    A,B
0806 13bb 8d 0f                      BSR     PrintCommaIfNotFirst
0807 13bd 86 43                      LDA     #'C
0808 13bf c6 43                      LDB     #'C
0809 13c1 17 ff 4b                   LBSR    Print2Reg       ; Print CC
0810 13c4 7f 10 0d                   CLR     FIRST
0811 13c7 35 06                      PULS    A,B
0812 13c9 16 02 e9           done1   LBRA    done
0813                         
0814                         ; Print comma if FIRST flag is not set.
0815                         PrintCommaIfNotFirst
0816 13cc 7d 10 0d                   TST     FIRST
0817 13cf 26 05                      BNE     ret1
0818 13d1 86 2c                      LDA     #',
0819 13d3 17 fc b4                   LBSR    PrintChar
0820 13d6 39                 ret1    RTS
0821                         
0822                         DO_IMMEDIATE16                  ; Display "  #$nnnn"
0823 13d7 17 fc 97                   LBSR    Print2Spaces    ; Two spaces
0824 13da 86 23                      LDA     #'#             ; Number sign
0825 13dc 17 fc ab                   LBSR    PrintChar
0826 13df 17 fc 68                   LBSR    PrintDollar     ; Dollar sign
0827 13e2 ae 8d fc 1c                LDX     ADDR,PCR        ; Get address of op code
0828 13e6 a6 01                      LDA     1,X             ; Get first byte (immediate data MSB)
0829 13e8 e6 02                      LDB     2,X             ; Get second byte (immediate data LSB)
0830 13ea 1f 01                      TFR     D,X             ; Put in X to print
0831 13ec 17 fc af                   LBSR    PrintAddress    ; Print as hex value
0832 13ef 16 02 c3                   LBRA    done
0833                         
0834                         DO_DIRECT                       ; Display "  $nn"
0835 13f2 17 fc 7c                   LBSR    Print2Spaces    ; Two spaces
0836 13f5 17 fc 52                   LBSR    PrintDollar     ; Dollar sign
0837 13f8 ae 8d fc 06                LDX     ADDR,PCR        ; Get address of op code
0838 13fc a6 01                      LDA     1,X             ; Get next byte (byte data)
0839 13fe 17 fc 8f                   LBSR    PrintByte       ; Print as hex value
0840 1401 16 02 b1                   LBRA    done
0841                         
0842                         DO_EXTENDED                     ; Display "  $nnnn"
0843 1404 17 fc 6a                   LBSR    Print2Spaces    ; Two spaces
0844 1407 17 fc 40                   LBSR    PrintDollar     ; Dollar sign
0845 140a ae 8d fb f4                LDX     ADDR,PCR        ; Get address of op code
0846 140e a6 01                      LDA     1,X             ; Get first byte (address MSB)
0847 1410 e6 02                      LDB     2,X             ; Get second byte (address LSB)
0848 1412 1f 01                      TFR     D,X             ; Put in X to print
0849 1414 17 fc 87                   LBSR    PrintAddress    ; Print as hex value
0850 1417 16 02 9b                   LBRA    done
0851                         
0852                         DO_RELATIVE8                    ; Display "  $nnnn"
0853 141a 17 fc 54                   LBSR    Print2Spaces    ; Two spaces
0854 141d 17 fc 2a                   LBSR    PrintDollar     ; Dollar sign
0855                         
0856                         ; Destination address for relative branch is address of opcode + (sign
0857                         ; extended)offset + 2, e.g.
0858                         ;   $1015 + $(FF)FC + 2 = $1013
0859                         ;   $101B + $(00)27 + 2 = $1044
0860                         
0861 1420 ae 8d fb de                LDX     ADDR,PCR        ; Get address of op code
0862 1424 e6 01                      LDB     1,X             ; Get first byte (8-bit branch offset)
0863 1426 1d                         SEX                     ; Sign extend to 16 bits
0864 1427 f3 10 02                   ADDD    ADDR            ; Add address of op code
0865 142a c3 00 02                   ADDD    #2              ; Add 2
0866 142d 1f 01                      TFR     D,X             ; Put in X to print
0867 142f 17 fc 6c                   LBSR    PrintAddress    ; Print as hex value
0868 1432 16 02 80                   LBRA    done
0869                         
0870                         DO_RELATIVE16                   ; Display "  $nnnn"
0871 1435 17 fc 39                   LBSR    Print2Spaces    ; Two spaces
0872 1438 17 fc 0f                   LBSR    PrintDollar     ; Dollar sign
0873                         
0874                         ; Destination address calculation is similar to above, except offset
0875                         ; is 16 bits and need to add 3.
0876                         
0877 143b ae 8d fb c3                LDX     ADDR,PCR        ; Get address of op code
0878 143f ec 01                      LDD     1,X             ; Get next 2 bytes (16-bit branch offset)
0879 1441 f3 10 02                   ADDD    ADDR            ; Add address of op code
0880 1444 c3 00 03                   ADDD    #3              ; Add 3
0881 1447 1f 01                      TFR     D,X             ; Put in X to print
0882 1449 17 fc 52                   LBSR    PrintAddress    ; Print as hex value
0883 144c 16 02 66                   LBRA    done
0884                         
0885                         DO_INDEXED
0886 144f 17 fc 1f                   LBSR    Print2Spaces    ; Two spaces
0887                         
0888                         ; Addressing modes are determined by the postbyte:
0889                         ;
0890                         ; Postbyte  Format  Additional Bytes
0891                         ; --------  ------  ----------------
0892                         ; 0RRnnnnn  n,R     0
0893                         ; 1RR00100  ,R      0
0894                         ; 1RR01000  n,R     1
0895                         ; 1RR01001  n,R     2
0896                         ; 1RR00110  A,R     0
0897                         ; 1RR00101  B,R     0
0898                         ; 1RR01011  D,R     0
0899                         ; 1RR00000  ,R+     0
0900                         ; 1RR00001  ,R++    0
0901                         ; 1RR00010  ,-R     0
0902                         ; 1RR00011  ,--R    0
0903                         ; 1xx01100  n,PCR   1
0904                         ; 1xx01101  n,PCR   2
0905                         ; 1RR10100  [,R]    0
0906                         ; 1RR11000  [n,R]   1
0907                         ; 1RR11001  [n,R]   2
0908                         ; 1RR10110  [A,R]   0
0909                         ; 1RR10101  [B,R]   0
0910                         ; 1RR11011  [D,R]   0
0911                         ; 1RR10001  [,R++]  0
0912                         ; 1RR10011  [,--R]  0
0913                         ; 1xx11100  [n,PCR] 1
0914                         ; 1xx11101  [n,PCR] 2
0915                         ; 10011111  [n]     2
0916                         ;
0917                         ; Where RR: 00=X 01=Y 10=U 11=S
0918                         
0919 1452 b6 10 07                   LDA     POSTBYT         ; Get postbyte
0920 1455 2b 14                      BMI     ind2            ; Branch if MSB is 1
0921                         
0922                                                         ; Format is 0RRnnnnn  n,R
0923 1457 84 1f                      ANDA    #%00011111      ; Get 5-bit offset
0924 1459 17 fb ee                   LBSR    PrintDollar     ; Dollar sign
0925 145c 17 fc 31                   LBSR    PrintByte       ; Print offset
0926 145f 17 fb f1                   LBSR    PrintComma      ; Print comma
0927 1462 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0928 1465 17 02 2d                   LBSR    PrintRegister   ; Print register name
0929 1468 16 02 4a                   LBRA    done
0930                         ind2
0931 146b 84 9f                      ANDA    #%10011111      ; Mask out register bits
0932 146d 81 84                      CMPA    #%10000100      ; Check against pattern
0933 146f 26 0c                      BNE     ind3
0934                                                         ; Format is 1RR00100  ,R
0935 1471 17 fb df                   LBSR    PrintComma      ; Print comma
0936 1474 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0937 1477 17 02 1b                   LBSR    PrintRegister   ; Print register name
0938 147a 16 02 38                   LBRA    done
0939                         ind3
0940 147d 81 88                      CMPA    #%10001000      ; Check against pattern
0941 147f 26 18                      BNE     ind4
0942                                                         ; Format is 1RR01000  n,R
0943 1481 ae 8d fb 7d                LDX     ADDR,PCR
0944 1485 a6 02                      LDA     2,X             ; Get 8-bit offset
0945 1487 17 fb c0                   LBSR    PrintDollar     ; Dollar sign
0946 148a 17 fc 03                   LBSR    PrintByte       ; Display it
0947 148d 17 fb c3                   LBSR    PrintComma      ; Print comma
0948 1490 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0949 1493 17 01 ff                   LBSR    PrintRegister   ; Print register name
0950 1496 16 02 1c                   LBRA    done
0951                         ind4
0952 1499 81 89                      CMPA    #%10001001      ; Check against pattern
0953 149b 26 1a                      BNE     ind5
0954                                                         ; Format is 1RR01001  n,R
0955 149d ae 8d fb 61                LDX     ADDR,PCR
0956 14a1 ec 02                      LDD     2,X             ; Get 16-bit offset
0957 14a3 1f 01                      TFR     D,X
0958 14a5 17 fb a2                   LBSR    PrintDollar     ; Dollar sign
0959 14a8 17 fb f3                   LBSR    PrintAddress    ; Display it
0960 14ab 17 fb a5                   LBSR    PrintComma      ; Print comma
0961 14ae b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0962 14b1 17 01 e1                   LBSR    PrintRegister   ; Print register name
0963 14b4 16 01 fe                   LBRA    done
0964                         ind5
0965 14b7 81 86                      CMPA    #%10000110      ; Check against pattern
0966 14b9 26 11                      BNE     ind6
0967                                                         ; Format is 1RR00110  A,R
0968 14bb 86 41                      LDA     #'A
0969 14bd 17 fb ca                   LBSR    PrintChar       ; Print A
0970 14c0 17 fb 90           commar  LBSR    PrintComma      ; Print comma
0971 14c3 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0972 14c6 17 01 cc                   LBSR    PrintRegister   ; Print register name
0973 14c9 16 01 e9                   LBRA    done
0974                         ind6
0975 14cc 81 85                      CMPA    #%10000101      ; Check against pattern
0976 14ce 26 07                      BNE     ind7
0977                                                         ; Format is 1RR00101  B,R
0978 14d0 86 42                      LDA     #'B
0979 14d2 17 fb b5                   LBSR    PrintChar
0980 14d5 20 e9                      BRA     commar
0981                         ind7
0982 14d7 81 8b                      CMPA    #%10001011      ; Check against pattern
0983 14d9 26 07                      BNE     ind8
0984                                                         ; Format is 1RR01011  D,R
0985 14db 86 44                      LDA     #'D
0986 14dd 17 fb aa                   LBSR    PrintChar
0987 14e0 20 de                      BRA     commar
0988                         ind8
0989 14e2 81 80                      CMPA    #%10000000      ; Check against pattern
0990 14e4 26 11                      BNE     ind9
0991                                                         ; Format is 1RR00000  ,R+
0992 14e6 17 fb 6a                   LBSR    PrintComma      ; Print comma
0993 14e9 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0994 14ec 17 01 a6                   LBSR    PrintRegister   ; Print register name
0995 14ef 86 2b                      LDA     #'+             ; Print plus
0996 14f1 17 fb 96                   LBSR    PrintChar
0997 14f4 16 01 be                   LBRA    done
0998                         ind9
0999 14f7 81 81                      CMPA    #%10000001      ; Check against pattern
1000 14f9 26 14                      BNE     ind10
1001                                                         ; Format is 1RR00001  ,R++
1002 14fb 17 fb 55                   LBSR    PrintComma      ; Print comma
1003 14fe b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1004 1501 17 01 91                   LBSR    PrintRegister   ; Print register name
1005 1504 86 2b                      LDA     #'+             ; Print plus twice
1006 1506 17 fb 81                   LBSR    PrintChar
1007 1509 17 fb 7e                   LBSR    PrintChar
1008 150c 16 01 a6                   LBRA    done
1009                         ind10
1010 150f 81 82                      CMPA    #%10000010      ; Check against pattern
1011 1511 26 11                      BNE     ind11
1012                                                         ; Format is 1RR00010  ,-R
1013 1513 17 fb 3d                   LBSR    PrintComma      ; Print comma
1014 1516 86 2d                      LDA     #'-             ; Print minus
1015 1518 17 fb 6f                   LBSR    PrintChar
1016 151b b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1017 151e 17 01 74                   LBSR    PrintRegister   ; Print register name
1018 1521 16 01 91                   LBRA    done
1019                         ind11
1020 1524 81 83                      CMPA    #%10000011      ; Check against pattern
1021 1526 26 14                      BNE     ind12
1022                                                         ; Format is 1RR00011  ,--R
1023 1528 17 fb 28                   LBSR    PrintComma      ; Print comma
1024 152b 86 2d                      LDA     #'-             ; Print minus twice
1025 152d 17 fb 5a                   LBSR    PrintChar
1026 1530 17 fb 57                   LBSR    PrintChar
1027 1533 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1028 1536 17 01 5c                   LBSR    PrintRegister   ; Print register name
1029 1539 16 01 79                   LBRA    done
1030                         ind12
1031 153c 81 8c                      CMPA    #%10001100      ; Check against pattern
1032 153e 26 15                      BNE     ind13
1033                                                         ; Format is 1xx01100  n,PCR
1034 1540 ae 8d fa be                LDX     ADDR,PCR
1035 1544 a6 02                      LDA     2,X             ; Get 8-bit offset
1036 1546 17 fb 01                   LBSR    PrintDollar     ; Dollar sign
1037 1549 17 fb 44                   LBSR    PrintByte       ; Display it
1038 154c 17 fb 04                   LBSR    PrintComma      ; Print comma
1039 154f 17 01 5b                   LBSR    PrintPCR        ; Print PCR
1040 1552 16 01 60                   LBRA    done
1041                         ind13
1042 1555 81 8d                      CMPA    #%10001101      ; Check against pattern
1043 1557 26 17                      BNE     ind14
1044                                                         ; Format is 1xx01101  n,PCR
1045 1559 ae 8d fa a5                LDX     ADDR,PCR
1046 155d ec 02                      LDD     2,X             ; Get 16-bit offset
1047 155f 1f 01                      TFR     D,X
1048 1561 17 fa e6                   LBSR    PrintDollar     ; Dollar sign
1049 1564 17 fb 37                   LBSR    PrintAddress    ; Display it
1050 1567 17 fa e9                   LBSR    PrintComma      ; Print comma
1051 156a 17 01 40                   LBSR    PrintPCR        ; Print PCR
1052 156d 16 01 45                   LBRA    done
1053                         ind14
1054 1570 81 94                      CMPA    #%10010100      ; Check against pattern
1055 1572 26 12                      BNE     ind15
1056                                                         ; Format is 1RR10100  [,R]
1057 1574 17 fa e5                   LBSR    PrintLBracket   ; Print left bracket
1058 1577 17 fa d9                   LBSR    PrintComma      ; Print comma
1059 157a b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1060 157d 17 01 15                   LBSR    PrintRegister   ; Print register name
1061 1580 17 fa e2                   LBSR    PrintRBracket   ; Print right bracket
1062 1583 16 01 2f                   LBRA    done
1063                         ind15
1064 1586 81 98                      CMPA    #%10011000      ; Check against pattern
1065 1588 26 1e                      BNE     ind16
1066                                                         ; Format is 1RR11000  [n,R]
1067 158a 17 fa cf                   LBSR    PrintLBracket   ; Print left bracket
1068 158d ae 8d fa 71                LDX     ADDR,PCR
1069 1591 a6 02                      LDA     2,X             ; Get 8-bit offset
1070 1593 17 fa b4                   LBSR    PrintDollar     ; Dollar sign
1071 1596 17 fa f7                   LBSR    PrintByte       ; Display it
1072 1599 17 fa b7                   LBSR    PrintComma      ; Print comma
1073 159c b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1074 159f 17 00 f3                   LBSR    PrintRegister   ; Print register name
1075 15a2 17 fa c0                   LBSR    PrintRBracket   ; Print right bracket
1076 15a5 16 01 0d                   LBRA    done
1077                         ind16
1078 15a8 81 99                      CMPA    #%10011001      ; Check against pattern
1079 15aa 26 20                      BNE     ind17
1080                                                         ; Format is 1RR11001  [n,R]
1081 15ac 17 fa ad                   LBSR    PrintLBracket   ; Print left bracket
1082 15af ae 8d fa 4f                LDX     ADDR,PCR
1083 15b3 ec 02                      LDD     2,X             ; Get 16-bit offset
1084 15b5 1f 01                      TFR     D,X
1085 15b7 17 fa 90                   LBSR    PrintDollar     ; Dollar sign
1086 15ba 17 fa e1                   LBSR    PrintAddress    ; Display it
1087 15bd 17 fa 93                   LBSR    PrintComma      ; Print comma
1088 15c0 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1089 15c3 17 00 cf                   LBSR    PrintRegister   ; Print register name
1090 15c6 17 fa 9c                   LBSR    PrintRBracket   ; Print right bracket
1091 15c9 16 00 e9                   LBRA    done
1092                         ind17
1093 15cc 81 96                      CMPA    #%10010110      ; Check against pattern
1094 15ce 26 17                      BNE     ind18
1095                                                         ; Format is 1RR10110  [A,R]
1096 15d0 17 fa 89                   LBSR    PrintLBracket   ; Print left bracket
1097 15d3 86 41                      LDA     #'A
1098 15d5 17 fa b2                   LBSR    PrintChar       ; Print A
1099 15d8 17 fa 78           comrb   LBSR    PrintComma      ; Print comma
1100 15db b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1101 15de 17 00 b4                   LBSR    PrintRegister   ; Print register name
1102 15e1 17 fa 81                   LBSR    PrintRBracket   ; Print right bracket
1103 15e4 16 00 ce                   LBRA    done
1104                         ind18
1105 15e7 81 95                      CMPA    #%10010101      ; Check against pattern
1106 15e9 26 0a                      BNE     ind19
1107                                                         ; Format is 1RR10101  [B,R]
1108 15eb 17 fa 6e                   LBSR    PrintLBracket   ; Print left bracket
1109 15ee 86 42                      LDA     #'B
1110 15f0 17 fa 97                   LBSR    PrintChar
1111 15f3 20 e3                      BRA     comrb
1112                         ind19
1113 15f5 81 9b                      CMPA    #%10011011      ; Check against pattern
1114 15f7 26 0a                      BNE     ind20
1115                                                         ; Format is 1RR11011  [D,R]
1116 15f9 17 fa 60                   LBSR    PrintLBracket   ; Print left bracket
1117 15fc 86 44                      LDA     #'D
1118 15fe 17 fa 89                   LBSR    PrintChar
1119 1601 20 d5                      BRA     comrb
1120                         ind20
1121 1603 81 91                      CMPA    #%10010001      ; Check against pattern
1122 1605 26 1a                      BNE     ind21
1123                                                         ; Format is 1RR10001  [,R++]
1124 1607 17 fa 52                   LBSR    PrintLBracket   ; Print left bracket
1125 160a 17 fa 46                   LBSR    PrintComma      ; Print comma
1126 160d b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1127 1610 17 00 82                   LBSR    PrintRegister   ; Print register name
1128 1613 86 2b                      LDA     #'+             ; Print plus twice
1129 1615 17 fa 72                   LBSR    PrintChar
1130 1618 17 fa 6f                   LBSR    PrintChar
1131 161b 17 fa 47                   LBSR    PrintRBracket   ; Print right bracket
1132 161e 16 00 94                   LBRA    done
1133                         ind21
1134 1621 81 93                      CMPA    #%10010011      ; Check against pattern
1135 1623 26 18                      BNE     ind22
1136                                                         ; Format is 1RR10011  [,--R]
1137 1625 17 fa 34                   LBSR    PrintLBracket   ; Print left bracket
1138 1628 17 fa 28                   LBSR    PrintComma      ; Print comma
1139 162b 86 2d                      LDA     #'-             ; Print minus twice
1140 162d 17 fa 5a                   LBSR    PrintChar
1141 1630 17 fa 57                   LBSR    PrintChar
1142 1633 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1143 1636 8d 5d                      BSR     PrintRegister   ; Print register name
1144 1638 17 fa 2a                   LBSR    PrintRBracket   ; Print right bracket
1145 163b 20 78                      BRA     done
1146                         ind22
1147 163d 81 9c                      CMPA    #%10011100      ; Check against pattern
1148 163f 26 19                      BNE     ind23
1149                                                         ; Format is 1xx11100  [n,PCR]
1150 1641 17 fa 18                   LBSR    PrintLBracket   ; Print left bracket
1151 1644 ae 8d f9 ba                LDX     ADDR,PCR
1152 1648 a6 02                      LDA     2,X             ; Get 8-bit offset
1153 164a 17 f9 fd                   LBSR    PrintDollar     ; Dollar sign
1154 164d 17 fa 40                   LBSR    PrintByte       ; Display it
1155 1650 17 fa 00                   LBSR    PrintComma      ; Print comma
1156 1653 8d 58                      BSR     PrintPCR        ; Print PCR
1157 1655 17 fa 0d                   LBSR    PrintRBracket   ; Print right bracket
1158 1658 20 5b                      BRA     done
1159                         ind23
1160 165a 81 9d                      CMPA    #%10011101      ; Check against pattern
1161 165c 26 1b                      BNE     ind24
1162                                                         ; Format is 1xx11101  [n,PCR]
1163 165e 17 f9 fb                   LBSR    PrintLBracket   ; Print left bracket
1164 1661 ae 8d f9 9d                LDX     ADDR,PCR
1165 1665 ec 02                      LDD     2,X             ; Get 16-bit offset
1166 1667 1f 01                      TFR     D,X
1167 1669 17 f9 de                   LBSR    PrintDollar     ; Dollar sign
1168 166c 17 fa 2f                   LBSR    PrintAddress    ; Display it
1169 166f 17 f9 e1                   LBSR    PrintComma      ; Print comma
1170 1672 8d 39                      BSR     PrintPCR        ; Print PCR
1171 1674 17 f9 ee                   LBSR    PrintRBracket   ; Print right bracket
1172 1677 20 3c                      BRA     done
1173                         ind24
1174 1679 81 9f                      CMPA    #%10011111      ; Check against pattern
1175 167b 26 16                      BNE     ind25
1176                                                         ; Format is 1xx11111  [n]
1177 167d 17 f9 dc                   LBSR    PrintLBracket   ; Print left bracket
1178 1680 ae 8d f9 7e                LDX     ADDR,PCR
1179 1684 ec 02                      LDD     2,X             ; Get 16-bit offset
1180 1686 1f 01                      TFR     D,X
1181 1688 17 f9 bf                   LBSR    PrintDollar     ; Dollar sign
1182 168b 17 fa 10                   LBSR    PrintAddress    ; Display it
1183 168e 17 f9 d4                   LBSR    PrintRBracket   ; Print right bracket
1184 1691 20 22                      BRA     done
1185                         ind25                           ; Should never be reached
1186 1693 20 20                      BRA     done
1187                         
1188                         ; Print register name encoded in bits 5 and 6 of A for indexed
1189                         ; addressing: xRRxxxxx where RR: 00=X 01=Y 10=U 11=S
1190                         ; Registers changed: X
1191                         PrintRegister
1192 1695 34 02                      PSHS    A               ; Save A
1193 1697 84 60                      ANDA    #%01100000      ; Mask out other bits
1194 1699 44                         LSRA                    ; Shift into 2 LSB
1195 169a 44                         LSRA
1196 169b 44                         LSRA
1197 169c 44                         LSRA
1198 169d 44                         LSRA
1199 169e 30 8c 08                   LEAX    <REGTABLE,PCR   ; Lookup table of register name characters
1200 16a1 a6 86                      LDA     A,X             ; Get character
1201 16a3 17 f9 e4                   LBSR    PrintChar       ; Print it
1202 16a6 35 02                      PULS    A               ; Restore A
1203 16a8 39                         RTS                     ; Return
1204                         REGTABLE
1205 16a9 58 59 55 53                FCC     "XYUS"
1206                         
1207                         ; Print the string "PCR" on the console.
1208                         ; Registers changed: X
1209                         PrintPCR
1210 16ad 30 8d 05 1c                LEAX    MSG3,PCR        ; "PCR" string
1211 16b1 17 f9 f8                   LBSR    PrintString
1212 16b4 39                         RTS
1213                         
1214                         ; Print final CR
1215                         
1216 16b5 17 f9 85           done    LBSR    PrintCR
1217                         
1218                         ; Update address to next instruction
1219                         ; If it was a page 2/3 instruction, we need to subtract one from the
1220                         ; length to account for ADDR being moved to the second byte of the
1221                         ; instruction.
1222                         
1223 16b8 7d 10 0e                   TST     PAGE23          ; Flag set
1224 16bb 27 03                      BEQ     not23           ; Branch if not
1225 16bd 7a 10 08                   DEC     LEN             ; Decrement length
1226 16c0 4f                 not23   CLRA                    ; Clear MSB of D
1227 16c1 f6 10 08                   LDB     LEN             ; Get length byte in LSB of D
1228 16c4 f3 10 02                   ADDD    ADDR            ; Add to address
1229 16c7 fd 10 02                   STD     ADDR            ; Write new address
1230                         
1231                         ; Return
1232 16ca 39                         RTS
1233                         
1234                         ; *** DATA
1235                         
1236                         ; Table of instruction strings. 4 bytes per table entry
1237                         MNEMONICS
1238 16cb 3f 3f 3f 20                FCC     "??? "          ; $00
1239 16cf 41 42 58 20                FCC     "ABX "          ; $01
1240 16d3 41 44 43 41                FCC     "ADCA"          ; $02
1241 16d7 41 44 43 42                FCC     "ADCB"          ; $03
1242 16db 41 44 44 41                FCC     "ADDA"          ; $04
1243 16df 41 44 44 42                FCC     "ADDB"          ; $05
1244 16e3 41 44 44 44                FCC     "ADDD"          ; $06
1245 16e7 41 4e 44 41                FCC     "ANDA"          ; $07
1246 16eb 41 4e 44 42                FCC     "ANDB"          ; $08
1247 16ef 41 4e 44 43                FCC     "ANDC"          ; $09 Should really  be "ANDCC"
1248 16f3 41 53 4c 20                FCC     "ASL "          ; $0A
1249 16f7 41 53 4c 41                FCC     "ASLA"          ; $0B
1250 16fb 41 53 4c 42                FCC     "ASLB"          ; $0C
1251 16ff 41 53 52 20                FCC     "ASR "          ; $0D
1252 1703 41 53 52 41                FCC     "ASRA"          ; $0E
1253 1707 41 53 52 42                FCC     "ASRB"          ; $0F
1254 170b 42 43 43 20                FCC     "BCC "          ; $10
1255 170f 42 43 53 20                FCC     "BCS "          ; $11
1256 1713 42 45 51 20                FCC     "BEQ "          ; $12
1257 1717 42 47 45 20                FCC     "BGE "          ; $13
1258 171b 42 47 54 20                FCC     "BGT "          ; $14
1259 171f 42 48 49 20                FCC     "BHI "          ; $15
1260 1723 42 49 54 41                FCC     "BITA"          ; $16
1261 1727 42 49 54 42                FCC     "BITB"          ; $17
1262 172b 42 4c 45 20                FCC     "BLE "          ; $18
1263 172f 42 4c 53 20                FCC     "BLS "          ; $19
1264 1733 42 4c 54 20                FCC     "BLT "          ; $1A
1265 1737 42 4d 49 20                FCC     "BMI "          ; $1B
1266 173b 42 4e 45 20                FCC     "BNE "          ; $1C
1267 173f 42 50 4c 20                FCC     "BPL "          ; $1D
1268 1743 42 52 41 20                FCC     "BRA "          ; $1E
1269 1747 42 52 4e 20                FCC     "BRN "          ; $1F
1270 174b 42 53 52 20                FCC     "BSR "          ; $20
1271 174f 42 56 43 20                FCC     "BVC "          ; $21
1272 1753 42 56 53 20                FCC     "BVS "          ; $22
1273 1757 43 4c 52 20                FCC     "CLR "          ; $23
1274 175b 43 4c 52 41                FCC     "CLRA"          ; $24
1275 175f 43 4c 52 42                FCC     "CLRB"          ; $25
1276 1763 43 4d 50 41                FCC     "CMPA"          ; $26
1277 1767 43 4d 50 42                FCC     "CMPB"          ; $27
1278 176b 43 4d 50 44                FCC     "CMPD"          ; $28
1279 176f 43 4d 50 53                FCC     "CMPS"          ; $29
1280 1773 43 4d 50 55                FCC     "CMPU"          ; $2A
1281 1777 43 4d 50 58                FCC     "CMPX"          ; $2B
1282 177b 43 4d 50 59                FCC     "CMPY"          ; $2C
1283 177f 43 4f 4d 41                FCC     "COMA"          ; $2D
1284 1783 43 4f 4d 42                FCC     "COMB"          ; $2E
1285 1787 43 4f 4d 20                FCC     "COM "          ; $2F
1286 178b 43 57 41 49                FCC     "CWAI"          ; $30
1287 178f 44 41 41 20                FCC     "DAA "          ; $31
1288 1793 44 45 43 20                FCC     "DEC "          ; $32
1289 1797 44 45 43 41                FCC     "DECA"          ; $33
1290 179b 44 45 43 42                FCC     "DECB"          ; $34
1291 179f 45 4f 52 41                FCC     "EORA"          ; $35
1292 17a3 45 4f 52 42                FCC     "EORB"          ; $36
1293 17a7 45 58 47 20                FCC     "EXG "          ; $37
1294 17ab 49 4e 43 20                FCC     "INC "          ; $38
1295 17af 49 4e 43 41                FCC     "INCA"          ; $39
1296 17b3 49 4e 43 42                FCC     "INCB"          ; $3A
1297 17b7 4a 4d 50 20                FCC     "JMP "          ; $3B
1298 17bb 4a 53 52 20                FCC     "JSR "          ; $3C
1299 17bf 4c 42 43 43                FCC     "LBCC"          ; $3D
1300 17c3 4c 42 43 53                FCC     "LBCS"          ; $3E
1301 17c7 4c 42 45 51                FCC     "LBEQ"          ; $3F
1302 17cb 4c 42 47 45                FCC     "LBGE"          ; $40
1303 17cf 4c 42 47 54                FCC     "LBGT"          ; $41
1304 17d3 4c 42 48 49                FCC     "LBHI"          ; $42
1305 17d7 4c 42 4c 45                FCC     "LBLE"          ; $43
1306 17db 4c 42 4c 53                FCC     "LBLS"          ; $44
1307 17df 4c 42 4c 54                FCC     "LBLT"          ; $45
1308 17e3 4c 42 4d 49                FCC     "LBMI"          ; $46
1309 17e7 4c 42 4e 45                FCC     "LBNE"          ; $47
1310 17eb 4c 42 50 4c                FCC     "LBPL"          ; $48
1311 17ef 4c 42 52 41                FCC     "LBRA"          ; $49
1312 17f3 4c 42 52 4e                FCC     "LBRN"          ; $4A
1313 17f7 4c 42 53 52                FCC     "LBSR"          ; $4B
1314 17fb 4c 42 56 43                FCC     "LBVC"          ; $4C
1315 17ff 4c 42 56 53                FCC     "LBVS"          ; $4D
1316 1803 4c 44 41 20                FCC     "LDA "          ; $4E
1317 1807 4c 44 42 20                FCC     "LDB "          ; $4F
1318 180b 4c 44 44 20                FCC     "LDD "          ; $50
1319 180f 4c 44 53 20                FCC     "LDS "          ; $51
1320 1813 4c 44 55 20                FCC     "LDU "          ; $52
1321 1817 4c 44 58 20                FCC     "LDX "          ; $53
1322 181b 4c 44 59 20                FCC     "LDY "          ; $54
1323 181f 4c 45 41 53                FCC     "LEAS"          ; $55
1324 1823 4c 45 41 55                FCC     "LEAU"          ; $56
1325 1827 4c 45 41 58                FCC     "LEAX"          ; $57
1326 182b 4c 45 41 59                FCC     "LEAY"          ; $58
1327 182f 4c 53 52 20                FCC     "LSR "          ; $59
1328 1833 4c 53 52 41                FCC     "LSRA"          ; $5A
1329 1837 4c 53 52 42                FCC     "LSRB"          ; $5B
1330 183b 4d 55 4c 20                FCC     "MUL "          ; $5C
1331 183f 4e 45 47 20                FCC     "NEG "          ; $5D
1332 1843 4e 45 47 41                FCC     "NEGA"          ; $5E
1333 1847 4e 45 47 42                FCC     "NEGB"          ; $5F
1334 184b 4e 4f 50 20                FCC     "NOP "          ; $60
1335 184f 4f 52 41 20                FCC     "ORA "          ; $61
1336 1853 4f 52 42 20                FCC     "ORB "          ; $62
1337 1857 4f 52 43 43                FCC     "ORCC"          ; $63
1338 185b 50 53 48 53                FCC     "PSHS"          ; $64
1339 185f 50 53 48 55                FCC     "PSHU"          ; $65
1340 1863 50 55 4c 53                FCC     "PULS"          ; $66
1341 1867 50 55 4c 55                FCC     "PULU"          ; $67
1342 186b 52 4f 4c 20                FCC     "ROL "          ; $68
1343 186f 52 4f 4c 41                FCC     "ROLA"          ; $69
1344 1873 52 4f 4c 42                FCC     "ROLB"          ; $6A
1345 1877 52 4f 52 20                FCC     "ROR "          ; $6B
1346 187b 52 4f 52 41                FCC     "RORA"          ; $6C
1347 187f 52 4f 52 42                FCC     "RORB"          ; $6D
1348 1883 52 54 49 20                FCC     "RTI "          ; $6E
1349 1887 52 54 53 20                FCC     "RTS "          ; $6F
1350 188b 53 42 43 41                FCC     "SBCA"          ; $70
1351 188f 53 42 43 42                FCC     "SBCB"          ; $71
1352 1893 53 45 58 20                FCC     "SEX "          ; $72
1353 1897 53 54 41 20                FCC     "STA "          ; $73
1354 189b 53 54 42 20                FCC     "STB "          ; $74
1355 189f 53 54 44 20                FCC     "STD "          ; $75
1356 18a3 53 54 53 20                FCC     "STS "          ; $76
1357 18a7 53 54 55 20                FCC     "STU "          ; $77
1358 18ab 53 54 58 20                FCC     "STX "          ; $78
1359 18af 53 54 59 20                FCC     "STY "          ; $79
1360 18b3 53 55 42 41                FCC     "SUBA"          ; $7A
1361 18b7 53 55 42 42                FCC     "SUBB"          ; $7B
1362 18bb 53 55 42 44                FCC     "SUBD"          ; $7C
1363 18bf 53 57 49 20                FCC     "SWI "          ; $7D
1364 18c3 53 57 49 32                FCC     "SWI2"          ; $7E
1365 18c7 53 57 49 33                FCC     "SWI3"          ; $7F
1366 18cb 53 59 4e 43                FCC     "SYNC"          ; $80
1367 18cf 54 46 52 20                FCC     "TFR "          ; $81
1368 18d3 54 53 54 20                FCC     "TST "          ; $82
1369 18d7 54 53 54 41                FCC     "TSTA"          ; $83
1370 18db 54 53 54 42                FCC     "TSTB"          ; $84
1371                         
1372                         ; Lengths of instructions given an addressing mode. Matches values of
1373                         ; AM_* Indexed addessing instructions length can increase due to post
1374                         ; byte.
1375                         LENGTHS
1376 18df 01                         FCB     1               ; 0 AM_INVALID
1377 18e0 01                         FCB     1               ; 1 AM_INHERENT
1378 18e1 02                         FCB     2               ; 2 AM_IMMEDIATE8
1379 18e2 03                         FCB     3               ; 3 AM_IMMEDIATE16
1380 18e3 02                         FCB     2               ; 4 AM_DIRECT
1381 18e4 03                         FCB     3               ; 5 AM_EXTENDED
1382 18e5 02                         FCB     2               ; 6 AM_RELATIVE8
1383 18e6 03                         FCB     3               ; 7 AM_RELATIVE16
1384 18e7 02                         FCB     2               ; 8 AM_INDEXED
1385                         
1386                         ; Lookup table to return needed remaining spaces to print to pad out
1387                         ; instruction to correct column in disassembly.
1388                         ; # bytes: 1 2 3 4
1389                         ; Padding: 9 6 3 0
1390                         PADDING
1391 18e8 0a 07 04 01                FCB     10,7,4,1
1392                         
1393                         ; Lookup table to return number of additional bytes for indexed
1394                         ; addressing based on low order 5 bits of postbyte. Based on
1395                         ; detailed list of values below.
1396                         
1397                         POSTBYTES
1398 18ec 00 00 00 00 00 00          FCB     0,0,0,0,0,0,0,0
     00 00
1399 18f4 01 02 00 00 01 02          FCB     1,2,0,0,1,2,0,0
     00 00
1400 18fc 00 00 00 00 00 00          FCB     0,0,0,0,0,0,0,0
     00 00
1401 1904 01 02 00 00 01 02          FCB     1,2,0,0,1,2,0,2
     00 02
1402                         
1403                         ; Pattern:  # Extra bytes:
1404                         ; --------  --------------
1405                         ; 0XXXXXXX   0
1406                         ; 1XX00000   0
1407                         ; 1XX00001   0
1408                         ; 1XX00010   0
1409                         ; 1XX00011   0
1410                         ; 1XX00100   0
1411                         ; 1X000101   0
1412                         ; 1XX00110   0
1413                         ; 1XX00111   0 (INVALID)
1414                         ; 1XX01000   1
1415                         ; 1XX01001   2
1416                         ; 1XX01010   0 (INVALID)
1417                         ; 1XX01011   0
1418                         ; 1XX01100   1
1419                         ; 1XX01101   2
1420                         ; 1XX01110   0 (INVALID)
1421                         ; 1XX01111   0 (INVALID)
1422                         ; 1XX10000   0 (INVALID)
1423                         ; 1XX10001   0
1424                         ; 1XX10010   0 (INVALID)
1425                         ; 1XX10011   0
1426                         ; 1XX10100   0
1427                         ; 1XX10101   0
1428                         ; 1XX10110   0
1429                         ; 1XX10111   0 (INVALID)
1430                         ; 1XX11000   1
1431                         ; 1XX11001   2
1432                         ; 1XX11010   0 (INVALID)
1433                         ; 1XX11011   0
1434                         ; 1XX11100   1
1435                         ; 1XX11101   2
1436                         ; 1XX11110   0 (INVALID)
1437                         ; 1XX11111   2
1438                         
1439                         ; Opcodes. Listed in order indexed by op code. Defines the mnemonic.
1440                         OPCODES
1441 190c 5d                         FCB     OP_NEG          ; 00
1442 190d 00                         FCB     OP_INV          ; 01
1443 190e 00                         FCB     OP_INV          ; 02
1444 190f 2e                         FCB     OP_COMB         ; 03
1445 1910 59                         FCB     OP_LSR          ; 04
1446 1911 00                         FCB     OP_INV          ; 05
1447 1912 6b                         FCB     OP_ROR          ; 06
1448 1913 0d                         FCB     OP_ASR          ; 07
1449 1914 0a                         FCB     OP_ASL          ; 08
1450 1915 68                         FCB     OP_ROL          ; 09
1451 1916 32                         FCB     OP_DEC          ; 0A
1452 1917 00                         FCB     OP_INV          ; 0B
1453 1918 38                         FCB     OP_INC          ; 0C
1454 1919 82                         FCB     OP_TST          ; 0D
1455 191a 3b                         FCB     OP_JMP          ; 0E
1456 191b 23                         FCB     OP_CLR          ; 0F
1457                         
1458 191c 00                         FCB     OP_INV          ; 10 Page 2 extended opcodes (see other table)
1459 191d 00                         FCB     OP_INV          ; 11 Page 3 extended opcodes (see other table)
1460 191e 60                         FCB     OP_NOP          ; 12
1461 191f 80                         FCB     OP_SYNC         ; 13
1462 1920 00                         FCB     OP_INV          ; 14
1463 1921 00                         FCB     OP_INV          ; 15
1464 1922 49                         FCB     OP_LBRA         ; 16
1465 1923 4b                         FCB     OP_LBSR         ; 17
1466 1924 00                         FCB     OP_INV          ; 18
1467 1925 31                         FCB     OP_DAA          ; 19
1468 1926 63                         FCB     OP_ORCC         ; 1A
1469 1927 00                         FCB     OP_INV          ; 1B
1470 1928 09                         FCB     OP_ANDCC        ; 1C
1471 1929 72                         FCB     OP_SEX          ; 1D
1472 192a 37                         FCB     OP_EXG          ; 1E
1473 192b 81                         FCB     OP_TFR          ; 1F
1474                         
1475 192c 1e                         FCB     OP_BRA          ; 20
1476 192d 1f                         FCB     OP_BRN          ; 21
1477 192e 15                         FCB     OP_BHI          ; 22
1478 192f 19                         FCB     OP_BLS          ; 23
1479 1930 10                         FCB     OP_BCC          ; 24
1480 1931 11                         FCB     OP_BCS          ; 25
1481 1932 1c                         FCB     OP_BNE          ; 26
1482 1933 12                         FCB     OP_BEQ          ; 27
1483 1934 21                         FCB     OP_BVC          ; 28
1484 1935 22                         FCB     OP_BVS          ; 29
1485 1936 1d                         FCB     OP_BPL          ; 2A
1486 1937 1b                         FCB     OP_BMI          ; 2B
1487 1938 13                         FCB     OP_BGE          ; 2C
1488 1939 1a                         FCB     OP_BLT          ; 2D
1489 193a 14                         FCB     OP_BGT          ; 2E
1490 193b 18                         FCB     OP_BLE          ; 2F
1491                         
1492 193c 57                         FCB     OP_LEAX         ; 30
1493 193d 58                         FCB     OP_LEAY         ; 31
1494 193e 55                         FCB     OP_LEAS         ; 32
1495 193f 56                         FCB     OP_LEAU         ; 33
1496 1940 64                         FCB     OP_PSHS         ; 34
1497 1941 66                         FCB     OP_PULS         ; 35
1498 1942 65                         FCB     OP_PSHU         ; 36
1499 1943 67                         FCB     OP_PULU         ; 37
1500 1944 00                         FCB     OP_INV          ; 38
1501 1945 6f                         FCB     OP_RTS          ; 39
1502 1946 01                         FCB     OP_ABX          ; 3A
1503 1947 6e                         FCB     OP_RTI          ; 3B
1504 1948 30                         FCB     OP_CWAI         ; 3C
1505 1949 5c                         FCB     OP_MUL          ; 3D
1506 194a 00                         FCB     OP_INV          ; 3E
1507 194b 7d                         FCB     OP_SWI          ; 3F
1508                         
1509 194c 5e                         FCB     OP_NEGA         ; 40
1510 194d 00                         FCB     OP_INV          ; 41
1511 194e 00                         FCB     OP_INV          ; 42
1512 194f 2d                         FCB     OP_COMA         ; 43
1513 1950 5a                         FCB     OP_LSRA         ; 44
1514 1951 00                         FCB     OP_INV          ; 45
1515 1952 6c                         FCB     OP_RORA         ; 46
1516 1953 0e                         FCB     OP_ASRA         ; 47
1517 1954 0b                         FCB     OP_ASLA         ; 48
1518 1955 69                         FCB     OP_ROLA         ; 49
1519 1956 33                         FCB     OP_DECA         ; 4A
1520 1957 00                         FCB     OP_INV          ; 4B
1521 1958 39                         FCB     OP_INCA         ; 4C
1522 1959 83                         FCB     OP_TSTA         ; 4D
1523 195a 00                         FCB     OP_INV          ; 4E
1524 195b 24                         FCB     OP_CLRA         ; 4F
1525                         
1526 195c 5f                         FCB     OP_NEGB         ; 50
1527 195d 00                         FCB     OP_INV          ; 51
1528 195e 00                         FCB     OP_INV          ; 52
1529 195f 2e                         FCB     OP_COMB         ; 53
1530 1960 5b                         FCB     OP_LSRB         ; 54
1531 1961 00                         FCB     OP_INV          ; 55
1532 1962 6d                         FCB     OP_RORB         ; 56
1533 1963 0f                         FCB     OP_ASRB         ; 57
1534 1964 0c                         FCB     OP_ASLB         ; 58
1535 1965 6a                         FCB     OP_ROLB         ; 59
1536 1966 34                         FCB     OP_DECB         ; 5A
1537 1967 00                         FCB     OP_INV          ; 5B
1538 1968 3a                         FCB     OP_INCB         ; 5C
1539 1969 84                         FCB     OP_TSTB         ; 5D
1540 196a 00                         FCB     OP_INV          ; 5E
1541 196b 25                         FCB     OP_CLRB         ; 5F
1542                         
1543 196c 5d                         FCB     OP_NEG          ; 60
1544 196d 00                         FCB     OP_INV          ; 61
1545 196e 00                         FCB     OP_INV          ; 62
1546 196f 2f                         FCB     OP_COM          ; 63
1547 1970 59                         FCB     OP_LSR          ; 64
1548 1971 00                         FCB     OP_INV          ; 65
1549 1972 6b                         FCB     OP_ROR          ; 66
1550 1973 0d                         FCB     OP_ASR          ; 67
1551 1974 0a                         FCB     OP_ASL          ; 68
1552 1975 68                         FCB     OP_ROL          ; 69
1553 1976 32                         FCB     OP_DEC          ; 6A
1554 1977 00                         FCB     OP_INV          ; 6B
1555 1978 38                         FCB     OP_INC          ; 6C
1556 1979 82                         FCB     OP_TST          ; 6D
1557 197a 3b                         FCB     OP_JMP          ; 6E
1558 197b 23                         FCB     OP_CLR          ; 6F
1559                         
1560 197c 5d                         FCB     OP_NEG          ; 70
1561 197d 00                         FCB     OP_INV          ; 71
1562 197e 00                         FCB     OP_INV          ; 72
1563 197f 2f                         FCB     OP_COM          ; 73
1564 1980 59                         FCB     OP_LSR          ; 74
1565 1981 00                         FCB     OP_INV          ; 75
1566 1982 6b                         FCB     OP_ROR          ; 76
1567 1983 0d                         FCB     OP_ASR          ; 77
1568 1984 0a                         FCB     OP_ASL          ; 78
1569 1985 68                         FCB     OP_ROL          ; 79
1570 1986 32                         FCB     OP_DEC          ; 7A
1571 1987 00                         FCB     OP_INV          ; 7B
1572 1988 38                         FCB     OP_INC          ; 7C
1573 1989 82                         FCB     OP_TST          ; 7D
1574 198a 3b                         FCB     OP_JMP          ; 7E
1575 198b 23                         FCB     OP_CLR          ; 7F
1576                         
1577 198c 7a                         FCB     OP_SUBA         ; 80
1578 198d 26                         FCB     OP_CMPA         ; 81
1579 198e 70                         FCB     OP_SBCA         ; 82
1580 198f 7c                         FCB     OP_SUBD         ; 83
1581 1990 07                         FCB     OP_ANDA         ; 84
1582 1991 16                         FCB     OP_BITA         ; 85
1583 1992 4e                         FCB     OP_LDA          ; 86
1584 1993 00                         FCB     OP_INV          ; 87
1585 1994 35                         FCB     OP_EORA         ; 88
1586 1995 02                         FCB     OP_ADCA         ; 89
1587 1996 61                         FCB     OP_ORA          ; 8A
1588 1997 04                         FCB     OP_ADDA         ; 8B
1589 1998 2b                         FCB     OP_CMPX         ; 8C
1590 1999 20                         FCB     OP_BSR          ; 8D
1591 199a 53                         FCB     OP_LDX          ; 8E
1592 199b 00                         FCB     OP_INV          ; 8F
1593                         
1594 199c 7a                         FCB     OP_SUBA         ; 90
1595 199d 26                         FCB     OP_CMPA         ; 91
1596 199e 70                         FCB     OP_SBCA         ; 92
1597 199f 7c                         FCB     OP_SUBD         ; 93
1598 19a0 07                         FCB     OP_ANDA         ; 94
1599 19a1 16                         FCB     OP_BITA         ; 95
1600 19a2 4e                         FCB     OP_LDA          ; 96
1601 19a3 73                         FCB     OP_STA          ; 97
1602 19a4 35                         FCB     OP_EORA         ; 98
1603 19a5 02                         FCB     OP_ADCA         ; 99
1604 19a6 61                         FCB     OP_ORA          ; 9A
1605 19a7 04                         FCB     OP_ADDA         ; 9B
1606 19a8 2b                         FCB     OP_CMPX         ; 9C
1607 19a9 3c                         FCB     OP_JSR          ; 9D
1608 19aa 53                         FCB     OP_LDX          ; 9E
1609 19ab 78                         FCB     OP_STX          ; 9F
1610                         
1611 19ac 7a                         FCB     OP_SUBA         ; A0
1612 19ad 26                         FCB     OP_CMPA         ; A1
1613 19ae 70                         FCB     OP_SBCA         ; A2
1614 19af 7c                         FCB     OP_SUBD         ; A3
1615 19b0 07                         FCB     OP_ANDA         ; A4
1616 19b1 16                         FCB     OP_BITA         ; A5
1617 19b2 4e                         FCB     OP_LDA          ; A6
1618 19b3 73                         FCB     OP_STA          ; A7
1619 19b4 35                         FCB     OP_EORA         ; A8
1620 19b5 02                         FCB     OP_ADCA         ; A9
1621 19b6 61                         FCB     OP_ORA          ; AA
1622 19b7 04                         FCB     OP_ADDA         ; AB
1623 19b8 2b                         FCB     OP_CMPX         ; AC
1624 19b9 3c                         FCB     OP_JSR          ; AD
1625 19ba 53                         FCB     OP_LDX          ; AE
1626 19bb 78                         FCB     OP_STX          ; AF
1627                         
1628 19bc 7a                         FCB     OP_SUBA         ; B0
1629 19bd 26                         FCB     OP_CMPA         ; B1
1630 19be 70                         FCB     OP_SBCA         ; B2
1631 19bf 7c                         FCB     OP_SUBD         ; B3
1632 19c0 07                         FCB     OP_ANDA         ; B4
1633 19c1 16                         FCB     OP_BITA         ; B5
1634 19c2 4e                         FCB     OP_LDA          ; B6
1635 19c3 73                         FCB     OP_STA          ; B7
1636 19c4 35                         FCB     OP_EORA         ; B8
1637 19c5 02                         FCB     OP_ADCA         ; B9
1638 19c6 61                         FCB     OP_ORA          ; BA
1639 19c7 04                         FCB     OP_ADDA         ; BB
1640 19c8 2b                         FCB     OP_CMPX         ; BC
1641 19c9 3c                         FCB     OP_JSR          ; BD
1642 19ca 53                         FCB     OP_LDX          ; BE
1643 19cb 78                         FCB     OP_STX          ; BF
1644                         
1645 19cc 7b                         FCB     OP_SUBB         ; C0
1646 19cd 27                         FCB     OP_CMPB         ; C1
1647 19ce 71                         FCB     OP_SBCB         ; C2
1648 19cf 06                         FCB     OP_ADDD         ; C3
1649 19d0 08                         FCB     OP_ANDB         ; C4
1650 19d1 17                         FCB     OP_BITB         ; C5
1651 19d2 4f                         FCB     OP_LDB          ; C6
1652 19d3 00                         FCB     OP_INV          ; C7
1653 19d4 36                         FCB     OP_EORB         ; C8
1654 19d5 03                         FCB     OP_ADCB         ; C9
1655 19d6 62                         FCB     OP_ORB          ; CA
1656 19d7 05                         FCB     OP_ADDB         ; CB
1657 19d8 50                         FCB     OP_LDD          ; CC
1658 19d9 00                         FCB     OP_INV          ; CD
1659 19da 52                         FCB     OP_LDU          ; CE
1660 19db 00                         FCB     OP_INV          ; CF
1661                         
1662 19dc 7b                         FCB     OP_SUBB         ; D0
1663 19dd 27                         FCB     OP_CMPB         ; D1
1664 19de 71                         FCB     OP_SBCB         ; D2
1665 19df 06                         FCB     OP_ADDD         ; D3
1666 19e0 08                         FCB     OP_ANDB         ; D4
1667 19e1 17                         FCB     OP_BITB         ; D5
1668 19e2 4f                         FCB     OP_LDB          ; D6
1669 19e3 74                         FCB     OP_STB          ; D7
1670 19e4 36                         FCB     OP_EORB         ; D8
1671 19e5 03                         FCB     OP_ADCB         ; D9
1672 19e6 62                         FCB     OP_ORB          ; DA
1673 19e7 05                         FCB     OP_ADDB         ; DB
1674 19e8 50                         FCB     OP_LDD          ; DC
1675 19e9 75                         FCB     OP_STD          ; DD
1676 19ea 52                         FCB     OP_LDU          ; DE
1677 19eb 77                         FCB     OP_STU          ; DF
1678                         
1679 19ec 7b                         FCB     OP_SUBB         ; E0
1680 19ed 27                         FCB     OP_CMPB         ; E1
1681 19ee 71                         FCB     OP_SBCB         ; E2
1682 19ef 06                         FCB     OP_ADDD         ; E3
1683 19f0 08                         FCB     OP_ANDB         ; E4
1684 19f1 17                         FCB     OP_BITB         ; E5
1685 19f2 4f                         FCB     OP_LDB          ; E6
1686 19f3 74                         FCB     OP_STB          ; E7
1687 19f4 36                         FCB     OP_EORB         ; E8
1688 19f5 03                         FCB     OP_ADCB         ; E9
1689 19f6 62                         FCB     OP_ORB          ; EA
1690 19f7 05                         FCB     OP_ADDB         ; EB
1691 19f8 50                         FCB     OP_LDD          ; EC
1692 19f9 75                         FCB     OP_STD          ; ED
1693 19fa 52                         FCB     OP_LDU          ; EE
1694 19fb 77                         FCB     OP_STU          ; EF
1695                         
1696 19fc 7b                         FCB     OP_SUBB         ; F0
1697 19fd 27                         FCB     OP_CMPB         ; F1
1698 19fe 71                         FCB     OP_SBCB         ; F2
1699 19ff 06                         FCB     OP_ADDD         ; F3
1700 1a00 08                         FCB     OP_ANDB         ; F4
1701 1a01 17                         FCB     OP_BITB         ; F5
1702 1a02 4f                         FCB     OP_LDB          ; F6
1703 1a03 74                         FCB     OP_STB          ; F7
1704 1a04 36                         FCB     OP_EORB         ; F8
1705 1a05 03                         FCB     OP_ADCB         ; F9
1706 1a06 62                         FCB     OP_ORB          ; FA
1707 1a07 05                         FCB     OP_ADDB         ; FB
1708 1a08 50                         FCB     OP_LDD          ; FC
1709 1a09 75                         FCB     OP_STD          ; FD
1710 1a0a 52                         FCB     OP_LDU          ; FE
1711 1a0b 77                         FCB     OP_STU          ; FF
1712                         
1713                         ; Table of addressing modes. Listed in order,indexed by op code.
1714                         MODES
1715 1a0c 04                         FCB     AM_DIRECT       ; 00
1716 1a0d 00                         FCB     AM_INVALID      ; 01
1717 1a0e 00                         FCB     AM_INVALID      ; 02
1718 1a0f 04                         FCB     AM_DIRECT       ; 03
1719 1a10 04                         FCB     AM_DIRECT       ; 04
1720 1a11 00                         FCB     AM_INVALID      ; 05
1721 1a12 04                         FCB     AM_DIRECT       ; 06
1722 1a13 04                         FCB     AM_DIRECT       ; 07
1723 1a14 04                         FCB     AM_DIRECT       ; 08
1724 1a15 04                         FCB     AM_DIRECT       ; 09
1725 1a16 04                         FCB     AM_DIRECT       ; 0A
1726 1a17 00                         FCB     AM_INVALID      ; 0B
1727 1a18 04                         FCB     AM_DIRECT       ; 0C
1728 1a19 04                         FCB     AM_DIRECT       ; 0D
1729 1a1a 04                         FCB     AM_DIRECT       ; 0E
1730 1a1b 04                         FCB     AM_DIRECT       ; 0F
1731                         
1732 1a1c 00                         FCB     AM_INVALID      ; 10 Page 2 extended opcodes (see other table)
1733 1a1d 00                         FCB     AM_INVALID      ; 11 Page 3 extended opcodes (see other table)
1734 1a1e 01                         FCB     AM_INHERENT     ; 12
1735 1a1f 01                         FCB     AM_INHERENT     ; 13
1736 1a20 00                         FCB     AM_INVALID      ; 14
1737 1a21 00                         FCB     AM_INVALID      ; 15
1738 1a22 07                         FCB     AM_RELATIVE16   ; 16
1739 1a23 07                         FCB     AM_RELATIVE16   ; 17
1740 1a24 00                         FCB     AM_INVALID      ; 18
1741 1a25 01                         FCB     AM_INHERENT     ; 19
1742 1a26 02                         FCB     AM_IMMEDIATE8   ; 1A
1743 1a27 00                         FCB     AM_INVALID      ; 1B
1744 1a28 02                         FCB     AM_IMMEDIATE8   ; 1C
1745 1a29 01                         FCB     AM_INHERENT     ; 1D
1746 1a2a 02                         FCB     AM_IMMEDIATE8   ; 1E
1747 1a2b 02                         FCB     AM_IMMEDIATE8   ; 1F
1748                         
1749 1a2c 06                         FCB     AM_RELATIVE8    ; 20
1750 1a2d 06                         FCB     AM_RELATIVE8    ; 21
1751 1a2e 06                         FCB     AM_RELATIVE8    ; 22
1752 1a2f 06                         FCB     AM_RELATIVE8    ; 23
1753 1a30 06                         FCB     AM_RELATIVE8    ; 24
1754 1a31 06                         FCB     AM_RELATIVE8    ; 25
1755 1a32 06                         FCB     AM_RELATIVE8    ; 26
1756 1a33 06                         FCB     AM_RELATIVE8    ; 27
1757 1a34 06                         FCB     AM_RELATIVE8    ; 28
1758 1a35 06                         FCB     AM_RELATIVE8    ; 29
1759 1a36 06                         FCB     AM_RELATIVE8    ; 2A
1760 1a37 06                         FCB     AM_RELATIVE8    ; 2B
1761 1a38 06                         FCB     AM_RELATIVE8    ; 2C
1762 1a39 06                         FCB     AM_RELATIVE8    ; 2D
1763 1a3a 06                         FCB     AM_RELATIVE8    ; 2E
1764 1a3b 06                         FCB     AM_RELATIVE8    ; 2F
1765                         
1766 1a3c 08                         FCB     AM_INDEXED      ; 30
1767 1a3d 08                         FCB     AM_INDEXED      ; 31
1768 1a3e 08                         FCB     AM_INDEXED      ; 32
1769 1a3f 08                         FCB     AM_INDEXED      ; 33
1770 1a40 02                         FCB     AM_IMMEDIATE8   ; 34
1771 1a41 02                         FCB     AM_IMMEDIATE8   ; 35
1772 1a42 02                         FCB     AM_IMMEDIATE8   ; 36
1773 1a43 02                         FCB     AM_IMMEDIATE8   ; 37
1774 1a44 00                         FCB     AM_INVALID      ; 38
1775 1a45 01                         FCB     AM_INHERENT     ; 39
1776 1a46 01                         FCB     AM_INHERENT     ; 3A
1777 1a47 01                         FCB     AM_INHERENT     ; 3B
1778 1a48 02                         FCB     AM_IMMEDIATE8   ; 3C
1779 1a49 01                         FCB     AM_INHERENT     ; 3D
1780 1a4a 00                         FCB     AM_INVALID      ; 3E
1781 1a4b 01                         FCB     AM_INHERENT     ; 3F
1782                         
1783 1a4c 01                         FCB     AM_INHERENT     ; 40
1784 1a4d 00                         FCB     AM_INVALID      ; 41
1785 1a4e 00                         FCB     AM_INVALID      ; 42
1786 1a4f 01                         FCB     AM_INHERENT     ; 43
1787 1a50 01                         FCB     AM_INHERENT     ; 44
1788 1a51 00                         FCB     AM_INVALID      ; 45
1789 1a52 01                         FCB     AM_INHERENT     ; 46
1790 1a53 01                         FCB     AM_INHERENT     ; 47
1791 1a54 01                         FCB     AM_INHERENT     ; 48
1792 1a55 01                         FCB     AM_INHERENT     ; 49
1793 1a56 01                         FCB     AM_INHERENT     ; 4A
1794 1a57 00                         FCB     AM_INVALID      ; 4B
1795 1a58 01                         FCB     AM_INHERENT     ; 4C
1796 1a59 01                         FCB     AM_INHERENT     ; 4D
1797 1a5a 00                         FCB     AM_INVALID      ; 4E
1798 1a5b 01                         FCB     AM_INHERENT     ; 4F
1799                         
1800 1a5c 01                         FCB     AM_INHERENT     ; 50
1801 1a5d 00                         FCB     AM_INVALID      ; 51
1802 1a5e 00                         FCB     AM_INVALID      ; 52
1803 1a5f 01                         FCB     AM_INHERENT     ; 53
1804 1a60 01                         FCB     AM_INHERENT     ; 54
1805 1a61 00                         FCB     AM_INVALID      ; 55
1806 1a62 01                         FCB     AM_INHERENT     ; 56
1807 1a63 01                         FCB     AM_INHERENT     ; 57
1808 1a64 01                         FCB     AM_INHERENT     ; 58
1809 1a65 01                         FCB     AM_INHERENT     ; 59
1810 1a66 01                         FCB     AM_INHERENT     ; 5A
1811 1a67 00                         FCB     AM_INVALID      ; 5B
1812 1a68 01                         FCB     AM_INHERENT     ; 5C
1813 1a69 01                         FCB     AM_INHERENT     ; 5D
1814 1a6a 00                         FCB     AM_INVALID      ; 5E
1815 1a6b 01                         FCB     AM_INHERENT     ; 5F
1816                         
1817 1a6c 08                         FCB     AM_INDEXED      ; 60
1818 1a6d 00                         FCB     AM_INVALID      ; 61
1819 1a6e 00                         FCB     AM_INVALID      ; 62
1820 1a6f 08                         FCB     AM_INDEXED      ; 63
1821 1a70 08                         FCB     AM_INDEXED      ; 64
1822 1a71 00                         FCB     AM_INVALID      ; 65
1823 1a72 08                         FCB     AM_INDEXED      ; 66
1824 1a73 08                         FCB     AM_INDEXED      ; 67
1825 1a74 08                         FCB     AM_INDEXED      ; 68
1826 1a75 08                         FCB     AM_INDEXED      ; 69
1827 1a76 08                         FCB     AM_INDEXED      ; 6A
1828 1a77 00                         FCB     AM_INVALID      ; 6B
1829 1a78 08                         FCB     AM_INDEXED      ; 6C
1830 1a79 08                         FCB     AM_INDEXED      ; 6D
1831 1a7a 08                         FCB     AM_INDEXED      ; 6E
1832 1a7b 08                         FCB     AM_INDEXED      ; 6F
1833                         
1834 1a7c 05                         FCB     AM_EXTENDED     ; 70
1835 1a7d 00                         FCB     AM_INVALID      ; 71
1836 1a7e 00                         FCB     AM_INVALID      ; 72
1837 1a7f 05                         FCB     AM_EXTENDED     ; 73
1838 1a80 05                         FCB     AM_EXTENDED     ; 74
1839 1a81 00                         FCB     AM_INVALID      ; 75
1840 1a82 05                         FCB     AM_EXTENDED     ; 76
1841 1a83 05                         FCB     AM_EXTENDED     ; 77
1842 1a84 05                         FCB     AM_EXTENDED     ; 78
1843 1a85 05                         FCB     AM_EXTENDED     ; 79
1844 1a86 05                         FCB     AM_EXTENDED     ; 7A
1845 1a87 00                         FCB     AM_INVALID      ; 7B
1846 1a88 05                         FCB     AM_EXTENDED     ; 7C
1847 1a89 05                         FCB     AM_EXTENDED     ; 7D
1848 1a8a 05                         FCB     AM_EXTENDED     ; 7E
1849 1a8b 05                         FCB     AM_EXTENDED     ; 7F
1850                         
1851 1a8c 02                         FCB     AM_IMMEDIATE8   ; 80
1852 1a8d 02                         FCB     AM_IMMEDIATE8   ; 81
1853 1a8e 02                         FCB     AM_IMMEDIATE8   ; 82
1854 1a8f 03                         FCB     AM_IMMEDIATE16  ; 83
1855 1a90 02                         FCB     AM_IMMEDIATE8   ; 84
1856 1a91 02                         FCB     AM_IMMEDIATE8   ; 85
1857 1a92 02                         FCB     AM_IMMEDIATE8   ; 86
1858 1a93 00                         FCB     AM_INVALID      ; 87
1859 1a94 02                         FCB     AM_IMMEDIATE8   ; 88
1860 1a95 02                         FCB     AM_IMMEDIATE8   ; 89
1861 1a96 02                         FCB     AM_IMMEDIATE8   ; 8A
1862 1a97 02                         FCB     AM_IMMEDIATE8   ; 8B
1863 1a98 03                         FCB     AM_IMMEDIATE16  ; 8C
1864 1a99 06                         FCB     AM_RELATIVE8    ; 8D
1865 1a9a 03                         FCB     AM_IMMEDIATE16  ; 8E
1866 1a9b 00                         FCB     AM_INVALID      ; 8F
1867                         
1868 1a9c 04                         FCB     AM_DIRECT       ; 90
1869 1a9d 04                         FCB     AM_DIRECT       ; 91
1870 1a9e 04                         FCB     AM_DIRECT       ; 92
1871 1a9f 04                         FCB     AM_DIRECT       ; 93
1872 1aa0 04                         FCB     AM_DIRECT       ; 94
1873 1aa1 04                         FCB     AM_DIRECT       ; 95
1874 1aa2 04                         FCB     AM_DIRECT       ; 96
1875 1aa3 04                         FCB     AM_DIRECT       ; 97
1876 1aa4 04                         FCB     AM_DIRECT       ; 98
1877 1aa5 04                         FCB     AM_DIRECT       ; 99
1878 1aa6 04                         FCB     AM_DIRECT       ; 9A
1879 1aa7 04                         FCB     AM_DIRECT       ; 9B
1880 1aa8 04                         FCB     AM_DIRECT       ; 9C
1881 1aa9 04                         FCB     AM_DIRECT       ; 9D
1882 1aaa 04                         FCB     AM_DIRECT       ; 9E
1883 1aab 04                         FCB     AM_DIRECT       ; 9F
1884                         
1885 1aac 08                         FCB     AM_INDEXED      ; A0
1886 1aad 08                         FCB     AM_INDEXED      ; A1
1887 1aae 08                         FCB     AM_INDEXED      ; A2
1888 1aaf 08                         FCB     AM_INDEXED      ; A3
1889 1ab0 08                         FCB     AM_INDEXED      ; A4
1890 1ab1 08                         FCB     AM_INDEXED      ; A5
1891 1ab2 08                         FCB     AM_INDEXED      ; A6
1892 1ab3 08                         FCB     AM_INDEXED      ; A7
1893 1ab4 08                         FCB     AM_INDEXED      ; A8
1894 1ab5 08                         FCB     AM_INDEXED      ; A9
1895 1ab6 08                         FCB     AM_INDEXED      ; AA
1896 1ab7 08                         FCB     AM_INDEXED      ; AB
1897 1ab8 08                         FCB     AM_INDEXED      ; AC
1898 1ab9 08                         FCB     AM_INDEXED      ; AD
1899 1aba 08                         FCB     AM_INDEXED      ; AE
1900 1abb 08                         FCB     AM_INDEXED      ; AF
1901                         
1902 1abc 05                         FCB     AM_EXTENDED     ; B0
1903 1abd 05                         FCB     AM_EXTENDED     ; B1
1904 1abe 05                         FCB     AM_EXTENDED     ; B2
1905 1abf 05                         FCB     AM_EXTENDED     ; B3
1906 1ac0 05                         FCB     AM_EXTENDED     ; B4
1907 1ac1 05                         FCB     AM_EXTENDED     ; B5
1908 1ac2 05                         FCB     AM_EXTENDED     ; B6
1909 1ac3 05                         FCB     AM_EXTENDED     ; B7
1910 1ac4 05                         FCB     AM_EXTENDED     ; B8
1911 1ac5 05                         FCB     AM_EXTENDED     ; B9
1912 1ac6 05                         FCB     AM_EXTENDED     ; BA
1913 1ac7 05                         FCB     AM_EXTENDED     ; BB
1914 1ac8 05                         FCB     AM_EXTENDED     ; BC
1915 1ac9 05                         FCB     AM_EXTENDED     ; BD
1916 1aca 05                         FCB     AM_EXTENDED     ; BE
1917 1acb 05                         FCB     AM_EXTENDED     ; BF
1918                         
1919 1acc 02                         FCB     AM_IMMEDIATE8   ; C0
1920 1acd 02                         FCB     AM_IMMEDIATE8   ; C1
1921 1ace 02                         FCB     AM_IMMEDIATE8   ; C2
1922 1acf 03                         FCB     AM_IMMEDIATE16  ; C3
1923 1ad0 02                         FCB     AM_IMMEDIATE8   ; C4
1924 1ad1 02                         FCB     AM_IMMEDIATE8   ; C5
1925 1ad2 02                         FCB     AM_IMMEDIATE8   ; C6
1926 1ad3 00                         FCB     AM_INVALID      ; C7
1927 1ad4 02                         FCB     AM_IMMEDIATE8   ; C8
1928 1ad5 02                         FCB     AM_IMMEDIATE8   ; C9
1929 1ad6 02                         FCB     AM_IMMEDIATE8   ; CA
1930 1ad7 02                         FCB     AM_IMMEDIATE8   ; CB
1931 1ad8 02                         FCB     AM_IMMEDIATE8   ; CC
1932 1ad9 01                         FCB     AM_INHERENT     ; CD
1933 1ada 02                         FCB     AM_IMMEDIATE8   ; CE
1934 1adb 00                         FCB     AM_INVALID      ; CF
1935                         
1936 1adc 04                         FCB     AM_DIRECT       ; D0
1937 1add 04                         FCB     AM_DIRECT       ; D1
1938 1ade 04                         FCB     AM_DIRECT       ; D2
1939 1adf 04                         FCB     AM_DIRECT       ; D3
1940 1ae0 04                         FCB     AM_DIRECT       ; D4
1941 1ae1 04                         FCB     AM_DIRECT       ; D5
1942 1ae2 04                         FCB     AM_DIRECT       ; D6
1943 1ae3 04                         FCB     AM_DIRECT       ; D7
1944 1ae4 04                         FCB     AM_DIRECT       ; D8
1945 1ae5 04                         FCB     AM_DIRECT       ; D9
1946 1ae6 04                         FCB     AM_DIRECT       ; DA
1947 1ae7 04                         FCB     AM_DIRECT       ; DB
1948 1ae8 04                         FCB     AM_DIRECT       ; DC
1949 1ae9 04                         FCB     AM_DIRECT       ; DD
1950 1aea 04                         FCB     AM_DIRECT       ; DE
1951 1aeb 04                         FCB     AM_DIRECT       ; DF
1952                         
1953 1aec 08                         FCB     AM_INDEXED      ; E0
1954 1aed 08                         FCB     AM_INDEXED      ; E1
1955 1aee 08                         FCB     AM_INDEXED      ; E2
1956 1aef 08                         FCB     AM_INDEXED      ; E3
1957 1af0 08                         FCB     AM_INDEXED      ; E4
1958 1af1 08                         FCB     AM_INDEXED      ; E5
1959 1af2 08                         FCB     AM_INDEXED      ; E6
1960 1af3 08                         FCB     AM_INDEXED      ; E7
1961 1af4 08                         FCB     AM_INDEXED      ; E8
1962 1af5 08                         FCB     AM_INDEXED      ; E9
1963 1af6 08                         FCB     AM_INDEXED      ; EA
1964 1af7 08                         FCB     AM_INDEXED      ; EB
1965 1af8 08                         FCB     AM_INDEXED      ; EC
1966 1af9 08                         FCB     AM_INDEXED      ; ED
1967 1afa 08                         FCB     AM_INDEXED      ; EE
1968 1afb 08                         FCB     AM_INDEXED      ; EF
1969                         
1970 1afc 05                         FCB     AM_EXTENDED     ; F0
1971 1afd 05                         FCB     AM_EXTENDED     ; F1
1972 1afe 05                         FCB     AM_EXTENDED     ; F2
1973 1aff 05                         FCB     AM_EXTENDED     ; F3
1974 1b00 05                         FCB     AM_EXTENDED     ; F4
1975 1b01 05                         FCB     AM_EXTENDED     ; F5
1976 1b02 05                         FCB     AM_EXTENDED     ; F6
1977 1b03 05                         FCB     AM_EXTENDED     ; F7
1978 1b04 05                         FCB     AM_EXTENDED     ; F8
1979 1b05 05                         FCB     AM_EXTENDED     ; F9
1980 1b06 05                         FCB     AM_EXTENDED     ; FA
1981 1b07 05                         FCB     AM_EXTENDED     ; FB
1982 1b08 05                         FCB     AM_EXTENDED     ; FC
1983 1b09 05                         FCB     AM_EXTENDED     ; FD
1984 1b0a 05                         FCB     AM_EXTENDED     ; FE
1985 1b0b 05                         FCB     AM_EXTENDED     ; FF
1986                         
1987                         ; Special table for page 2 instructions prefixed by $10.
1988                         ; Format: opcode (less 10), instruction, addressing mode
1989                         
1990                         PAGE2
1991 1b0c 21 4a 07                   FCB     $21,OP_LBRN,AM_RELATIVE16
1992 1b0f 22 42 07                   FCB     $22,OP_LBHI,AM_RELATIVE16
1993 1b12 23 44 07                   FCB     $23,OP_LBLS,AM_RELATIVE16
1994 1b15 24 3d 07                   FCB     $24,OP_LBCC,AM_RELATIVE16
1995 1b18 25 3e 07                   FCB     $25,OP_LBCS,AM_RELATIVE16
1996 1b1b 26 47 07                   FCB     $26,OP_LBNE,AM_RELATIVE16
1997 1b1e 27 3f 07                   FCB     $27,OP_LBEQ,AM_RELATIVE16
1998 1b21 28 4c 07                   FCB     $28,OP_LBVC,AM_RELATIVE16
1999 1b24 29 4d 07                   FCB     $29,OP_LBVS,AM_RELATIVE16
2000 1b27 2a 48 07                   FCB     $2A,OP_LBPL,AM_RELATIVE16
2001 1b2a 2b 46 07                   FCB     $2B,OP_LBMI,AM_RELATIVE16
2002 1b2d 2c 40 07                   FCB     $2C,OP_LBGE,AM_RELATIVE16
2003 1b30 2d 45 07                   FCB     $2D,OP_LBLT,AM_RELATIVE16
2004 1b33 2e 41 07                   FCB     $2E,OP_LBGT,AM_RELATIVE16
2005 1b36 2f 43 07                   FCB     $2F,OP_LBLE,AM_RELATIVE16
2006 1b39 3f 7e 01                   FCB     $3F,OP_SWI2,AM_INHERENT
2007 1b3c 83 28 03                   FCB     $83,OP_CMPD,AM_IMMEDIATE16
2008 1b3f 8c 2c 03                   FCB     $8C,OP_CMPY,AM_IMMEDIATE16
2009 1b42 8e 54 03                   FCB     $8E,OP_LDY,AM_IMMEDIATE16
2010 1b45 93 28 04                   FCB     $93,OP_CMPD,AM_DIRECT
2011 1b48 9c 2c 04                   FCB     $9C,OP_CMPY,AM_DIRECT
2012 1b4b 9e 54 04                   FCB     $9E,OP_LDY,AM_DIRECT
2013 1b4e 9d 79 04                   FCB     $9D,OP_STY,AM_DIRECT
2014 1b51 a3 28 08                   FCB     $A3,OP_CMPD,AM_INDEXED
2015 1b54 ac 2c 08                   FCB     $AC,OP_CMPY,AM_INDEXED
2016 1b57 ae 54 08                   FCB     $AE,OP_LDY,AM_INDEXED
2017 1b5a af 79 08                   FCB     $AF,OP_STY,AM_INDEXED
2018 1b5d b3 28 05                   FCB     $B3,OP_CMPD,AM_EXTENDED
2019 1b60 bc 2c 05                   FCB     $BC,OP_CMPY,AM_EXTENDED
2020 1b63 be 54 05                   FCB     $BE,OP_LDY,AM_EXTENDED
2021 1b66 bf 79 05                   FCB     $BF,OP_STY,AM_EXTENDED
2022 1b69 ce 51 03                   FCB     $CE,OP_LDS,AM_IMMEDIATE16
2023 1b6c de 51 04                   FCB     $DE,OP_LDS,AM_DIRECT
2024 1b6f dd 76 04                   FCB     $DD,OP_STS,AM_DIRECT
2025 1b72 ee 51 08                   FCB     $EE,OP_LDS,AM_INDEXED
2026 1b75 ef 76 08                   FCB     $EF,OP_STS,AM_INDEXED
2027 1b78 fe 51 05                   FCB     $FE,OP_LDS,AM_EXTENDED
2028 1b7b ff 76 05                   FCB     $FF,OP_STS,AM_EXTENDED
2029 1b7e 00                         FCB     0                             ; indicates end of table
2030                         
2031                         ; Special table for page 3 instructions prefixed by $11.
2032                         ; Same format as table above.
2033                         
2034                         PAGE3
2035 1b7f 3f 7f 01                   FCB     $3F,OP_SWI3,AM_INHERENT
2036 1b82 83 2a 03                   FCB     $83,OP_CMPU,AM_IMMEDIATE16
2037 1b85 8c 29 03                   FCB     $8C,OP_CMPS,AM_IMMEDIATE16
2038 1b88 93 2a 04                   FCB     $93,OP_CMPU,AM_DIRECT
2039 1b8b 9c 29 04                   FCB     $9C,OP_CMPS,AM_DIRECT
2040 1b8e a3 2a 08                   FCB     $A3,OP_CMPU,AM_INDEXED
2041 1b91 ac 29 08                   FCB     $AC,OP_CMPS,AM_INDEXED
2042 1b94 b3 2a 05                   FCB     $B3,OP_CMPU,AM_EXTENDED
2043 1b97 bc 29 05                   FCB     $BC,OP_CMPS,AM_EXTENDED
2044 1b9a 00                         FCB     0                             ; indicates end of table
2045                         
2046                         ; Display strings. Should be terminated in EOT character.
2047                         
2048 1b9b 3b 20 49 4e 56 41  MSG1    FCC     "; INVALID"
     4c 49 44
2049 1ba4 04                         FCB     EOT
2050                         
2051 1ba5 50 52 45 53 53 20  MSG2    FCC     "PRESS <SPACE> TO CONTINUE, <Q> TO QUIT "
     3c 53 50 41 43 45
     3e 20 54 4f 20 43
     4f 4e 54 49 4e 55
     45 2c 20 3c 51 3e
     20 54 4f 20 51 55
     49 54 20
2052 1bcc 04                         FCB     EOT
2053                         
2054 1bcd 50 43 52           MSG3    FCC     "PCR"
2055 1bd0 04                         FCB     EOT
