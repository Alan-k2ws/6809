0001                         ;
0002                         ; 6809 Disassembler
0003                         ;
0004                         ; Copyright (C) 2019 by Jeff Tranter <tranter@pobox.com>
0005                         ;
0006                         ; Licensed under the Apache License, Version 2.0 (the "License");
0007                         ; you may not use this file except in compliance with the License.
0008                         ; You may obtain a copy of the License at
0009                         ;
0010                         ;   http://www.apache.org/licenses/LICENSE-2.0
0011                         ;
0012                         ; Unless required by applicable law or agreed to in writing, software
0013                         ; distributed under the License is distributed on an "AS IS" BASIS,
0014                         ; WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
0015                         ; See the License for the specific language governing permissions and
0016                         ; limitations under the License.
0017                         ;
0018                         ; Revision History
0019                         ; Version Date         Comments
0020                         ; 0.0     29-Jan-2019  First version started, based on 6502 code.
0021                         ; 0.1     03-Feb-2019  All instructions now supported.
0022                         ;
0023                         ; To Do:
0024                         ; - Other TODOs in code
0025                         ; - Add option to suppress data bytes in output (for feeding back into assembler)
0026                         ; - Add option to show invalid opcodes as constants
0027                         ; - Some unwanted spaces in output due to use of ASSIST09 routines
0028                         
0029                         ; Character defines
0030                         
0031 0004                    EOT     EQU     $04             ; String terminator
0032 000a                    LF      EQU     $0A             ; Line feed
0033 000d                    CR      EQU     $0D             ; Carriage return
0034 0020                    SP      EQU     $20             ; Space
0035                         
0036 0018                    PAGELEN EQU     24              ; Number of instructions to show before waiting for keypress
0037                         
0038                         ; ASSIST09 SWI call numbers
0039                         
0040 0000                    INCHNP  EQU     0               ; INPUT CHAR IN A REG - NO PARITY
0041 0001                    OUTCH   EQU     1               ; OUTPUT CHAR FROM A REG
0042 0002                    PDATA1  EQU     2               ; OUTPUT STRING
0043 0003                    PDATA   EQU     3               ; OUTPUT CR/LF THEN STRING
0044 0004                    OUT2HS  EQU     4               ; OUTPUT TWO HEX AND SPACE
0045 0005                    OUT4HS  EQU     5               ; OUTPUT FOUR HEX AND SPACE
0046 0006                    PCRLF   EQU     6               ; OUTPUT CR/LF
0047 0007                    SPACE   EQU     7               ; OUTPUT A SPACE
0048 0008                    MONITR  EQU     8               ; ENTER ASSIST09 MONITOR
0049 0009                    VCTRSW  EQU     9               ; VECTOR EXAMINE/SWITCH
0050 000a                    BRKPT   EQU     10              ; USER PROGRAM BREAKPOINT
0051 000b                    PAUSE   EQU     11              ; TASK PAUSE FUNCTION
0052                         
0053 002c                    .CMDL2  EQU     44              ; Secondary command list subcommand
0054                         
0055                         ; ASSIST09 Monitor Addresses
0056                         
0057 6093                    PCNTER  EQU     $6093           ; Stores last PC value
0058 fe60                    CDNUM   EQU     $FE60           ; Get number on command line. Note: Only valid for my ROM version
0059                         
0060                         ; Start address
0061 1000                            ORG     $1000
0062 1000 20 0d                      BRA     START           ; So start address stays constant
0063                         
0064                         ; Variables
0065                         
0066 1002                    ADDR    RMB     2               ; Current address to disassemble
0067 1004                    OPCODE  RMB     1               ; Opcode of instruction
0068 1005                    AM      RMB     1               ; Addressing mode of instruction
0069 1006                    OPTYPE  RMB     1               ; Instruction type
0070 1007                    POSTBYT RMB     1               ; Post byte (for indexed addressing)
0071 1008                    LEN     RMB     1               ; Length of instruction
0072 1009                    TEMP    RMB     2               ; Temp variable (used by print routines)
0073 100b                    TEMP1   RMB     2               ; Temp variable
0074 100d                    FIRST   RMB     1               ; Flag used to indicate first time an item printed
0075 100e                    PAGE23  RMB     1               ; Flag indicating page2/3 instruction when non-zero
0076                         
0077                         ; Instructions. Matches indexes into entries in table MNEMONICS.
0078                         
0079 0000                    OP_INV   EQU    $00
0080 0001                    OP_ABX   EQU    $01
0081 0002                    OP_ADCA  EQU    $02
0082 0003                    OP_ADCB  EQU    $03
0083 0004                    OP_ADDA  EQU    $04
0084 0005                    OP_ADDB  EQU    $05
0085 0006                    OP_ADDD  EQU    $06
0086 0007                    OP_ANDA  EQU    $07
0087 0008                    OP_ANDB  EQU    $08
0088 0009                    OP_ANDCC EQU    $09
0089 000a                    OP_ASL   EQU    $0A
0090 000b                    OP_ASLA  EQU    $0B
0091 000c                    OP_ASLB  EQU    $0C
0092 000d                    OP_ASR   EQU    $0D
0093 000e                    OP_ASRA  EQU    $0E
0094 000f                    OP_ASRB  EQU    $0F
0095 0010                    OP_BCC   EQU    $10
0096 0011                    OP_BCS   EQU    $11
0097 0012                    OP_BEQ   EQU    $12
0098 0013                    OP_BGE   EQU    $13
0099 0014                    OP_BGT   EQU    $14
0100 0015                    OP_BHI   EQU    $15
0101 0016                    OP_BITA  EQU    $16
0102 0017                    OP_BITB  EQU    $17
0103 0018                    OP_BLE   EQU    $18
0104 0019                    OP_BLS   EQU    $19
0105 001a                    OP_BLT   EQU    $1A
0106 001b                    OP_BMI   EQU    $1B
0107 001c                    OP_BNE   EQU    $1C
0108 001d                    OP_BPL   EQU    $1D
0109 001e                    OP_BRA   EQU    $1E
0110 001f                    OP_BRN   EQU    $1F
0111 0020                    OP_BSR   EQU    $20
0112 0021                    OP_BVC   EQU    $21
0113 0022                    OP_BVS   EQU    $22
0114 0023                    OP_CLR   EQU    $23
0115 0024                    OP_CLRA  EQU    $24
0116 0025                    OP_CLRB  EQU    $25
0117 0026                    OP_CMPA  EQU    $26
0118 0027                    OP_CMPB  EQU    $27
0119 0028                    OP_CMPD  EQU    $28
0120 0029                    OP_CMPS  EQU    $29
0121 002a                    OP_CMPU  EQU    $2A
0122 002b                    OP_CMPX  EQU    $2B
0123 002c                    OP_CMPY  EQU    $2C
0124 002d                    OP_COMA  EQU    $2D
0125 002e                    OP_COMB  EQU    $2E
0126 002f                    OP_COM   EQU    $2F
0127 0030                    OP_CWAI  EQU    $30
0128 0031                    OP_DAA   EQU    $31
0129 0032                    OP_DEC   EQU    $32
0130 0033                    OP_DECA  EQU    $33
0131 0034                    OP_DECB  EQU    $34
0132 0035                    OP_EORA  EQU    $35
0133 0036                    OP_EORB  EQU    $36
0134 0037                    OP_EXG   EQU    $37
0135 0038                    OP_INC   EQU    $38
0136 0039                    OP_INCA  EQU    $39
0137 003a                    OP_INCB  EQU    $3A
0138 003b                    OP_JMP   EQU    $3B
0139 003c                    OP_JSR   EQU    $3C
0140 003d                    OP_LBCC  EQU    $3D
0141 003e                    OP_LBCS  EQU    $3E
0142 003f                    OP_LBEQ  EQU    $3F
0143 0040                    OP_LBGE  EQU    $40
0144 0041                    OP_LBGT  EQU    $41
0145 0042                    OP_LBHI  EQU    $42
0146 0043                    OP_LBLE  EQU    $43
0147 0044                    OP_LBLS  EQU    $44
0148 0045                    OP_LBLT  EQU    $45
0149 0046                    OP_LBMI  EQU    $46
0150 0047                    OP_LBNE  EQU    $47
0151 0048                    OP_LBPL  EQU    $48
0152 0049                    OP_LBRA  EQU    $49
0153 004a                    OP_LBRN  EQU    $4A
0154 004b                    OP_LBSR  EQU    $4B
0155 004c                    OP_LBVC  EQU    $4C
0156 004d                    OP_LBVS  EQU    $4D
0157 004e                    OP_LDA   EQU    $4E
0158 004f                    OP_LDB   EQU    $4F
0159 0050                    OP_LDD   EQU    $50
0160 0051                    OP_LDS   EQU    $51
0161 0052                    OP_LDU   EQU    $52
0162 0053                    OP_LDX   EQU    $53
0163 0054                    OP_LDY   EQU    $54
0164 0055                    OP_LEAS  EQU    $55
0165 0056                    OP_LEAU  EQU    $56
0166 0057                    OP_LEAX  EQU    $57
0167 0058                    OP_LEAY  EQU    $58
0168 0059                    OP_LSR   EQU    $59
0169 005a                    OP_LSRA  EQU    $5A
0170 005b                    OP_LSRB  EQU    $5B
0171 005c                    OP_MUL   EQU    $5C
0172 005d                    OP_NEG   EQU    $5D
0173 005e                    OP_NEGA  EQU    $5E
0174 005f                    OP_NEGB  EQU    $5F
0175 0060                    OP_NOP   EQU    $60
0176 0061                    OP_ORA   EQU    $61
0177 0062                    OP_ORB   EQU    $62
0178 0063                    OP_ORCC  EQU    $63
0179 0064                    OP_PSHS  EQU    $64
0180 0065                    OP_PSHU  EQU    $65
0181 0066                    OP_PULS  EQU    $66
0182 0067                    OP_PULU  EQU    $67
0183 0068                    OP_ROL   EQU    $68
0184 0069                    OP_ROLA  EQU    $69
0185 006a                    OP_ROLB  EQU    $6A
0186 006b                    OP_ROR   EQU    $6B
0187 006c                    OP_RORA  EQU    $6C
0188 006d                    OP_RORB  EQU    $6D
0189 006e                    OP_RTI   EQU    $6E
0190 006f                    OP_RTS   EQU    $6F
0191 0070                    OP_SBCA  EQU    $70
0192 0071                    OP_SBCB  EQU    $71
0193 0072                    OP_SEX   EQU    $72
0194 0073                    OP_STA   EQU    $73
0195 0074                    OP_STB   EQU    $74
0196 0075                    OP_STD   EQU    $75
0197 0076                    OP_STS   EQU    $76
0198 0077                    OP_STU   EQU    $77
0199 0078                    OP_STX   EQU    $78
0200 0079                    OP_STY   EQU    $79
0201 007a                    OP_SUBA  EQU    $7A
0202 007b                    OP_SUBB  EQU    $7B
0203 007c                    OP_SUBD  EQU    $7C
0204 007d                    OP_SWI   EQU    $7D
0205 007e                    OP_SWI2  EQU    $7E
0206 007f                    OP_SWI3  EQU    $7F
0207 0080                    OP_SYNC  EQU    $80
0208 0081                    OP_TFR   EQU    $81
0209 0082                    OP_TST   EQU    $82
0210 0083                    OP_TSTA  EQU    $83
0211 0084                    OP_TSTB  EQU    $84
0212                         
0213                         ; Addressing Modes. OPCODES table lists these for each instruction.
0214                         ; LENGTHS lists the instruction length for each addressing mode.
0215                         ; Need to distinguish relative modes that are 2 and 3 (long) bytes.
0216                         ; Some immediate are 2 and some 3 bytes.
0217                         ; Indexed modes can be longer depending on postbyte.
0218                         ; Page 2 and 3 opcodes are one byte longer (prefixed by 10 or 11)
0219                         
0220 0000                    AM_INVALID      EQU     0       ; $01 (1)
0221 0001                    AM_INHERENT     EQU     1       ; RTS (1)
0222 0002                    AM_IMMEDIATE8   EQU     2       ; LDA #$12 (2)
0223 0003                    AM_IMMEDIATE16  EQU     3       ; LDD #$1234 (3)
0224 0004                    AM_DIRECT       EQU     4       ; LDA $12 (2)
0225 0005                    AM_EXTENDED     EQU     5       ; LDA $1234 (3)
0226 0006                    AM_RELATIVE8    EQU     6       ; BSR $1234 (2)
0227 0007                    AM_RELATIVE16   EQU     7       ; LBSR $1234 (3)
0228 0008                    AM_INDEXED      EQU     8       ; LDA 0,X (2+)
0229                         
0230                         ; *** CODE ***
0231                         
0232                         ; Install custom command in ASSIST09 using secondary command list.
0233                         ; Adds a U (Unassemble) command, then returns to monitor.
0234                         
0235 100f 30 8d 00 05        START:  LEAX    MYCMDL,PCR      ; Load new handler address
0236 1013 86 2c                      LDA     #.CMDL2         ; Load subcode for vector swap
0237 1015 3f                         SWI                     ; Request service
0238 1016 09                         FCB    VCTRSW           ; Service code byte
0239 1017 39                         RTS                     ; Return to monitor
0240                         
0241                         MYCMDL:
0242 1018 04                         FCB     4               ; Table entry length
0243 1019 55                         FCC     'U'             ; Command name
0244 101a 00 03                      FDB     MAIN-*          ; Pointer to command (relative to here)
0245 101c fe                         FCB     $FE             ; -2 indicates end of table
0246                         
0247                         ; Main program. Disassembles a page at a time. Can be run directly or
0248                         ; as an ASSIST09 monitor external command. Gets start address from
0249                         ; command line.
0250                         
0251 101d 17 ee 40           MAIN:   LBSR    CDNUM           ; Parse command line, return 16-bit number in D
0252 1020 fd 10 02                   STD     ADDR            ; Store it
0253 1023 86 18              PAGE:   LDA     #PAGELEN        ; Number of instruction to disassemble per page
0254 1025 34 02              DIS:    PSHS    A               ; Save A
0255 1027 17 00 97                   LBSR    DISASM          ; Do disassembly of one instruction
0256 102a 35 02                      PULS    A               ; Restore A
0257 102c 4a                         DECA                    ; Decrement count
0258 102d 26 f6                      BNE     DIS             ; Go back and repeat until a page has been done
0259 102f 30 8d 0b 8c                LEAX    MSG2,PCR        ; Display message to press a key
0260 1033 17 00 84                   LBSR    PrintString
0261 1036 8d 63              BADKEY: BSR     GetChar         ; Wait for keyboard input
0262 1038 8d 11                      BSR     PrintCR
0263 103a 81 20                      CMPA    #SP             ; Space key pressed?
0264 103c 27 e5                      BEQ     PAGE            ; If so, display next page
0265 103e 81 51                      CMPA    #'Q             ; Q key pressed?
0266 1040 27 08                      BEQ     RETN            ; If so, return
0267 1042 81 71                      CMPA    #'q             ; q key pressed?
0268 1044 27 04                      BEQ     RETN            ; If so, return
0269 1046 8d 72                      BSR     PrintString     ; Bad key, prompt and try again
0270 1048 20 ec                      BRA     BADKEY
0271 104a 39                 RETN:   RTS                     ; Return to caller
0272                         
0273                         ; *** Utility Functions ***
0274                         ; Some of these call ASSIST09 ROM monitor routines.
0275                         
0276                         ; Print CR/LF to the console.
0277                         ; Registers changed: none
0278                         PrintCR:
0279 104b 34 02                      PSHS    A               ; Save A
0280 104d 86 0d                      LDA     #CR
0281 104f 8d 47                      BSR     PrintChar
0282 1051 86 0a                      LDA     #LF
0283 1053 8d 43                      BSR     PrintChar
0284 1055 35 02                      PULS    A               ; Restore A
0285 1057 39                         RTS
0286                         
0287                         ; Print dollar sign to the console.
0288                         ; Registers changed: none
0289                         PrintDollar:
0290 1058 34 02                      PSHS    A               ; Save A
0291 105a 86 24                      LDA     #'$
0292 105c 8d 3a                      BSR     PrintChar
0293 105e 35 02                      PULS    A               ; Restore A
0294 1060 39                         RTS
0295                         
0296                         ; Print comma to the console.
0297                         ; Registers changed: none
0298                         PrintComma:
0299 1061 34 02                      PSHS    A               ; Save A
0300 1063 86 2c                      LDA     #',
0301 1065 8d 31                      BSR     PrintChar
0302 1067 35 02                      PULS    A               ; Restore A
0303 1069 39                         RTS
0304                         
0305                         ; Print left square bracket to the console.
0306                         ; Registers changed: none
0307                         PrintLBracket:
0308 106a 34 02                      PSHS    A               ; Save A
0309 106c 86 5b                      LDA     #'[
0310 106e 8d 28                      BSR     PrintChar
0311 1070 35 02                      PULS    A               ; Restore A
0312 1072 39                         RTS
0313                         
0314                         ; Print right square bracket to the console.
0315                         ; Registers changed: none
0316                         PrintRBracket:
0317 1073 34 02                      PSHS    A               ; Save A
0318 1075 86 5d                      LDA     #']
0319 1077 8d 1f                      BSR     PrintChar
0320 1079 35 02                      PULS    A               ; Restore A
0321 107b 39                         RTS
0322                         
0323                         ; Print space sign to the console.
0324                         ; Registers changed: none
0325                         PrintSpace:
0326 107c 3f                         SWI
0327 107d 07                         FCB     SPACE
0328 107e 39                         RTS
0329                         
0330                         ; Print two spaces to the console.
0331                         ; Registers changed: none
0332                         Print2Spaces:
0333 107f 34 02                      PSHS    A               ; Save A
0334 1081 86 20                      LDA     #SP
0335 1083 8d 13                      BSR     PrintChar
0336 1085 8d 11                      BSR     PrintChar
0337 1087 35 02                      PULS    A               ; Restore A
0338 1089 39                         RTS
0339                         
0340                         ; Print several space characters.
0341                         ; A contains number of spaces to print.
0342                         ; Registers changed: none
0343                         PrintSpaces:
0344 108a 34 02                      PSHS    A               ; Save registers used
0345 108c 81 00              PS1:    CMPA    #0              ; Is count zero?
0346 108e 27 05                      BEQ     PS2             ; Is so, done
0347 1090 8d ea                      BSR     PrintSpace      ; Print a space
0348 1092 4a                         DECA                    ; Decrement count
0349 1093 20 f7                      BRA     PS1             ; Check again
0350 1095 35 02              PS2:    PULS    A               ; Restore registers used
0351 1097 39                         RTS
0352                         
0353                         ; Print character to the console
0354                         ; A contains character to print.
0355                         ; Registers changed: none
0356                         PrintChar:
0357 1098 3f                         SWI                     ; Call ASSIST09 monitor function
0358 1099 01                         FCB     OUTCH           ; Service code byte
0359 109a 39                         RTS
0360                         
0361                         ; Get character from the console
0362                         ; A contains character read. Blocks until key pressed. Character is
0363                         ; echoed. Ignores NULL ($00) and RUBOUT ($7F). CR ($OD) is converted
0364                         ; to LF ($0A).
0365                         ; Registers changed: none (flags may change). Returns char in A.
0366                         GetChar:
0367 109b 3f                         SWI                     ; Call ASSIST09 monitor function
0368 109c 00                         FCB     INCHNP          ; Service code byte
0369 109d 39                         RTS
0370                         
0371                         ; Print a byte as two hex digits followed by a space.
0372                         ; A contains byte to print.
0373                         ; Registers changed: none
0374                         PrintByte:
0375 109e 34 16                      PSHS    A,B,X           ; Save registers used
0376 10a0 b7 10 09                   STA     TEMP            ; Needs to be in memory so we can point to it
0377 10a3 30 8d ff 62                LEAX    TEMP,PCR        ; Get pointer to it
0378 10a7 3f                         SWI                     ; Call ASSIST09 monitor function
0379 10a8 04                         FCB     OUT2HS          ; Service code byte
0380 10a9 35 16                      PULS    X,B,A           ; Restore registers used
0381 10ab 39                         RTS
0382                         
0383                         ; Print a word as four hex digits followed by a space.
0384                         ; X contains word to print.
0385                         ; Registers changed: none
0386                         PrintAddress:
0387 10ac 34 16                      PSHS    A,B,X           ; Save registers used
0388 10ae bf 10 09                   STX     TEMP            ; Needs to be in memory so we can point to it
0389 10b1 30 8d ff 54                LEAX    TEMP,PCR        ; Get pointer to it
0390 10b5 3f                         SWI                     ; Call ASSIST09 monitor function
0391 10b6 05                         FCB     OUT4HS          ; Service code byte
0392 10b7 35 16                      PULS    X,B,A           ; Restore registers used
0393 10b9 39                         RTS
0394                         
0395                         ; Print a string.
0396                         ; X points to start of string to display.
0397                         ; String must be terminated in EOT character.
0398                         ; Registers changed: none
0399                         PrintString:
0400 10ba 34 10                      PSHS    X               ; Save registers used
0401 10bc 3f                         SWI                     ; Call ASSIST09 monitor function
0402 10bd 02                         FCB     PDATA1          ; Service code byte
0403 10be 35 10                      PULS    X               ; Restore registers used
0404 10c0 39                         RTS
0405                         
0406                         ; Disassemble instruction at address ADDR. On return, ADDR points to
0407                         ; next instruction so it can be called again.
0408                         
0409 10c1 7f 10 0e           DISASM: CLR     PAGE23          ; Clear page2/3 flag
0410 10c4 ae 8d ff 3a                LDX     ADDR,PCR        ; Get address of instruction
0411 10c8 e6 84                      LDB     ,X              ; Get instruction op code
0412 10ca c1 10                      CMPB    #$10            ; Is it a page 2 16-bit opcode prefix with 10?
0413 10cc 27 07                      BEQ     handle10        ; If so, do special handling
0414 10ce c1 11                      CMPB    #$11            ; Is it a page 3 16-bit opcode prefix with 11?
0415 10d0 27 53                      BEQ     handle11        ; If so, do special handling
0416 10d2 16 00 a1                   LBRA    not1011         ; If not, handle as normal case
0417                         
0418                         handle10:                       ; Handle page 2 instruction
0419 10d5 86 01                      LDA     #1              ; Set page2/3 flag
0420 10d7 b7 10 0e                   STA     PAGE23
0421 10da e6 01                      LDB     1,X             ; Get real opcode
0422 10dc f7 10 04                   STB     OPCODE          ; Save it.
0423 10df 30 8d 0a 43                LEAX    PAGE2,PCR       ; Pointer to start of table
0424 10e3 4f                         CLRA                    ; Set index into table to zero
0425                         search10:
0426 10e4 e1 86                      CMPB    A,X             ; Check for match of opcode in table
0427 10e6 27 1f                      BEQ     found10         ; Branch if found
0428 10e8 8b 03                      ADDA    #3              ; Advance to next entry in table (entries are 3 bytes long)
0429 10ea 6d 86                      TST     A,X             ; Check entry
0430 10ec 27 02                      BEQ     notfound10      ; If zero, then reached end of table
0431 10ee 20 f4                      BRA     search10        ; If not, keep looking
0432                         
0433                         notfound10:                     ; Instruction not found, so is invalid.
0434 10f0 86 10                      LDA     #$10            ; Set opcode to 10
0435 10f2 b7 10 04                   STA     OPCODE
0436 10f5 86 00                      LDA     #OP_INV         ; Set as instruction type invalid
0437 10f7 b7 10 06                   STA     OPTYPE
0438 10fa 86 00                      LDA     #AM_INVALID     ; Set as addressing mode invalid
0439 10fc b7 10 05                   STA     AM
0440 10ff 86 01                      LDA     #1              ; Set length to one
0441 1101 b7 10 08                   STA     LEN
0442 1104 16 00 91                   LBRA    dism            ; Disassemble as normal
0443                         
0444                         found10:                        ; Found entry in table
0445 1107 8b 01                      ADDA    #1              ; Advance to instruction type entry in table
0446 1109 e6 86                      LDB     A,X             ; Get instruction type
0447 110b f7 10 06                   STB     OPTYPE          ; Save it
0448 110e 8b 01                      ADDA    #1              ; Advanced to address mode entry in table
0449 1110 e6 86                      LDB     A,X             ; Get address mode
0450 1112 f7 10 05                   STB     AM              ; Save it
0451 1115 4f                         CLRA                    ; Clear MSB of D, addressing mode is now in A:B (D)
0452 1116 1f 01                      TFR     D,X             ; Put addressing mode in X
0453 1118 e6 89 18 f9                LDB     LENGTHS,X       ; Get instruction length from table
0454 111c f7 10 08                   STB     LEN             ; Store it
0455 111f 7c 10 08                   INC     LEN             ; Add one because it is a two byte op code
0456 1122 16 00 73                   LBRA    dism            ; Continue normal disassembly processing.
0457                         
0458                         handle11:                       ; Same logic as above, but use table for page 3 opcodes.
0459 1125 86 01                      LDA     #1              ; Set page2/3 flag
0460 1127 b7 10 0e                   STA     PAGE23
0461 112a e6 01                      LDB     1,X             ; Get real opcode
0462 112c f7 10 04                   STB     OPCODE          ; Save it.
0463 112f 30 8d 0a 66                LEAX    PAGE3,PCR       ; Pointer to start of table
0464 1133 4f                         CLRA                    ; Set index into table to zero
0465                         search11:
0466 1134 e1 86                      CMPB    A,X             ; Check for match of opcode in table
0467 1136 27 1f                      BEQ     found11         ; Branch if found
0468 1138 8b 03                      ADDA    #3              ; Advance to next entry in table (entries are 3 bytes long)
0469 113a 6d 86                      TST     A,X             ; Check entry
0470 113c 27 02                      BEQ     notfound11      ; If zero, then reached end of table
0471 113e 20 f4                      BRA     search11        ; If not, keep looking
0472                         
0473                         notfound11:                     ; Instruction not found, so is invalid.
0474 1140 86 11                      LDA     #$11            ; Set opcode to 10
0475 1142 b7 10 04                   STA     OPCODE
0476 1145 86 00                      LDA     #OP_INV         ; Set as instruction type invalid
0477 1147 b7 10 06                   STA     OPTYPE
0478 114a 86 00                      LDA     #AM_INVALID     ; Set as addressing mode invalid
0479 114c b7 10 05                   STA     AM
0480 114f 86 01                      LDA     #1              ; Set length to one
0481 1151 b7 10 08                   STA     LEN
0482 1154 16 00 41                   LBRA    dism            ; Disassemble as normal
0483                         
0484                         found11:                        ; Found entry in table
0485 1157 8b 01                      ADDA    #1              ; Advance to instruction type entry in table
0486 1159 e6 86                      LDB     A,X             ; Get instruction type
0487 115b f7 10 06                   STB     OPTYPE          ; Save it
0488 115e 8b 01                      ADDA    #1              ; Advanced to address mode entry in table
0489 1160 e6 86                      LDB     A,X             ; Get address mode
0490 1162 f7 10 05                   STB     AM              ; Save it
0491 1165 4f                         CLRA                    ; Clear MSB of D, addressing mode is now in A:B (D)
0492 1166 1f 01                      TFR     D,X             ; Put addressing mode in X
0493 1168 e6 89 18 f9                LDB     LENGTHS,X       ; Get instruction length from table
0494 116c f7 10 08                   STB     LEN             ; Store it
0495 116f 7c 10 08                   INC     LEN             ; Add one because it is a two byte op code
0496 1172 16 00 23                   LBRA    dism            ; Continue normal disassembly processing.
0497 1175 39                         RTS
0498                         
0499                         not1011:
0500 1176 f7 10 04                   STB     OPCODE          ; Save the op code
0501 1179 4f                         CLRA                    ; Clear MSB of D
0502 117a 1f 01                      TFR     D,X             ; Put op code in X
0503 117c e6 89 19 26                LDB     OPCODES,X       ; Get opcode type from table
0504 1180 f7 10 06                   STB     OPTYPE          ; Store it
0505 1183 f6 10 04                   LDB     OPCODE          ; Get op code again
0506 1186 1f 01                      TFR     D,X             ; Put opcode in X
0507 1188 e6 89 1a 26                LDB     MODES,X         ; Get addressing mode type from table
0508 118c f7 10 05                   STB     AM              ; Store it
0509 118f 1f 01                      TFR     D,X             ; Put addressing mode in X
0510 1191 e6 89 18 f9                LDB     LENGTHS,X       ; Get instruction length from table
0511 1195 f7 10 08                   STB     LEN             ; Store it
0512                         
0513                         ; If addressing mode is indexed, get and save the indexed addressing
0514                         ; post byte.
0515                         
0516 1198 b6 10 05           dism:   LDA     AM              ; Get addressing mode
0517 119b 81 08                      CMPA    #AM_INDEXED     ; Is it indexed mode?
0518 119d 26 22                      BNE     NotIndexed      ; Branch if not
0519 119f ae 8d fe 5f                LDX     ADDR,PCR        ; Get address of op code
0520                                                         ; If it is a page2/3 instruction, op code is the next byte after ADDR
0521 11a3 7d 10 0e                   TST     PAGE23          ; Page2/3 instruction?
0522 11a6 27 04                      BEQ     norm            ; Branch of not
0523 11a8 a6 02                      LDA     2,X             ; Post byte is two past ADDR
0524 11aa 20 02                      BRA     getpb
0525 11ac a6 01              norm:   LDA     1,X             ; Get next byte (the post byte)
0526 11ae b7 10 07           getpb:  STA     POSTBYT         ; Save it
0527                         
0528                         ; Determine number of additional bytes for indexed addressing based on
0529                         ; postbyte. If most significant bit is 0, there are no additional
0530                         ; bytes and we can skip the rest of the check.
0531                         
0532 11b1 2a 0e                      BPL     NotIndexed      ; Branch of MSB is zero
0533                         
0534                         ; Else if most significant bit is 1, mask off all but low order 5 bits
0535                         ; and look up length in table.
0536                         
0537 11b3 84 1f                      ANDA    #%00011111      ; Mask off bits
0538 11b5 30 8d 07 4d                LEAX    POSTBYTES,PCR   ; Lookup table of lengths
0539 11b9 a6 86                      LDA     A,X             ; Get table entry
0540 11bb bb 10 08                   ADDA    LEN             ; Add to instruction length
0541 11be b7 10 08                   STA     LEN             ; Save new length
0542                         
0543                         NotIndexed:
0544                         
0545                         ; Print address followed by a space
0546 11c1 ae 8d fe 3d                LDX     ADDR,PCR
0547 11c5 17 fe e4                   LBSR    PrintAddress
0548                         
0549                         ; Print one more space
0550                         
0551 11c8 17 fe b1                   LBSR    PrintSpace
0552                         
0553                         ; Print the op code bytes based on the instruction length
0554                         
0555 11cb f6 10 08                   LDB     LEN             ; Number of bytes in instruction
0556 11ce ae 8d fe 30                LDX     ADDR,PCR        ; Pointer to start of instruction
0557 11d2 a6 80              opby:   LDA     ,X+             ; Get instruction byte and increment pointer
0558 11d4 17 fe c7                   LBSR    PrintByte       ; Print it, followed by a space
0559 11d7 5a                         DECB                    ; Decrement byte count
0560 11d8 26 f8                      BNE     opby            ; Repeat until done
0561                         
0562                         ; Print needed remaining spaces to pad out to correct column
0563                         
0564 11da 30 8d 07 24                LEAX    PADDING,PCR     ; Pointer to start of lookup table
0565 11de b6 10 08                   LDA     LEN             ; Number of bytes in instruction
0566 11e1 4a                         DECA                    ; Subtract 1 since table starts at 1, not 0
0567 11e2 a6 86                      LDA     A,X             ; Get number of spaces to print
0568 11e4 17 fe a3                   LBSR    PrintSpaces
0569                         
0570                         ; If a page2/3 instruction, advance ADDR to the next byte which points
0571                         ; to the real op code.
0572                         
0573 11e7 7d 10 0e                   TST     PAGE23          ; Flag set
0574 11ea 27 09                      BEQ     noinc           ; Branch if not
0575 11ec fc 10 02                   LDD     ADDR            ; Increment 16-bit address
0576 11ef c3 00 01                   ADDD    #1
0577 11f2 fd 10 02                   STD     ADDR
0578                         
0579                         ; Get and print mnemonic (4 chars)
0580                         
0581 11f5 f6 10 06           noinc   LDB     OPTYPE          ; Get instruction type to index into table
0582 11f8 4f                         CLRA                    ; Clear MSB of D
0583 11f9 58                         ASLB                    ; 16-bit shift of D: Rotate B, MSB into Carry
0584 11fa 49                         ROLA                    ; Rotate A, Carry into LSB
0585 11fb 58                         ASLB                    ; Do it twice to multiple by four
0586 11fc 49                         ROLA                    ;
0587 11fd 30 8d 04 e4                LEAX    MNEMONICS,PCR   ; Pointer to start of table
0588 1201 b7 10 0b                   STA     TEMP1           ; Save value of A
0589 1204 a6 8b                      LDA     D,X             ; Get first char of mnemonic
0590 1206 17 fe 8f                   LBSR    PrintChar       ; Print it
0591 1209 b6 10 0b                   LDA     TEMP1           ; Restore value of A
0592 120c 5c                         INCB                    ; Advance pointer
0593 120d a6 8b                      LDA     D,X             ; Get second char of mnemonic
0594 120f 17 fe 86                   LBSR    PrintChar       ; Print it
0595 1212 b6 10 0b                   LDA     TEMP1           ; Restore value of A
0596 1215 5c                         INCB                    ; Advance pointer
0597 1216 a6 8b                      LDA     D,X             ; Get third char of mnemonic
0598 1218 17 fe 7d                   LBSR    PrintChar       ; Print it
0599 121b b6 10 0b                   LDA     TEMP1           ; Restore value of A
0600 121e 5c                         INCB                    ; Advance pointer
0601 121f a6 8b                      LDA     D,X             ; Get fourth char of mnemonic
0602 1221 17 fe 74                   LBSR    PrintChar       ; Print it
0603                         
0604                         ; Display any operands based on addressing mode and call appropriate
0605                         ; routine. TODO: Could use a lookup table for this.
0606                         
0607 1224 b6 10 05                   LDA     AM              ; Get addressing mode
0608 1227 81 00                      CMPA    #AM_INVALID
0609 1229 27 2e                      BEQ     DO_INVALID
0610 122b 81 01                      CMPA    #AM_INHERENT
0611 122d 27 39                      BEQ     DO_INHERENT
0612 122f 81 02                      CMPA    #AM_IMMEDIATE8
0613 1231 27 38                      BEQ     DO_IMMEDIATE8
0614 1233 81 03                      CMPA    #AM_IMMEDIATE16
0615 1235 10 27 01 af                LBEQ    DO_IMMEDIATE16
0616 1239 81 04                      CMPA    #AM_DIRECT
0617 123b 10 27 01 c4                LBEQ    DO_DIRECT
0618 123f 81 05                      CMPA    #AM_EXTENDED
0619 1241 10 27 01 d0                LBEQ    DO_EXTENDED
0620 1245 81 06                      CMPA    #AM_RELATIVE8
0621 1247 10 27 01 e0                LBEQ    DO_RELATIVE8
0622 124b 81 07                      CMPA    #AM_RELATIVE16
0623 124d 10 27 01 f5                LBEQ    DO_RELATIVE16
0624 1251 81 08                      CMPA    #AM_INDEXED
0625 1253 10 27 02 09                LBEQ    DO_INDEXED
0626 1257 20 00                      BRA     DO_INVALID      ; Should never be reached
0627                         
0628                         DO_INVALID:                     ; Display "   ; INVALID"
0629 1259 86 0f                      LDA     #15             ; Want 15 spaces
0630 125b 17 fe 2c                   LBSR    PrintSpaces
0631 125e 30 8d 09 53                LEAX    MSG1,PCR
0632 1262 17 fe 55                   LBSR    PrintString
0633 1265 16 04 67                   LBRA    done
0634                         
0635                         DO_INHERENT:                    ; Nothing else to do
0636 1268 16 04 64                   LBRA    done
0637                         
0638                         DO_IMMEDIATE8:
0639 126b b6 10 06                   LDA     OPTYPE          ; Get opcode type
0640 126e 81 81                      CMPA    #OP_TFR         ; Is is TFR?
0641 1270 27 33                      BEQ     XFREXG          ; Handle special case of TFR
0642 1272 81 37                      CMPA    #OP_EXG         ; Is is EXG?
0643 1274 27 2f                      BEQ     XFREXG          ; Handle special case of EXG
0644                         
0645 1276 81 66                      CMPA    #OP_PULS        ; Is is PULS?
0646 1278 10 27 00 ad                LBEQ    PULPSH
0647 127c 81 67                      CMPA    #OP_PULU        ; Is is PULU?
0648 127e 10 27 00 a7                LBEQ    PULPSH
0649 1282 81 64                      CMPA    #OP_PSHS        ; Is is PSHS?
0650 1284 10 27 00 a1                LBEQ    PULPSH
0651 1288 81 65                      CMPA    #OP_PSHU        ; Is is PSHU?
0652 128a 10 27 00 9b                LBEQ    PULPSH
0653                         
0654                                                         ; Display "  #$nn"
0655 128e 17 fd ee                   LBSR    Print2Spaces    ; Two spaces
0656 1291 86 23                      LDA     #'#             ; Number sign
0657 1293 17 fe 02                   LBSR    PrintChar
0658 1296 17 fd bf                   LBSR    PrintDollar     ; Dollar sign
0659 1299 ae 8d fd 65                LDX     ADDR,PCR        ; Get address of op code
0660 129d a6 01                      LDA     1,X             ; Get next byte (immediate data)
0661 129f 17 fd fc                   LBSR    PrintByte       ; Print as hex value
0662 12a2 16 04 2a                   LBRA    done
0663                         
0664                         XFREXG:                         ; Handle special case of TFR and EXG
0665                                                         ; Display "  r1,r2"
0666 12a5 17 fd d7                   LBSR    Print2Spaces    ; Two spaces
0667 12a8 ae 8d fd 56                LDX     ADDR,PCR        ; Get address of op code
0668 12ac a6 01                      LDA     1,X             ; Get next byte (postbyte)
0669 12ae 84 f0                      ANDA    #%11110000      ; Mask out source register bits
0670 12b0 44                         LSRA                    ; Shift into low order bits
0671 12b1 44                         LSRA
0672 12b2 44                         LSRA
0673 12b3 44                         LSRA
0674 12b4 8d 0e                      BSR     TFREXGRegister  ; Print source register name
0675 12b6 86 2c                      LDA     #',             ; Print comma
0676 12b8 17 fd dd                   LBSR    PrintChar
0677 12bb a6 01                      LDA     1,X             ; Get postbyte again
0678 12bd 84 0f                      ANDA    #%00001111      ; Mask out destination register bits
0679 12bf 8d 03                      BSR     TFREXGRegister  ; Print destination register name
0680 12c1 16 04 0b                   LBRA    done
0681                         
0682                         ; Look up register name (in A) from Transfer/Exchange postbyte. 4 LSB
0683                         ; bits determine the register name. Value is printed. Invalid value
0684                         ; is shown as '?'.
0685                         ; Value:    0 1 2 3 4 5  8 9 10 11
0686                         ; Register: D X Y U S PC A B CC DP
0687                         
0688                         TFREXGRegister:
0689 12c4 81 00                      CMPA    #0
0690 12c6 26 04                      BNE     Try1
0691 12c8 86 44                      LDA     #'D
0692 12ca 20 50                      BRA     Print1Reg
0693 12cc 81 01              Try1:   CMPA    #1
0694 12ce 26 04                      BNE     Try2
0695 12d0 86 58                      LDA     #'X
0696 12d2 20 48                      BRA     Print1Reg
0697 12d4 81 02              Try2:   CMPA    #2
0698 12d6 26 04                      BNE     Try3
0699 12d8 86 59                      LDA     #'Y
0700 12da 20 40                      BRA     Print1Reg
0701 12dc 81 03              Try3:   CMPA    #3
0702 12de 26 04                      BNE     Try4
0703 12e0 86 55                      LDA     #'U
0704 12e2 20 38                      BRA     Print1Reg
0705 12e4 81 04              Try4:   CMPA    #4
0706 12e6 26 04                      BNE     Try5
0707 12e8 86 53                      LDA     #'S
0708 12ea 20 30                      BRA     Print1Reg
0709 12ec 81 05              Try5:   CMPA    #5
0710 12ee 26 06                      BNE     Try8
0711 12f0 86 50                      LDA     #'P
0712 12f2 c6 43                      LDB     #'C
0713 12f4 20 2a                      BRA     Print2Reg
0714 12f6 81 08              Try8:   CMPA    #8
0715 12f8 26 04                      BNE     Try9
0716 12fa 86 41                      LDA     #'A
0717 12fc 20 1e                      BRA     Print1Reg
0718 12fe 81 09              Try9:   CMPA    #9
0719 1300 26 04                      BNE     Try10
0720 1302 86 42                      LDA     #'B
0721 1304 20 16                      BRA     Print1Reg
0722 1306 81 0a              Try10:  CMPA    #10
0723 1308 26 06                      BNE     Try11
0724 130a 86 43                      LDA     #'C
0725 130c c6 43                      LDB     #'C
0726 130e 20 10                      BRA     Print2Reg
0727 1310 81 0b              Try11:  CMPA    #11
0728 1312 26 06                      BNE     Inv
0729 1314 86 44                      LDA     #'D
0730 1316 c6 50                      LDB     #'P
0731 1318 20 06                      BRA     Print2Reg
0732 131a 86 3f              Inv:    LDA     #'?             ; Invalid
0733                                                         ; Fall through
0734                         Print1Reg:
0735 131c 17 fd 79                   LBSR   PrintChar        ; Print character
0736 131f 39                         RTS
0737                         Print2Reg:
0738 1320 17 fd 75                   LBSR   PrintChar        ; Print first character
0739 1323 1f 98                      TFR    B,A
0740 1325 17 fd 70                   LBSR   PrintChar        ; Print second character
0741 1328 39                         RTS
0742                         
0743                         ; Handle PSHS/PSHU/PULS/PULU instruction operands
0744                         ; Format is a register list, eg; "  A,B,X"
0745                         
0746                         PULPSH:
0747 1329 17 fd 53                   LBSR    Print2Spaces    ; Two spaces
0748 132c 86 01                      LDA     #1
0749 132e b7 10 0d                   STA     FIRST           ; Flag set before any items printed
0750 1331 ae 8d fc cd                LDX     ADDR,PCR        ; Get address of op code
0751 1335 a6 01                      LDA     1,X             ; Get next byte (postbyte)
0752                         
0753                         ; Postbyte bits indicate registers to push/pull when 1.
0754                         ; 7  6   5 4 3  2 1 0
0755                         ; PC S/U Y X DP B A CC
0756                         
0757                         ; TODO: Could simplify this with shifting and lookup table.
0758                         
0759 1337 85 80                      BITA    #%10000000      ; Bit 7 set?
0760 1339 27 0d                      BEQ     bit6
0761 133b 34 06                      PSHS    A,B
0762 133d 86 50                      LDA     #'P
0763 133f c6 43                      LDB     #'C
0764 1341 8d dd                      BSR     Print2Reg       ; Print PC
0765 1343 7f 10 0d                   CLR     FIRST
0766 1346 35 06                      PULS    A,B
0767 1348 85 40              bit6:   BITA    #%01000000      ; Bit 6 set?
0768 134a 27 21                      BEQ     bit5
0769                         
0770                         ; Need to show S or U depending on instruction
0771                         
0772 134c 34 02                      PSHS    A               ; Save postbyte
0773 134e b6 10 06                   LDA     OPTYPE          ; Get opcode type
0774 1351 81 66                      CMPA    #OP_PULS
0775 1353 27 12                      BEQ     printu
0776 1355 81 64                      CMPA    #OP_PSHS
0777 1357 27 0e                      BEQ     printu
0778 1359 17 00 81                   LBSR    PrintCommaIfNotFirst
0779 135c 86 53                      LDA     #'S             ; Print S
0780 135e 8d bc              pr1     BSR     Print1Reg
0781 1360 7f 10 0d                   CLR     FIRST
0782 1363 35 02                      PULS    A
0783 1365 20 06                      bra     bit5
0784 1367 8d 74              printu: BSR     PrintCommaIfNotFirst
0785 1369 86 55                      LDA     #'U             ; Print U
0786 136b 20 f1                      bra     pr1
0787 136d 85 20              bit5:   BITA    #%00100000      ; Bit 5 set?
0788 136f 27 0d                      BEQ     bit4
0789 1371 34 02                      PSHS    A
0790 1373 8d 68                      BSR     PrintCommaIfNotFirst
0791 1375 86 59                      LDA     #'Y
0792 1377 8d a3                      BSR     Print1Reg       ; Print Y
0793 1379 7f 10 0d                   CLR     FIRST
0794 137c 35 02                      PULS    A
0795 137e 85 10              bit4:   BITA    #%00010000      ; Bit 4 set?
0796 1380 27 0d                      BEQ     bit3
0797 1382 34 02                      PSHS    A
0798 1384 8d 57                      BSR     PrintCommaIfNotFirst
0799 1386 86 58                      LDA     #'X
0800 1388 8d 92                      BSR     Print1Reg       ; Print X
0801 138a 7f 10 0d                   CLR     FIRST
0802 138d 35 02                      PULS    A
0803 138f 85 08              bit3:   BITA    #%00001000      ; Bit 3 set?
0804 1391 27 0f                      BEQ     bit2
0805 1393 34 06                      PSHS    A,B
0806 1395 8d 46                      BSR     PrintCommaIfNotFirst
0807 1397 86 44                      LDA     #'D
0808 1399 c6 50                      LDB     #'P
0809 139b 8d 83                      BSR     Print2Reg       ; Print DP
0810 139d 7f 10 0d                   CLR     FIRST
0811 13a0 35 06                      PULS    A,B
0812 13a2 85 04              bit2:   BITA    #%00000100      ; Bit 2 set?
0813 13a4 27 0e                      BEQ     bit1
0814 13a6 34 02                      PSHS    A
0815 13a8 8d 33                      BSR     PrintCommaIfNotFirst
0816 13aa 86 42                      LDA     #'B
0817 13ac 17 ff 6d                   LBSR    Print1Reg       ; Print B
0818 13af 7f 10 0d                   CLR     FIRST
0819 13b2 35 02                      PULS    A
0820 13b4 85 02              bit1:   BITA    #%00000010      ; Bit 1 set?
0821 13b6 27 0e                      BEQ     bit0
0822 13b8 34 02                      PSHS    A
0823 13ba 8d 21                      BSR     PrintCommaIfNotFirst
0824 13bc 86 41                      LDA     #'A
0825 13be 17 ff 5b                   LBSR    Print1Reg       ; Print A
0826 13c1 7f 10 0d                   CLR     FIRST
0827 13c4 35 02                      PULS    A
0828 13c6 85 01              bit0:   BITA    #%00000001      ; Bit 0 set?
0829 13c8 27 10                      BEQ     done1
0830 13ca 34 06                      PSHS    A,B
0831 13cc 8d 0f                      BSR     PrintCommaIfNotFirst
0832 13ce 86 43                      LDA     #'C
0833 13d0 c6 43                      LDB     #'C
0834 13d2 17 ff 4b                   LBSR    Print2Reg       ; Print CC
0835 13d5 7f 10 0d                   CLR     FIRST
0836 13d8 35 06                      PULS    A,B
0837 13da 16 02 f2           done1   LBRA    done
0838                         
0839                         ; Print comma if FIRST flag is not set.
0840                         PrintCommaIfNotFirst:
0841 13dd 7d 10 0d                   TST     FIRST
0842 13e0 26 05                      BNE     ret1
0843 13e2 86 2c                      LDA     #',
0844 13e4 17 fc b1                   LBSR    PrintChar
0845 13e7 39                 ret1:   RTS
0846                         
0847                         DO_IMMEDIATE16:                 ; Display "  #$nnnn"
0848 13e8 17 fc 94                   LBSR    Print2Spaces    ; Two spaces
0849 13eb 86 23                      LDA     #'#             ; Number sign
0850 13ed 17 fc a8                   LBSR    PrintChar
0851 13f0 17 fc 65                   LBSR    PrintDollar     ; Dollar sign
0852 13f3 ae 8d fc 0b                LDX     ADDR,PCR        ; Get address of op code
0853 13f7 a6 01                      LDA     1,X             ; Get first byte (immediate data MSB)
0854 13f9 e6 02                      LDB     2,X             ; Get second byte (immediate data LSB)
0855 13fb 1f 01                      TFR     D,X             ; Put in X to print
0856 13fd 17 fc ac                   LBSR    PrintAddress    ; Print as hex value
0857 1400 16 02 cc                   LBRA    done
0858                         
0859                         DO_DIRECT:                      ; Display "  $nn"
0860 1403 17 fc 79                   LBSR    Print2Spaces    ; Two spaces
0861 1406 17 fc 4f                   LBSR    PrintDollar     ; Dollar sign
0862 1409 ae 8d fb f5                LDX     ADDR,PCR        ; Get address of op code
0863 140d a6 01                      LDA     1,X             ; Get next byte (byte data)
0864 140f 17 fc 8c                   LBSR    PrintByte       ; Print as hex value
0865 1412 16 02 ba                   LBRA    done
0866                         
0867                         DO_EXTENDED:                    ; Display "  $nnnn"
0868 1415 17 fc 67                   LBSR    Print2Spaces    ; Two spaces
0869 1418 17 fc 3d                   LBSR    PrintDollar     ; Dollar sign
0870 141b ae 8d fb e3                LDX     ADDR,PCR        ; Get address of op code
0871 141f a6 01                      LDA     1,X             ; Get first byte (address MSB)
0872 1421 e6 02                      LDB     2,X             ; Get second byte (address LSB)
0873 1423 1f 01                      TFR     D,X             ; Put in X to print
0874 1425 17 fc 84                   LBSR    PrintAddress    ; Print as hex value
0875 1428 16 02 a4                   LBRA    done
0876                         
0877                         DO_RELATIVE8:                   ; Display "  $nnnn"
0878 142b 17 fc 51                   LBSR    Print2Spaces    ; Two spaces
0879 142e 17 fc 27                   LBSR    PrintDollar     ; Dollar sign
0880                         
0881                         ; Destination address for relative branch is address of opcode + (sign
0882                         ; extended)offset + 2, e.g.
0883                         ;   $1015 + $(FF)FC + 2 = $1013
0884                         ;   $101B + $(00)27 + 2 = $1044
0885                         
0886 1431 ae 8d fb cd                LDX     ADDR,PCR        ; Get address of op code
0887 1435 e6 01                      LDB     1,X             ; Get first byte (8-bit branch offset)
0888 1437 1d                         SEX                     ; Sign extend to 16 bits
0889 1438 f3 10 02                   ADDD    ADDR            ; Add address of op code
0890 143b c3 00 02                   ADDD    #2              ; Add 2
0891 143e 1f 01                      TFR     D,X             ; Put in X to print
0892 1440 17 fc 69                   LBSR    PrintAddress    ; Print as hex value
0893 1443 16 02 89                   LBRA    done
0894                         
0895                         DO_RELATIVE16:                  ; Display "  $nnnn"
0896 1446 17 fc 36                   LBSR    Print2Spaces    ; Two spaces
0897 1449 17 fc 0c                   LBSR    PrintDollar     ; Dollar sign
0898                         
0899                         ; Destination address calculation is similar to above, except offset
0900                         ; is 16 bits and need to add 3.
0901                         
0902 144c ae 8d fb b2                LDX     ADDR,PCR        ; Get address of op code
0903 1450 ec 01                      LDD     1,X             ; Get next 2 bytes (16-bit branch offset)
0904 1452 f3 10 02                   ADDD    ADDR            ; Add address of op code
0905 1455 c3 00 03                   ADDD    #3              ; Add 3
0906 1458 1f 01                      TFR     D,X             ; Put in X to print
0907 145a 17 fc 4f                   LBSR    PrintAddress    ; Print as hex value
0908 145d 16 02 6f                   LBRA    done
0909                         
0910                         DO_INDEXED:
0911 1460 17 fc 1c                   LBSR    Print2Spaces    ; Two spaces
0912                         
0913                         ; Addressing modes are determined by the postbyte:
0914                         ;
0915                         ; Postbyte  Format  Additional Bytes
0916                         ; --------  ------  ----------------
0917                         ; 0RRnnnnn  n,R     0
0918                         ; 1RR00100  ,R      0
0919                         ; 1RR01000  n,R     1
0920                         ; 1RR01001  n,R     2
0921                         ; 1RR00110  A,R     0
0922                         ; 1RR00101  B,R     0
0923                         ; 1RR01011  D,R     0
0924                         ; 1RR00000  ,R+     0
0925                         ; 1RR00001  ,R++    0
0926                         ; 1RR00010  ,-R     0
0927                         ; 1RR00011  ,--R    0
0928                         ; 1xx01100  n,PCR   1
0929                         ; 1xx01101  n,PCR   2
0930                         ; 1RR10100  [,R]    0
0931                         ; 1RR11000  [n,R]   1
0932                         ; 1RR11001  [n,R]   2
0933                         ; 1RR10110  [A,R]   0
0934                         ; 1RR10101  [B,R]   0
0935                         ; 1RR11011  [D,R]   0
0936                         ; 1RR10001  [,R++]  0
0937                         ; 1RR10011  [,--R]  0
0938                         ; 1xx11100  [n,PCR] 1
0939                         ; 1xx11101  [n,PCR] 2
0940                         ; 10011111  [n]     2
0941                         ;
0942                         ; Where RR: 00=X 01=Y 10=U 11=S
0943                         
0944 1463 b6 10 07                   LDA     POSTBYT         ; Get postbyte
0945 1466 2b 14                      BMI     ind2            ; Branch if MSB is 1
0946                         
0947                                                         ; Format is 0RRnnnnn  n,R
0948 1468 84 1f                      ANDA    #%00011111      ; Get 5-bit offset
0949 146a 17 fb eb                   LBSR    PrintDollar     ; Dollar sign
0950 146d 17 fc 2e                   LBSR    PrintByte       ; Print offset
0951 1470 17 fb ee                   LBSR    PrintComma      ; Print comma
0952 1473 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0953 1476 17 02 35                   LBSR    PrintRegister   ; Print register name
0954 1479 16 02 53                   LBRA    done
0955                         ind2:
0956 147c 84 9f                      ANDA    #%10011111      ; Mask out register bits
0957 147e 81 84                      CMPA    #%10000100      ; Check against pattern
0958 1480 26 0c                      BNE     ind3
0959                                                         ; Format is 1RR00100  ,R
0960 1482 17 fb dc                   LBSR    PrintComma      ; Print comma
0961 1485 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0962 1488 17 02 23                   LBSR    PrintRegister   ; Print register name
0963 148b 16 02 41                   LBRA    done
0964                         ind3:
0965 148e 81 88                      CMPA    #%10001000      ; Check against pattern
0966 1490 26 18                      BNE     ind4
0967                                                         ; Format is 1RR01000  n,R
0968 1492 ae 8d fb 6c                LDX     ADDR,PCR
0969 1496 a6 02                      LDA     2,X             ; Get 8-bit offset
0970 1498 17 fb bd                   LBSR    PrintDollar     ; Dollar sign
0971 149b 17 fc 00                   LBSR    PrintByte       ; Display it
0972 149e 17 fb c0                   LBSR    PrintComma      ; Print comma
0973 14a1 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0974 14a4 17 02 07                   LBSR    PrintRegister   ; Print register name
0975 14a7 16 02 25                   LBRA    done
0976                         ind4:
0977 14aa 81 89                      CMPA    #%10001001      ; Check against pattern
0978 14ac 26 1a                      BNE     ind5
0979                                                         ; Format is 1RR01001  n,R
0980 14ae ae 8d fb 50                LDX     ADDR,PCR
0981 14b2 ec 02                      LDD     2,X             ; Get 16-bit offset
0982 14b4 1f 01                      TFR     D,X
0983 14b6 17 fb 9f                   LBSR    PrintDollar     ; Dollar sign
0984 14b9 17 fb f0                   LBSR    PrintAddress    ; Display it
0985 14bc 17 fb a2                   LBSR    PrintComma      ; Print comma
0986 14bf b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0987 14c2 17 01 e9                   LBSR    PrintRegister   ; Print register name
0988 14c5 16 02 07                   LBRA    done
0989                         ind5:
0990 14c8 81 86                      CMPA    #%10000110      ; Check against pattern
0991 14ca 26 11                      BNE     ind6
0992                                                         ; Format is 1RR00110  A,R
0993 14cc 86 41                      LDA     #'A
0994 14ce 17 fb c7                   LBSR    PrintChar       ; Print A
0995 14d1 17 fb 8d           commar: LBSR    PrintComma      ; Print comma
0996 14d4 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
0997 14d7 17 01 d4                   LBSR    PrintRegister   ; Print register name
0998 14da 16 01 f2                   LBRA    done
0999                         ind6:
1000 14dd 81 85                      CMPA    #%10000101      ; Check against pattern
1001 14df 26 07                      BNE     ind7
1002                                                         ; Format is 1RR00101  B,R
1003 14e1 86 42                      LDA     #'B
1004 14e3 17 fb b2                   LBSR    PrintChar
1005 14e6 20 e9                      BRA     commar
1006                         ind7:
1007 14e8 81 8b                      CMPA    #%10001011      ; Check against pattern
1008 14ea 26 07                      BNE     ind8
1009                                                         ; Format is 1RR01011  D,R
1010 14ec 86 44                      LDA     #'D
1011 14ee 17 fb a7                   LBSR    PrintChar
1012 14f1 20 de                      BRA     commar
1013                         ind8:
1014 14f3 81 80                      CMPA    #%10000000      ; Check against pattern
1015 14f5 26 11                      BNE     ind9
1016                                                         ; Format is 1RR00000  ,R+
1017 14f7 17 fb 67                   LBSR    PrintComma      ; Print comma
1018 14fa b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1019 14fd 17 01 ae                   LBSR    PrintRegister   ; Print register name
1020 1500 86 2b                      LDA     #'+             ; Print plus
1021 1502 17 fb 93                   LBSR    PrintChar
1022 1505 16 01 c7                   LBRA    done
1023                         ind9:
1024 1508 81 81                      CMPA    #%10000001      ; Check against pattern
1025 150a 26 14                      BNE     ind10
1026                                                         ; Format is 1RR00001  ,R++
1027 150c 17 fb 52                   LBSR    PrintComma      ; Print comma
1028 150f b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1029 1512 17 01 99                   LBSR    PrintRegister   ; Print register name
1030 1515 86 2b                      LDA     #'+             ; Print plus twice
1031 1517 17 fb 7e                   LBSR    PrintChar
1032 151a 17 fb 7b                   LBSR    PrintChar
1033 151d 16 01 af                   LBRA    done
1034                         ind10:
1035 1520 81 82                      CMPA    #%10000010      ; Check against pattern
1036 1522 26 11                      BNE     ind11
1037                                                         ; Format is 1RR00010  ,-R
1038 1524 17 fb 3a                   LBSR    PrintComma      ; Print comma
1039 1527 86 2d                      LDA     #'-             ; Print minus
1040 1529 17 fb 6c                   LBSR    PrintChar
1041 152c b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1042 152f 17 01 7c                   LBSR    PrintRegister   ; Print register name
1043 1532 16 01 9a                   LBRA    done
1044                         ind11:
1045 1535 81 83                      CMPA    #%10000011      ; Check against pattern
1046 1537 26 14                      BNE     ind12
1047                                                         ; Format is 1RR00011  ,--R
1048 1539 17 fb 25                   LBSR    PrintComma      ; Print comma
1049 153c 86 2d                      LDA     #'-             ; Print minus twice
1050 153e 17 fb 57                   LBSR    PrintChar
1051 1541 17 fb 54                   LBSR    PrintChar
1052 1544 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1053 1547 17 01 64                   LBSR    PrintRegister   ; Print register name
1054 154a 16 01 82                   LBRA    done
1055                         ind12:
1056 154d 81 8c                      CMPA    #%10001100      ; Check against pattern
1057 154f 26 15                      BNE     ind13
1058                                                         ; Format is 1xx01100  n,PCR
1059 1551 ae 8d fa ad                LDX     ADDR,PCR
1060 1555 a6 02                      LDA     2,X             ; Get 8-bit offset
1061 1557 17 fa fe                   LBSR    PrintDollar     ; Dollar sign
1062 155a 17 fb 41                   LBSR    PrintByte       ; Display it
1063 155d 17 fb 01                   LBSR    PrintComma      ; Print comma
1064 1560 17 01 64                   LBSR    PrintPCR        ; Print PCR
1065 1563 16 01 69                   LBRA    done
1066                         ind13:
1067 1566 81 8d                      CMPA    #%10001101      ; Check against pattern
1068 1568 26 17                      BNE     ind14
1069                                                         ; Format is 1xx01101  n,PCR
1070 156a ae 8d fa 94                LDX     ADDR,PCR
1071 156e ec 02                      LDD     2,X             ; Get 16-bit offset
1072 1570 1f 01                      TFR     D,X
1073 1572 17 fa e3                   LBSR    PrintDollar     ; Dollar sign
1074 1575 17 fb 34                   LBSR    PrintAddress    ; Display it
1075 1578 17 fa e6                   LBSR    PrintComma      ; Print comma
1076 157b 17 01 49                   LBSR    PrintPCR        ; Print PCR
1077 157e 16 01 4e                   LBRA    done
1078                         ind14:
1079 1581 81 94                      CMPA    #%10010100      ; Check against pattern
1080 1583 26 12                      BNE     ind15
1081                                                         ; Format is 1RR10100  [,R]
1082 1585 17 fa e2                   LBSR    PrintLBracket   ; Print left bracket
1083 1588 17 fa d6                   LBSR    PrintComma      ; Print comma
1084 158b b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1085 158e 17 01 1d                   LBSR    PrintRegister   ; Print register name
1086 1591 17 fa df                   LBSR    PrintRBracket   ; Print right bracket
1087 1594 16 01 38                   LBRA    done
1088                         ind15:
1089 1597 81 98                      CMPA    #%10011000      ; Check against pattern
1090 1599 26 1e                      BNE     ind16
1091                                                         ; Format is 1RR11000  [n,R]
1092 159b 17 fa cc                   LBSR    PrintLBracket   ; Print left bracket
1093 159e ae 8d fa 60                LDX     ADDR,PCR
1094 15a2 a6 02                      LDA     2,X             ; Get 8-bit offset
1095 15a4 17 fa b1                   LBSR    PrintDollar     ; Dollar sign
1096 15a7 17 fa f4                   LBSR    PrintByte       ; Display it
1097 15aa 17 fa b4                   LBSR    PrintComma      ; Print comma
1098 15ad b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1099 15b0 17 00 fb                   LBSR    PrintRegister   ; Print register name
1100 15b3 17 fa bd                   LBSR    PrintRBracket   ; Print right bracket
1101 15b6 16 01 16                   LBRA    done
1102                         ind16:
1103 15b9 81 99                      CMPA    #%10011001      ; Check against pattern
1104 15bb 26 20                      BNE     ind17
1105                                                         ; Format is 1RR11001  [n,R]
1106 15bd 17 fa aa                   LBSR    PrintLBracket   ; Print left bracket
1107 15c0 ae 8d fa 3e                LDX     ADDR,PCR
1108 15c4 ec 02                      LDD     2,X             ; Get 16-bit offset
1109 15c6 1f 01                      TFR     D,X
1110 15c8 17 fa 8d                   LBSR    PrintDollar     ; Dollar sign
1111 15cb 17 fa de                   LBSR    PrintAddress    ; Display it
1112 15ce 17 fa 90                   LBSR    PrintComma      ; Print comma
1113 15d1 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1114 15d4 17 00 d7                   LBSR    PrintRegister   ; Print register name
1115 15d7 17 fa 99                   LBSR    PrintRBracket   ; Print right bracket
1116 15da 16 00 f2                   LBRA    done
1117                         ind17:
1118 15dd 81 96                      CMPA    #%10010110      ; Check against pattern
1119 15df 26 17                      BNE     ind18
1120                                                         ; Format is 1RR10110  [A,R]
1121 15e1 17 fa 86                   LBSR    PrintLBracket   ; Print left bracket
1122 15e4 86 41                      LDA     #'A
1123 15e6 17 fa af                   LBSR    PrintChar       ; Print A
1124 15e9 17 fa 75           comrb:  LBSR    PrintComma      ; Print comma
1125 15ec b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1126 15ef 17 00 bc                   LBSR    PrintRegister   ; Print register name
1127 15f2 17 fa 7e                   LBSR    PrintRBracket   ; Print right bracket
1128 15f5 16 00 d7                   LBRA    done
1129                         ind18:
1130 15f8 81 95                      CMPA    #%10010101      ; Check against pattern
1131 15fa 26 0a                      BNE     ind19
1132                                                         ; Format is 1RR10101  [B,R]
1133 15fc 17 fa 6b                   LBSR    PrintLBracket   ; Print left bracket
1134 15ff 86 42                      LDA     #'B
1135 1601 17 fa 94                   LBSR    PrintChar
1136 1604 20 e3                      BRA     comrb
1137                         ind19:
1138 1606 81 9b                      CMPA    #%10011011      ; Check against pattern
1139 1608 26 0a                      BNE     ind20
1140                                                         ; Format is 1RR11011  [D,R]
1141 160a 17 fa 5d                   LBSR    PrintLBracket   ; Print left bracket
1142 160d 86 44                      LDA     #'D
1143 160f 17 fa 86                   LBSR    PrintChar
1144 1612 20 d5                      BRA     comrb
1145                         ind20:
1146 1614 81 91                      CMPA    #%10010001      ; Check against pattern
1147 1616 26 1a                      BNE     ind21
1148                                                         ; Format is 1RR10001  [,R++]
1149 1618 17 fa 4f                   LBSR    PrintLBracket   ; Print left bracket
1150 161b 17 fa 43                   LBSR    PrintComma      ; Print comma
1151 161e b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1152 1621 17 00 8a                   LBSR    PrintRegister   ; Print register name
1153 1624 86 2b                      LDA     #'+             ; Print plus twice
1154 1626 17 fa 6f                   LBSR    PrintChar
1155 1629 17 fa 6c                   LBSR    PrintChar
1156 162c 17 fa 44                   LBSR    PrintRBracket   ; Print right bracket
1157 162f 16 00 9d                   LBRA    done
1158                         ind21:
1159 1632 81 93                      CMPA    #%10010011      ; Check against pattern
1160 1634 26 1a                      BNE     ind22
1161                                                         ; Format is 1RR10011  [,--R]
1162 1636 17 fa 31                   LBSR    PrintLBracket   ; Print left bracket
1163 1639 17 fa 25                   LBSR    PrintComma      ; Print comma
1164 163c 86 2d                      LDA     #'-             ; Print minus twice
1165 163e 17 fa 57                   LBSR    PrintChar
1166 1641 17 fa 54                   LBSR    PrintChar
1167 1644 b6 10 07                   LDA     POSTBYT         ; Get postbyte again
1168 1647 17 00 64                   LBSR    PrintRegister   ; Print register name
1169 164a 17 fa 26                   LBSR    PrintRBracket   ; Print right bracket
1170 164d 16 00 7f                   LBRA    done
1171                         ind22:
1172 1650 81 9c                      CMPA    #%10011100      ; Check against pattern
1173 1652 26 1b                      BNE     ind23
1174                                                         ; Format is 1xx11100  [n,PCR]
1175 1654 17 fa 13                   LBSR    PrintLBracket   ; Print left bracket
1176 1657 ae 8d f9 a7                LDX     ADDR,PCR
1177 165b a6 02                      LDA     2,X             ; Get 8-bit offset
1178 165d 17 f9 f8                   LBSR    PrintDollar     ; Dollar sign
1179 1660 17 fa 3b                   LBSR    PrintByte       ; Display it
1180 1663 17 f9 fb                   LBSR    PrintComma      ; Print comma
1181 1666 17 00 5e                   LBSR    PrintPCR        ; Print PCR
1182 1669 17 fa 07                   LBSR    PrintRBracket   ; Print right bracket
1183 166c 16 00 60                   LBRA    done
1184                         ind23:
1185 166f 81 9d                      CMPA    #%10011101      ; Check against pattern
1186 1671 26 1d                      BNE     ind24
1187                                                         ; Format is 1xx11101  [n,PCR]
1188 1673 17 f9 f4                   LBSR    PrintLBracket   ; Print left bracket
1189 1676 ae 8d f9 88                LDX     ADDR,PCR
1190 167a ec 02                      LDD     2,X             ; Get 16-bit offset
1191 167c 1f 01                      TFR     D,X
1192 167e 17 f9 d7                   LBSR    PrintDollar     ; Dollar sign
1193 1681 17 fa 28                   LBSR    PrintAddress    ; Display it
1194 1684 17 f9 da                   LBSR    PrintComma      ; Print comma
1195 1687 17 00 3d                   LBSR    PrintPCR        ; Print PCR
1196 168a 17 f9 e6                   LBSR    PrintRBracket   ; Print right bracket
1197 168d 16 00 3f                   LBRA    done
1198                         ind24:
1199 1690 81 9f                      CMPA    #%10011111      ; Check against pattern
1200 1692 26 17                      BNE     ind25
1201                                                         ; Format is 1xx11111  [n]
1202 1694 17 f9 d3                   LBSR    PrintLBracket   ; Print left bracket
1203 1697 ae 8d f9 67                LDX     ADDR,PCR
1204 169b ec 02                      LDD     2,X             ; Get 16-bit offset
1205 169d 1f 01                      TFR     D,X
1206 169f 17 f9 b6                   LBSR    PrintDollar     ; Dollar sign
1207 16a2 17 fa 07                   LBSR    PrintAddress    ; Display it
1208 16a5 17 f9 cb                   LBSR    PrintRBracket   ; Print right bracket
1209 16a8 16 00 24                   LBRA    done
1210                         ind25:                          ; Should never be reached
1211 16ab 16 00 21                   LBRA    done
1212                         
1213                         ; Print register name encoded in bits 5 and 6 of A for indexed
1214                         ; addressing: xRRxxxxx where RR: 00=X 01=Y 10=U 11=S
1215                         ; Registers changed: X
1216                         PrintRegister:
1217 16ae 34 02                      PSHS    A               ; Save A
1218 16b0 84 60                      ANDA    #%01100000      ; Mask out other bits
1219 16b2 44                         LSRA                    ; Shift into 2 LSB
1220 16b3 44                         LSRA
1221 16b4 44                         LSRA
1222 16b5 44                         LSRA
1223 16b6 44                         LSRA
1224 16b7 30 8d 00 08                LEAX    REGTABLE,PCR    ; Lookup table of register name characters
1225 16bb a6 86                      LDA     A,X             ; Get character
1226 16bd 17 f9 d8                   LBSR    PrintChar       ; Print it
1227 16c0 35 02                      PULS    A               ; Restore A
1228 16c2 39                         RTS                     ; Return
1229                         REGTABLE:
1230 16c3 58 59 55 53                FCC     "XYUS"
1231                         
1232                         
1233                         ; Print the string "PCR" on the console.
1234                         ; Registers changed: X
1235                         PrintPCR:
1236 16c7 30 8d 05 1c                LEAX    MSG3,PCR        ; "PCR" string
1237 16cb 17 f9 ec                   LBSR    PrintString
1238 16ce 39                         RTS
1239                         
1240                         ; Print final CR
1241                         
1242 16cf 17 f9 79           done:   LBSR    PrintCR
1243                         
1244                         ; Update address to next instruction
1245                         ; If it was a page 2/3 instruction, we need to subtract one from the
1246                         ; length to account for ADDR being moved to the second byte of the
1247                         ; instruction.
1248                         
1249 16d2 7d 10 0e                   TST     PAGE23          ; Flag set
1250 16d5 27 03                      BEQ     not23           ; Branch if not
1251 16d7 7a 10 08                   DEC     LEN             ; Decrement length
1252 16da 4f                 not23:  CLRA                    ; Clear MSB of D
1253 16db f6 10 08                   LDB     LEN             ; Get length byte in LSB of D
1254 16de f3 10 02                   ADDD    ADDR            ; Add to address
1255 16e1 fd 10 02                   STD     ADDR            ; Write new address
1256                         
1257                         ; Return
1258 16e4 39                         RTS
1259                         
1260                         ; *** DATA
1261                         
1262                         ; Table of instruction strings. 4 bytes per table entry
1263                         MNEMONICS:
1264 16e5 3f 3f 3f 20                FCC     "??? "          ; $00
1265 16e9 41 42 58 20                FCC     "ABX "          ; $01
1266 16ed 41 44 43 41                FCC     "ADCA"          ; $02
1267 16f1 41 44 43 42                FCC     "ADCB"          ; $03
1268 16f5 41 44 44 41                FCC     "ADDA"          ; $04
1269 16f9 41 44 44 42                FCC     "ADDB"          ; $05
1270 16fd 41 44 44 44                FCC     "ADDD"          ; $06
1271 1701 41 4e 44 41                FCC     "ANDA"          ; $07
1272 1705 41 4e 44 42                FCC     "ANDB"          ; $08
1273 1709 41 4e 44 43                FCC     "ANDC"          ; $09 Should really  be "ANDCC"
1274 170d 41 53 4c 20                FCC     "ASL "          ; $0A
1275 1711 41 53 4c 41                FCC     "ASLA"          ; $0B
1276 1715 41 53 4c 42                FCC     "ASLB"          ; $0C
1277 1719 41 53 52 20                FCC     "ASR "          ; $0D
1278 171d 41 53 52 41                FCC     "ASRA"          ; $0E
1279 1721 41 53 52 42                FCC     "ASRB"          ; $0F
1280 1725 42 43 43 20                FCC     "BCC "          ; $10
1281 1729 42 43 53 20                FCC     "BCS "          ; $11
1282 172d 42 45 51 20                FCC     "BEQ "          ; $12
1283 1731 42 47 45 20                FCC     "BGE "          ; $13
1284 1735 42 47 54 20                FCC     "BGT "          ; $14
1285 1739 42 48 49 20                FCC     "BHI "          ; $15
1286 173d 42 49 54 41                FCC     "BITA"          ; $16
1287 1741 42 49 54 42                FCC     "BITB"          ; $17
1288 1745 42 4c 45 20                FCC     "BLE "          ; $18
1289 1749 42 4c 53 20                FCC     "BLS "          ; $19
1290 174d 42 4c 54 20                FCC     "BLT "          ; $1A
1291 1751 42 4d 49 20                FCC     "BMI "          ; $1B
1292 1755 42 4e 45 20                FCC     "BNE "          ; $1C
1293 1759 42 50 4c 20                FCC     "BPL "          ; $1D
1294 175d 42 52 41 20                FCC     "BRA "          ; $1E
1295 1761 42 52 4e 20                FCC     "BRN "          ; $1F
1296 1765 42 53 52 20                FCC     "BSR "          ; $20
1297 1769 42 56 43 20                FCC     "BVC "          ; $21
1298 176d 42 56 53 20                FCC     "BVS "          ; $22
1299 1771 43 4c 52 20                FCC     "CLR "          ; $23
1300 1775 43 4c 52 41                FCC     "CLRA"          ; $24
1301 1779 43 4c 52 42                FCC     "CLRB"          ; $25
1302 177d 43 4d 50 41                FCC     "CMPA"          ; $26
1303 1781 43 4d 50 42                FCC     "CMPB"          ; $27
1304 1785 43 4d 50 44                FCC     "CMPD"          ; $28
1305 1789 43 4d 50 53                FCC     "CMPS"          ; $29
1306 178d 43 4d 50 55                FCC     "CMPU"          ; $2A
1307 1791 43 4d 50 58                FCC     "CMPX"          ; $2B
1308 1795 43 4d 50 59                FCC     "CMPY"          ; $2C
1309 1799 43 4f 4d 41                FCC     "COMA"          ; $2D
1310 179d 43 4f 4d 42                FCC     "COMB"          ; $2E
1311 17a1 43 4f 4d 20                FCC     "COM "          ; $2F
1312 17a5 43 57 41 49                FCC     "CWAI"          ; $30
1313 17a9 44 41 41 20                FCC     "DAA "          ; $31
1314 17ad 44 45 43 20                FCC     "DEC "          ; $32
1315 17b1 44 45 43 41                FCC     "DECA"          ; $33
1316 17b5 44 45 43 42                FCC     "DECB"          ; $34
1317 17b9 45 4f 52 41                FCC     "EORA"          ; $35
1318 17bd 45 4f 52 42                FCC     "EORB"          ; $36
1319 17c1 45 58 47 20                FCC     "EXG "          ; $37
1320 17c5 49 4e 43 20                FCC     "INC "          ; $38
1321 17c9 49 4e 43 41                FCC     "INCA"          ; $39
1322 17cd 49 4e 43 42                FCC     "INCB"          ; $3A
1323 17d1 4a 4d 50 20                FCC     "JMP "          ; $3B
1324 17d5 4a 53 52 20                FCC     "JSR "          ; $3C
1325 17d9 4c 42 43 43                FCC     "LBCC"          ; $3D
1326 17dd 4c 42 43 53                FCC     "LBCS"          ; $3E
1327 17e1 4c 42 45 51                FCC     "LBEQ"          ; $3F
1328 17e5 4c 42 47 45                FCC     "LBGE"          ; $40
1329 17e9 4c 42 47 54                FCC     "LBGT"          ; $41
1330 17ed 4c 42 48 49                FCC     "LBHI"          ; $42
1331 17f1 4c 42 4c 45                FCC     "LBLE"          ; $43
1332 17f5 4c 42 4c 53                FCC     "LBLS"          ; $44
1333 17f9 4c 42 4c 54                FCC     "LBLT"          ; $45
1334 17fd 4c 42 4d 49                FCC     "LBMI"          ; $46
1335 1801 4c 42 4e 45                FCC     "LBNE"          ; $47
1336 1805 4c 42 50 4c                FCC     "LBPL"          ; $48
1337 1809 4c 42 52 41                FCC     "LBRA"          ; $49
1338 180d 4c 42 52 4e                FCC     "LBRN"          ; $4A
1339 1811 4c 42 53 52                FCC     "LBSR"          ; $4B
1340 1815 4c 42 56 43                FCC     "LBVC"          ; $4C
1341 1819 4c 42 56 53                FCC     "LBVS"          ; $4D
1342 181d 4c 44 41 20                FCC     "LDA "          ; $4E
1343 1821 4c 44 42 20                FCC     "LDB "          ; $4F
1344 1825 4c 44 44 20                FCC     "LDD "          ; $50
1345 1829 4c 44 53 20                FCC     "LDS "          ; $51
1346 182d 4c 44 55 20                FCC     "LDU "          ; $52
1347 1831 4c 44 58 20                FCC     "LDX "          ; $53
1348 1835 4c 44 59 20                FCC     "LDY "          ; $54
1349 1839 4c 45 41 53                FCC     "LEAS"          ; $55
1350 183d 4c 45 41 55                FCC     "LEAU"          ; $56
1351 1841 4c 45 41 58                FCC     "LEAX"          ; $57
1352 1845 4c 45 41 59                FCC     "LEAY"          ; $58
1353 1849 4c 53 52 20                FCC     "LSR "          ; $59
1354 184d 4c 53 52 41                FCC     "LSRA"          ; $5A
1355 1851 4c 53 52 42                FCC     "LSRB"          ; $5B
1356 1855 4d 55 4c 20                FCC     "MUL "          ; $5C
1357 1859 4e 45 47 20                FCC     "NEG "          ; $5D
1358 185d 4e 45 47 41                FCC     "NEGA"          ; $5E
1359 1861 4e 45 47 42                FCC     "NEGB"          ; $5F
1360 1865 4e 4f 50 20                FCC     "NOP "          ; $60
1361 1869 4f 52 41 20                FCC     "ORA "          ; $61
1362 186d 4f 52 42 20                FCC     "ORB "          ; $62
1363 1871 4f 52 43 43                FCC     "ORCC"          ; $63
1364 1875 50 53 48 53                FCC     "PSHS"          ; $64
1365 1879 50 53 48 55                FCC     "PSHU"          ; $65
1366 187d 50 55 4c 53                FCC     "PULS"          ; $66
1367 1881 50 55 4c 55                FCC     "PULU"          ; $67
1368 1885 52 4f 4c 20                FCC     "ROL "          ; $68
1369 1889 52 4f 4c 41                FCC     "ROLA"          ; $69
1370 188d 52 4f 4c 42                FCC     "ROLB"          ; $6A
1371 1891 52 4f 52 20                FCC     "ROR "          ; $6B
1372 1895 52 4f 52 41                FCC     "RORA"          ; $6C
1373 1899 52 4f 52 42                FCC     "RORB"          ; $6D
1374 189d 52 54 49 20                FCC     "RTI "          ; $6E
1375 18a1 52 54 53 20                FCC     "RTS "          ; $6F
1376 18a5 53 42 43 41                FCC     "SBCA"          ; $70
1377 18a9 53 42 43 42                FCC     "SBCB"          ; $71
1378 18ad 53 45 58 20                FCC     "SEX "          ; $72
1379 18b1 53 54 41 20                FCC     "STA "          ; $73
1380 18b5 53 54 42 20                FCC     "STB "          ; $74
1381 18b9 53 54 44 20                FCC     "STD "          ; $75
1382 18bd 53 54 53 20                FCC     "STS "          ; $76
1383 18c1 53 54 55 20                FCC     "STU "          ; $77
1384 18c5 53 54 58 20                FCC     "STX "          ; $78
1385 18c9 53 54 59 20                FCC     "STY "          ; $79
1386 18cd 53 55 42 41                FCC     "SUBA"          ; $7A
1387 18d1 53 55 42 42                FCC     "SUBB"          ; $7B
1388 18d5 53 55 42 44                FCC     "SUBD"          ; $7C
1389 18d9 53 57 49 20                FCC     "SWI "          ; $7D
1390 18dd 53 57 49 32                FCC     "SWI2"          ; $7E
1391 18e1 53 57 49 33                FCC     "SWI3"          ; $7F
1392 18e5 53 59 4e 43                FCC     "SYNC"          ; $80
1393 18e9 54 46 52 20                FCC     "TFR "          ; $81
1394 18ed 54 53 54 20                FCC     "TST "          ; $82
1395 18f1 54 53 54 41                FCC     "TSTA"          ; $83
1396 18f5 54 53 54 42                FCC     "TSTB"          ; $84
1397                         
1398                         ; Lengths of instructions given an addressing mode. Matches values of
1399                         ; AM_* Indexed addessing instructions lenth can increase due to post
1400                         ; byte.
1401                         LENGTHS:
1402 18f9 01                         FCB     1               ; 0 AM_INVALID
1403 18fa 01                         FCB     1               ; 1 AM_INHERENT
1404 18fb 02                         FCB     2               ; 2 AM_IMMEDIATE8
1405 18fc 03                         FCB     3               ; 3 AM_IMMEDIATE16
1406 18fd 02                         FCB     2               ; 4 AM_DIRECT
1407 18fe 03                         FCB     3               ; 5 AM_EXTENDED
1408 18ff 02                         FCB     2               ; 6 AM_RELATIVE8
1409 1900 03                         FCB     3               ; 7 AM_RELATIVE16
1410 1901 02                         FCB     2               ; 8 AM_INDEXED
1411                         
1412                         ; Lookup table to return needed remaining spaces to print to pad out
1413                         ; instruction to correct column in disassembly.
1414                         ; # bytes: 1 2 3 4
1415                         ; Padding: 9 6 3 0
1416                         PADDING:
1417 1902 0a 07 04 01                FCB     10, 7, 4, 1
1418                         
1419                         ; Lookup table to return number of additional bytes for indexed
1420                         ; addressing based on low order 5 bits of postbyte. Based on
1421                         ; detailed list of values below.
1422                         
1423                         POSTBYTES:
1424 1906 00 00 00 00 00 00          FCB     0, 0, 0, 0, 0, 0, 0, 0
     00 00
1425 190e 01 02 00 00 01 02          FCB     1, 2, 0, 0, 1, 2, 0, 0
     00 00
1426 1916 00 00 00 00 00 00          FCB     0, 0, 0, 0, 0, 0, 0, 0
     00 00
1427 191e 01 02 00 00 01 02          FCB     1, 2, 0, 0, 1, 2, 0, 2
     00 02
1428                         
1429                         ; Pattern:  # Extra bytes:
1430                         ; --------  --------------
1431                         ; 0XXXXXXX   0
1432                         ; 1XX00000   0
1433                         ; 1XX00001   0
1434                         ; 1XX00010   0
1435                         ; 1XX00011   0
1436                         ; 1XX00100   0
1437                         ; 1X000101   0
1438                         ; 1XX00110   0
1439                         ; 1XX00111   0 (INVALID)
1440                         ; 1XX01000   1
1441                         ; 1XX01001   2
1442                         ; 1XX01010   0 (INVALID)
1443                         ; 1XX01011   0
1444                         ; 1XX01100   1
1445                         ; 1XX01101   2
1446                         ; 1XX01110   0 (INVALID)
1447                         ; 1XX01111   0 (INVALID)
1448                         ; 1XX10000   0 (INVALID)
1449                         ; 1XX10001   0
1450                         ; 1XX10010   0 (INVALID)
1451                         ; 1XX10011   0
1452                         ; 1XX10100   0
1453                         ; 1XX10101   0
1454                         ; 1XX10110   0
1455                         ; 1XX10111   0 (INVALID)
1456                         ; 1XX11000   1
1457                         ; 1XX11001   2
1458                         ; 1XX11010   0 (INVALID)
1459                         ; 1XX11011   0
1460                         ; 1XX11100   1
1461                         ; 1XX11101   2
1462                         ; 1XX11110   0 (INVALID)
1463                         ; 1XX11111   2
1464                         
1465                         ; Opcodes. Listed in order indexed by op code. Defines the mnemonic.
1466                         OPCODES:
1467 1926 5d                         FCB     OP_NEG          ; 00
1468 1927 00                         FCB     OP_INV          ; 01
1469 1928 00                         FCB     OP_INV          ; 02
1470 1929 2e                         FCB     OP_COMB         ; 03
1471 192a 59                         FCB     OP_LSR          ; 04
1472 192b 00                         FCB     OP_INV          ; 05
1473 192c 6b                         FCB     OP_ROR          ; 06
1474 192d 0d                         FCB     OP_ASR          ; 07
1475 192e 0a                         FCB     OP_ASL          ; 08
1476 192f 68                         FCB     OP_ROL          ; 09
1477 1930 32                         FCB     OP_DEC          ; 0A
1478 1931 00                         FCB     OP_INV          ; 0B
1479 1932 38                         FCB     OP_INC          ; 0C
1480 1933 82                         FCB     OP_TST          ; 0D
1481 1934 3b                         FCB     OP_JMP          ; 0E
1482 1935 23                         FCB     OP_CLR          ; 0F
1483                         
1484 1936 00                         FCB     OP_INV          ; 10 Page 2 extended opcodes (see other table)
1485 1937 00                         FCB     OP_INV          ; 11 Page 3 extended opcodes (see other table)
1486 1938 60                         FCB     OP_NOP          ; 12
1487 1939 80                         FCB     OP_SYNC         ; 13
1488 193a 00                         FCB     OP_INV          ; 14
1489 193b 00                         FCB     OP_INV          ; 15
1490 193c 49                         FCB     OP_LBRA         ; 16
1491 193d 4b                         FCB     OP_LBSR         ; 17
1492 193e 00                         FCB     OP_INV          ; 18
1493 193f 31                         FCB     OP_DAA          ; 19
1494 1940 63                         FCB     OP_ORCC         ; 1A
1495 1941 00                         FCB     OP_INV          ; 1B
1496 1942 09                         FCB     OP_ANDCC        ; 1C
1497 1943 72                         FCB     OP_SEX          ; 1D
1498 1944 37                         FCB     OP_EXG          ; 1E
1499 1945 81                         FCB     OP_TFR          ; 1F
1500                         
1501 1946 1e                         FCB     OP_BRA          ; 20
1502 1947 1f                         FCB     OP_BRN          ; 21
1503 1948 15                         FCB     OP_BHI          ; 22
1504 1949 19                         FCB     OP_BLS          ; 23
1505 194a 10                         FCB     OP_BCC          ; 24
1506 194b 11                         FCB     OP_BCS          ; 25
1507 194c 1c                         FCB     OP_BNE          ; 26
1508 194d 12                         FCB     OP_BEQ          ; 27
1509 194e 21                         FCB     OP_BVC          ; 28
1510 194f 22                         FCB     OP_BVS          ; 29
1511 1950 1d                         FCB     OP_BPL          ; 2A
1512 1951 1b                         FCB     OP_BMI          ; 2B
1513 1952 13                         FCB     OP_BGE          ; 2C
1514 1953 1a                         FCB     OP_BLT          ; 2D
1515 1954 14                         FCB     OP_BGT          ; 2E
1516 1955 18                         FCB     OP_BLE          ; 2F
1517                         
1518 1956 57                         FCB     OP_LEAX         ; 30
1519 1957 58                         FCB     OP_LEAY         ; 31
1520 1958 55                         FCB     OP_LEAS         ; 32
1521 1959 56                         FCB     OP_LEAU         ; 33
1522 195a 64                         FCB     OP_PSHS         ; 34
1523 195b 66                         FCB     OP_PULS         ; 35
1524 195c 65                         FCB     OP_PSHU         ; 36
1525 195d 67                         FCB     OP_PULU         ; 37
1526 195e 00                         FCB     OP_INV          ; 38
1527 195f 6f                         FCB     OP_RTS          ; 39
1528 1960 01                         FCB     OP_ABX          ; 3A
1529 1961 6e                         FCB     OP_RTI          ; 3B
1530 1962 30                         FCB     OP_CWAI         ; 3C
1531 1963 5c                         FCB     OP_MUL          ; 3D
1532 1964 00                         FCB     OP_INV          ; 3E
1533 1965 7d                         FCB     OP_SWI          ; 3F
1534                         
1535 1966 5e                         FCB     OP_NEGA         ; 40
1536 1967 00                         FCB     OP_INV          ; 41
1537 1968 00                         FCB     OP_INV          ; 42
1538 1969 2d                         FCB     OP_COMA         ; 43
1539 196a 5a                         FCB     OP_LSRA         ; 44
1540 196b 00                         FCB     OP_INV          ; 45
1541 196c 6c                         FCB     OP_RORA         ; 46
1542 196d 0e                         FCB     OP_ASRA         ; 47
1543 196e 0b                         FCB     OP_ASLA         ; 48
1544 196f 69                         FCB     OP_ROLA         ; 49
1545 1970 33                         FCB     OP_DECA         ; 4A
1546 1971 00                         FCB     OP_INV          ; 4B
1547 1972 39                         FCB     OP_INCA         ; 4C
1548 1973 83                         FCB     OP_TSTA         ; 4D
1549 1974 00                         FCB     OP_INV          ; 4E
1550 1975 24                         FCB     OP_CLRA         ; 4F
1551                         
1552 1976 5f                         FCB     OP_NEGB         ; 50
1553 1977 00                         FCB     OP_INV          ; 51
1554 1978 00                         FCB     OP_INV          ; 52
1555 1979 2e                         FCB     OP_COMB         ; 53
1556 197a 5b                         FCB     OP_LSRB         ; 54
1557 197b 00                         FCB     OP_INV          ; 55
1558 197c 6d                         FCB     OP_RORB         ; 56
1559 197d 0f                         FCB     OP_ASRB         ; 57
1560 197e 0c                         FCB     OP_ASLB         ; 58
1561 197f 6a                         FCB     OP_ROLB         ; 59
1562 1980 34                         FCB     OP_DECB         ; 5A
1563 1981 00                         FCB     OP_INV          ; 5B
1564 1982 3a                         FCB     OP_INCB         ; 5C
1565 1983 84                         FCB     OP_TSTB         ; 5D
1566 1984 00                         FCB     OP_INV          ; 5E
1567 1985 25                         FCB     OP_CLRB         ; 5F
1568                         
1569 1986 5d                         FCB     OP_NEG          ; 60
1570 1987 00                         FCB     OP_INV          ; 61
1571 1988 00                         FCB     OP_INV          ; 62
1572 1989 2f                         FCB     OP_COM          ; 63
1573 198a 59                         FCB     OP_LSR          ; 64
1574 198b 00                         FCB     OP_INV          ; 65
1575 198c 6b                         FCB     OP_ROR          ; 66
1576 198d 0d                         FCB     OP_ASR          ; 67
1577 198e 0a                         FCB     OP_ASL          ; 68
1578 198f 68                         FCB     OP_ROL          ; 69
1579 1990 32                         FCB     OP_DEC          ; 6A
1580 1991 00                         FCB     OP_INV          ; 6B
1581 1992 38                         FCB     OP_INC          ; 6C
1582 1993 82                         FCB     OP_TST          ; 6D
1583 1994 3b                         FCB     OP_JMP          ; 6E
1584 1995 23                         FCB     OP_CLR          ; 6F
1585                         
1586 1996 5d                         FCB     OP_NEG          ; 70
1587 1997 00                         FCB     OP_INV          ; 71
1588 1998 00                         FCB     OP_INV          ; 72
1589 1999 2f                         FCB     OP_COM          ; 73
1590 199a 59                         FCB     OP_LSR          ; 74
1591 199b 00                         FCB     OP_INV          ; 75
1592 199c 6b                         FCB     OP_ROR          ; 76
1593 199d 0d                         FCB     OP_ASR          ; 77
1594 199e 0a                         FCB     OP_ASL          ; 78
1595 199f 68                         FCB     OP_ROL          ; 79
1596 19a0 32                         FCB     OP_DEC          ; 7A
1597 19a1 00                         FCB     OP_INV          ; 7B
1598 19a2 38                         FCB     OP_INC          ; 7C
1599 19a3 82                         FCB     OP_TST          ; 7D
1600 19a4 3b                         FCB     OP_JMP          ; 7E
1601 19a5 23                         FCB     OP_CLR          ; 7F
1602                         
1603 19a6 7a                         FCB     OP_SUBA         ; 80
1604 19a7 26                         FCB     OP_CMPA         ; 81
1605 19a8 70                         FCB     OP_SBCA         ; 82
1606 19a9 7c                         FCB     OP_SUBD         ; 83
1607 19aa 07                         FCB     OP_ANDA         ; 84
1608 19ab 16                         FCB     OP_BITA         ; 85
1609 19ac 4e                         FCB     OP_LDA          ; 86
1610 19ad 00                         FCB     OP_INV          ; 87
1611 19ae 35                         FCB     OP_EORA         ; 88
1612 19af 02                         FCB     OP_ADCA         ; 89
1613 19b0 61                         FCB     OP_ORA          ; 8A
1614 19b1 04                         FCB     OP_ADDA         ; 8B
1615 19b2 2b                         FCB     OP_CMPX         ; 8C
1616 19b3 20                         FCB     OP_BSR          ; 8D
1617 19b4 53                         FCB     OP_LDX          ; 8E
1618 19b5 00                         FCB     OP_INV          ; 8F
1619                         
1620 19b6 7a                         FCB     OP_SUBA         ; 90
1621 19b7 26                         FCB     OP_CMPA         ; 91
1622 19b8 70                         FCB     OP_SBCA         ; 92
1623 19b9 7c                         FCB     OP_SUBD         ; 93
1624 19ba 07                         FCB     OP_ANDA         ; 94
1625 19bb 16                         FCB     OP_BITA         ; 95
1626 19bc 4e                         FCB     OP_LDA          ; 96
1627 19bd 73                         FCB     OP_STA          ; 97
1628 19be 35                         FCB     OP_EORA         ; 98
1629 19bf 02                         FCB     OP_ADCA         ; 99
1630 19c0 61                         FCB     OP_ORA          ; 9A
1631 19c1 04                         FCB     OP_ADDA         ; 9B
1632 19c2 2b                         FCB     OP_CMPX         ; 9C
1633 19c3 3c                         FCB     OP_JSR          ; 9D
1634 19c4 53                         FCB     OP_LDX          ; 9E
1635 19c5 78                         FCB     OP_STX          ; 9F
1636                         
1637 19c6 7a                         FCB     OP_SUBA         ; A0
1638 19c7 26                         FCB     OP_CMPA         ; A1
1639 19c8 70                         FCB     OP_SBCA         ; A2
1640 19c9 7c                         FCB     OP_SUBD         ; A3
1641 19ca 07                         FCB     OP_ANDA         ; A4
1642 19cb 16                         FCB     OP_BITA         ; A5
1643 19cc 4e                         FCB     OP_LDA          ; A6
1644 19cd 73                         FCB     OP_STA          ; A7
1645 19ce 35                         FCB     OP_EORA         ; A8
1646 19cf 02                         FCB     OP_ADCA         ; A9
1647 19d0 61                         FCB     OP_ORA          ; AA
1648 19d1 04                         FCB     OP_ADDA         ; AB
1649 19d2 2b                         FCB     OP_CMPX         ; AC
1650 19d3 3c                         FCB     OP_JSR          ; AD
1651 19d4 53                         FCB     OP_LDX          ; AE
1652 19d5 78                         FCB     OP_STX          ; AF
1653                         
1654 19d6 7a                         FCB     OP_SUBA         ; B0
1655 19d7 26                         FCB     OP_CMPA         ; B1
1656 19d8 70                         FCB     OP_SBCA         ; B2
1657 19d9 7c                         FCB     OP_SUBD         ; B3
1658 19da 07                         FCB     OP_ANDA         ; B4
1659 19db 16                         FCB     OP_BITA         ; B5
1660 19dc 4e                         FCB     OP_LDA          ; B6
1661 19dd 73                         FCB     OP_STA          ; B7
1662 19de 35                         FCB     OP_EORA         ; B8
1663 19df 02                         FCB     OP_ADCA         ; B9
1664 19e0 61                         FCB     OP_ORA          ; BA
1665 19e1 04                         FCB     OP_ADDA         ; BB
1666 19e2 2b                         FCB     OP_CMPX         ; BC
1667 19e3 3c                         FCB     OP_JSR          ; BD
1668 19e4 53                         FCB     OP_LDX          ; BE
1669 19e5 78                         FCB     OP_STX          ; BF
1670                         
1671 19e6 7b                         FCB     OP_SUBB         ; C0
1672 19e7 27                         FCB     OP_CMPB         ; C1
1673 19e8 71                         FCB     OP_SBCB         ; C2
1674 19e9 06                         FCB     OP_ADDD         ; C3
1675 19ea 08                         FCB     OP_ANDB         ; C4
1676 19eb 17                         FCB     OP_BITB         ; C5
1677 19ec 4f                         FCB     OP_LDB          ; C6
1678 19ed 00                         FCB     OP_INV          ; C7
1679 19ee 36                         FCB     OP_EORB         ; C8
1680 19ef 03                         FCB     OP_ADCB         ; C9
1681 19f0 62                         FCB     OP_ORB          ; CA
1682 19f1 05                         FCB     OP_ADDB         ; CB
1683 19f2 50                         FCB     OP_LDD          ; CC
1684 19f3 00                         FCB     OP_INV          ; CD
1685 19f4 52                         FCB     OP_LDU          ; CE
1686 19f5 00                         FCB     OP_INV          ; CF
1687                         
1688 19f6 7b                         FCB     OP_SUBB         ; D0
1689 19f7 27                         FCB     OP_CMPB         ; D1
1690 19f8 71                         FCB     OP_SBCB         ; D2
1691 19f9 06                         FCB     OP_ADDD         ; D3
1692 19fa 08                         FCB     OP_ANDB         ; D4
1693 19fb 17                         FCB     OP_BITB         ; D5
1694 19fc 4f                         FCB     OP_LDB          ; D6
1695 19fd 74                         FCB     OP_STB          ; D7
1696 19fe 36                         FCB     OP_EORB         ; D8
1697 19ff 03                         FCB     OP_ADCB         ; D9
1698 1a00 62                         FCB     OP_ORB          ; DA
1699 1a01 05                         FCB     OP_ADDB         ; DB
1700 1a02 50                         FCB     OP_LDD          ; DC
1701 1a03 75                         FCB     OP_STD          ; DD
1702 1a04 52                         FCB     OP_LDU          ; DE
1703 1a05 77                         FCB     OP_STU          ; DF
1704                         
1705 1a06 7b                         FCB     OP_SUBB         ; E0
1706 1a07 27                         FCB     OP_CMPB         ; E1
1707 1a08 71                         FCB     OP_SBCB         ; E2
1708 1a09 06                         FCB     OP_ADDD         ; E3
1709 1a0a 08                         FCB     OP_ANDB         ; E4
1710 1a0b 17                         FCB     OP_BITB         ; E5
1711 1a0c 4f                         FCB     OP_LDB          ; E6
1712 1a0d 74                         FCB     OP_STB          ; E7
1713 1a0e 36                         FCB     OP_EORB         ; E8
1714 1a0f 03                         FCB     OP_ADCB         ; E9
1715 1a10 62                         FCB     OP_ORB          ; EA
1716 1a11 05                         FCB     OP_ADDB         ; EB
1717 1a12 50                         FCB     OP_LDD          ; EC
1718 1a13 75                         FCB     OP_STD          ; ED
1719 1a14 52                         FCB     OP_LDU          ; EE
1720 1a15 77                         FCB     OP_STU          ; EF
1721                         
1722 1a16 7b                         FCB     OP_SUBB         ; F0
1723 1a17 27                         FCB     OP_CMPB         ; F1
1724 1a18 71                         FCB     OP_SBCB         ; F2
1725 1a19 06                         FCB     OP_ADDD         ; F3
1726 1a1a 08                         FCB     OP_ANDB         ; F4
1727 1a1b 17                         FCB     OP_BITB         ; F5
1728 1a1c 4f                         FCB     OP_LDB          ; F6
1729 1a1d 74                         FCB     OP_STB          ; F7
1730 1a1e 36                         FCB     OP_EORB         ; F8
1731 1a1f 03                         FCB     OP_ADCB         ; F9
1732 1a20 62                         FCB     OP_ORB          ; FA
1733 1a21 05                         FCB     OP_ADDB         ; FB
1734 1a22 50                         FCB     OP_LDD          ; FC
1735 1a23 75                         FCB     OP_STD          ; FD
1736 1a24 52                         FCB     OP_LDU          ; FE
1737 1a25 77                         FCB     OP_STU          ; FF
1738                         
1739                         ; Table of addressing modes. Listed in order,indexed by op code.
1740                         MODES:
1741 1a26 04                         FCB     AM_DIRECT       ; 00
1742 1a27 00                         FCB     AM_INVALID      ; 01
1743 1a28 00                         FCB     AM_INVALID      ; 02
1744 1a29 04                         FCB     AM_DIRECT       ; 03
1745 1a2a 04                         FCB     AM_DIRECT       ; 04
1746 1a2b 00                         FCB     AM_INVALID      ; 05
1747 1a2c 04                         FCB     AM_DIRECT       ; 06
1748 1a2d 04                         FCB     AM_DIRECT       ; 07
1749 1a2e 04                         FCB     AM_DIRECT       ; 08
1750 1a2f 04                         FCB     AM_DIRECT       ; 09
1751 1a30 04                         FCB     AM_DIRECT       ; 0A
1752 1a31 00                         FCB     AM_INVALID      ; 0B
1753 1a32 04                         FCB     AM_DIRECT       ; 0C
1754 1a33 04                         FCB     AM_DIRECT       ; 0D
1755 1a34 04                         FCB     AM_DIRECT       ; 0E
1756 1a35 04                         FCB     AM_DIRECT       ; 0F
1757                         
1758 1a36 00                         FCB     AM_INVALID      ; 10 Page 2 extended opcodes (see other table)
1759 1a37 00                         FCB     AM_INVALID      ; 11 Page 3 extended opcodes (see other table)
1760 1a38 01                         FCB     AM_INHERENT     ; 12
1761 1a39 01                         FCB     AM_INHERENT     ; 13
1762 1a3a 00                         FCB     AM_INVALID      ; 14
1763 1a3b 00                         FCB     AM_INVALID      ; 15
1764 1a3c 07                         FCB     AM_RELATIVE16   ; 16
1765 1a3d 07                         FCB     AM_RELATIVE16   ; 17
1766 1a3e 00                         FCB     AM_INVALID      ; 18
1767 1a3f 01                         FCB     AM_INHERENT     ; 19
1768 1a40 02                         FCB     AM_IMMEDIATE8   ; 1A
1769 1a41 00                         FCB     AM_INVALID      ; 1B
1770 1a42 02                         FCB     AM_IMMEDIATE8   ; 1C
1771 1a43 01                         FCB     AM_INHERENT     ; 1D
1772 1a44 02                         FCB     AM_IMMEDIATE8   ; 1E
1773 1a45 02                         FCB     AM_IMMEDIATE8   ; 1F
1774                         
1775 1a46 06                         FCB     AM_RELATIVE8    ; 20
1776 1a47 06                         FCB     AM_RELATIVE8    ; 21
1777 1a48 06                         FCB     AM_RELATIVE8    ; 22
1778 1a49 06                         FCB     AM_RELATIVE8    ; 23
1779 1a4a 06                         FCB     AM_RELATIVE8    ; 24
1780 1a4b 06                         FCB     AM_RELATIVE8    ; 25
1781 1a4c 06                         FCB     AM_RELATIVE8    ; 26
1782 1a4d 06                         FCB     AM_RELATIVE8    ; 27
1783 1a4e 06                         FCB     AM_RELATIVE8    ; 28
1784 1a4f 06                         FCB     AM_RELATIVE8    ; 29
1785 1a50 06                         FCB     AM_RELATIVE8    ; 2A
1786 1a51 06                         FCB     AM_RELATIVE8    ; 2B
1787 1a52 06                         FCB     AM_RELATIVE8    ; 2C
1788 1a53 06                         FCB     AM_RELATIVE8    ; 2D
1789 1a54 06                         FCB     AM_RELATIVE8    ; 2E
1790 1a55 06                         FCB     AM_RELATIVE8    ; 2F
1791                         
1792 1a56 08                         FCB     AM_INDEXED      ; 30
1793 1a57 08                         FCB     AM_INDEXED      ; 31
1794 1a58 08                         FCB     AM_INDEXED      ; 32
1795 1a59 08                         FCB     AM_INDEXED      ; 33
1796 1a5a 02                         FCB     AM_IMMEDIATE8   ; 34
1797 1a5b 02                         FCB     AM_IMMEDIATE8   ; 35
1798 1a5c 02                         FCB     AM_IMMEDIATE8   ; 36
1799 1a5d 02                         FCB     AM_IMMEDIATE8   ; 37
1800 1a5e 00                         FCB     AM_INVALID      ; 38
1801 1a5f 01                         FCB     AM_INHERENT     ; 39
1802 1a60 01                         FCB     AM_INHERENT     ; 3A
1803 1a61 01                         FCB     AM_INHERENT     ; 3B
1804 1a62 02                         FCB     AM_IMMEDIATE8   ; 3C
1805 1a63 01                         FCB     AM_INHERENT     ; 3D
1806 1a64 00                         FCB     AM_INVALID      ; 3E
1807 1a65 01                         FCB     AM_INHERENT     ; 3F
1808                         
1809 1a66 01                         FCB     AM_INHERENT     ; 40
1810 1a67 00                         FCB     AM_INVALID      ; 41
1811 1a68 00                         FCB     AM_INVALID      ; 42
1812 1a69 01                         FCB     AM_INHERENT     ; 43
1813 1a6a 01                         FCB     AM_INHERENT     ; 44
1814 1a6b 00                         FCB     AM_INVALID      ; 45
1815 1a6c 01                         FCB     AM_INHERENT     ; 46
1816 1a6d 01                         FCB     AM_INHERENT     ; 47
1817 1a6e 01                         FCB     AM_INHERENT     ; 48
1818 1a6f 01                         FCB     AM_INHERENT     ; 49
1819 1a70 01                         FCB     AM_INHERENT     ; 4A
1820 1a71 00                         FCB     AM_INVALID      ; 4B
1821 1a72 01                         FCB     AM_INHERENT     ; 4C
1822 1a73 01                         FCB     AM_INHERENT     ; 4D
1823 1a74 00                         FCB     AM_INVALID      ; 4E
1824 1a75 01                         FCB     AM_INHERENT     ; 4F
1825                         
1826 1a76 01                         FCB     AM_INHERENT     ; 50
1827 1a77 00                         FCB     AM_INVALID      ; 51
1828 1a78 00                         FCB     AM_INVALID      ; 52
1829 1a79 01                         FCB     AM_INHERENT     ; 53
1830 1a7a 01                         FCB     AM_INHERENT     ; 54
1831 1a7b 00                         FCB     AM_INVALID      ; 55
1832 1a7c 01                         FCB     AM_INHERENT     ; 56
1833 1a7d 01                         FCB     AM_INHERENT     ; 57
1834 1a7e 01                         FCB     AM_INHERENT     ; 58
1835 1a7f 01                         FCB     AM_INHERENT     ; 59
1836 1a80 01                         FCB     AM_INHERENT     ; 5A
1837 1a81 00                         FCB     AM_INVALID      ; 5B
1838 1a82 01                         FCB     AM_INHERENT     ; 5C
1839 1a83 01                         FCB     AM_INHERENT     ; 5D
1840 1a84 00                         FCB     AM_INVALID      ; 5E
1841 1a85 01                         FCB     AM_INHERENT     ; 5F
1842                         
1843 1a86 08                         FCB     AM_INDEXED      ; 60
1844 1a87 00                         FCB     AM_INVALID      ; 61
1845 1a88 00                         FCB     AM_INVALID      ; 62
1846 1a89 08                         FCB     AM_INDEXED      ; 63
1847 1a8a 08                         FCB     AM_INDEXED      ; 64
1848 1a8b 00                         FCB     AM_INVALID      ; 65
1849 1a8c 08                         FCB     AM_INDEXED      ; 66
1850 1a8d 08                         FCB     AM_INDEXED      ; 67
1851 1a8e 08                         FCB     AM_INDEXED      ; 68
1852 1a8f 08                         FCB     AM_INDEXED      ; 69
1853 1a90 08                         FCB     AM_INDEXED      ; 6A
1854 1a91 00                         FCB     AM_INVALID      ; 6B
1855 1a92 08                         FCB     AM_INDEXED      ; 6C
1856 1a93 08                         FCB     AM_INDEXED      ; 6D
1857 1a94 08                         FCB     AM_INDEXED      ; 6E
1858 1a95 08                         FCB     AM_INDEXED      ; 6F
1859                         
1860 1a96 05                         FCB     AM_EXTENDED     ; 70
1861 1a97 00                         FCB     AM_INVALID      ; 71
1862 1a98 00                         FCB     AM_INVALID      ; 72
1863 1a99 05                         FCB     AM_EXTENDED     ; 73
1864 1a9a 05                         FCB     AM_EXTENDED     ; 74
1865 1a9b 00                         FCB     AM_INVALID      ; 75
1866 1a9c 05                         FCB     AM_EXTENDED     ; 76
1867 1a9d 05                         FCB     AM_EXTENDED     ; 77
1868 1a9e 05                         FCB     AM_EXTENDED     ; 78
1869 1a9f 05                         FCB     AM_EXTENDED     ; 79
1870 1aa0 05                         FCB     AM_EXTENDED     ; 7A
1871 1aa1 00                         FCB     AM_INVALID      ; 7B
1872 1aa2 05                         FCB     AM_EXTENDED     ; 7C
1873 1aa3 05                         FCB     AM_EXTENDED     ; 7D
1874 1aa4 05                         FCB     AM_EXTENDED     ; 7E
1875 1aa5 05                         FCB     AM_EXTENDED     ; 7F
1876                         
1877 1aa6 02                         FCB     AM_IMMEDIATE8   ; 80
1878 1aa7 02                         FCB     AM_IMMEDIATE8   ; 81
1879 1aa8 02                         FCB     AM_IMMEDIATE8   ; 82
1880 1aa9 03                         FCB     AM_IMMEDIATE16  ; 83
1881 1aaa 02                         FCB     AM_IMMEDIATE8   ; 84
1882 1aab 02                         FCB     AM_IMMEDIATE8   ; 85
1883 1aac 02                         FCB     AM_IMMEDIATE8   ; 86
1884 1aad 00                         FCB     AM_INVALID      ; 87
1885 1aae 02                         FCB     AM_IMMEDIATE8   ; 88
1886 1aaf 02                         FCB     AM_IMMEDIATE8   ; 89
1887 1ab0 02                         FCB     AM_IMMEDIATE8   ; 8A
1888 1ab1 02                         FCB     AM_IMMEDIATE8   ; 8B
1889 1ab2 03                         FCB     AM_IMMEDIATE16  ; 8C
1890 1ab3 06                         FCB     AM_RELATIVE8    ; 8D
1891 1ab4 03                         FCB     AM_IMMEDIATE16  ; 8E
1892 1ab5 00                         FCB     AM_INVALID      ; 8F
1893                         
1894 1ab6 04                         FCB     AM_DIRECT       ; 90
1895 1ab7 04                         FCB     AM_DIRECT       ; 91
1896 1ab8 04                         FCB     AM_DIRECT       ; 92
1897 1ab9 04                         FCB     AM_DIRECT       ; 93
1898 1aba 04                         FCB     AM_DIRECT       ; 94
1899 1abb 04                         FCB     AM_DIRECT       ; 95
1900 1abc 04                         FCB     AM_DIRECT       ; 96
1901 1abd 04                         FCB     AM_DIRECT       ; 97
1902 1abe 04                         FCB     AM_DIRECT       ; 98
1903 1abf 04                         FCB     AM_DIRECT       ; 99
1904 1ac0 04                         FCB     AM_DIRECT       ; 9A
1905 1ac1 04                         FCB     AM_DIRECT       ; 9B
1906 1ac2 04                         FCB     AM_DIRECT       ; 9C
1907 1ac3 04                         FCB     AM_DIRECT       ; 9D
1908 1ac4 04                         FCB     AM_DIRECT       ; 9E
1909 1ac5 04                         FCB     AM_DIRECT       ; 9F
1910                         
1911 1ac6 08                         FCB     AM_INDEXED      ; A0
1912 1ac7 08                         FCB     AM_INDEXED      ; A1
1913 1ac8 08                         FCB     AM_INDEXED      ; A2
1914 1ac9 08                         FCB     AM_INDEXED      ; A3
1915 1aca 08                         FCB     AM_INDEXED      ; A4
1916 1acb 08                         FCB     AM_INDEXED      ; A5
1917 1acc 08                         FCB     AM_INDEXED      ; A6
1918 1acd 08                         FCB     AM_INDEXED      ; A7
1919 1ace 08                         FCB     AM_INDEXED      ; A8
1920 1acf 08                         FCB     AM_INDEXED      ; A9
1921 1ad0 08                         FCB     AM_INDEXED      ; AA
1922 1ad1 08                         FCB     AM_INDEXED      ; AB
1923 1ad2 08                         FCB     AM_INDEXED      ; AC
1924 1ad3 08                         FCB     AM_INDEXED      ; AD
1925 1ad4 08                         FCB     AM_INDEXED      ; AE
1926 1ad5 08                         FCB     AM_INDEXED      ; AF
1927                         
1928 1ad6 05                         FCB     AM_EXTENDED     ; B0
1929 1ad7 05                         FCB     AM_EXTENDED     ; B1
1930 1ad8 05                         FCB     AM_EXTENDED     ; B2
1931 1ad9 05                         FCB     AM_EXTENDED     ; B3
1932 1ada 05                         FCB     AM_EXTENDED     ; B4
1933 1adb 05                         FCB     AM_EXTENDED     ; B5
1934 1adc 05                         FCB     AM_EXTENDED     ; B6
1935 1add 05                         FCB     AM_EXTENDED     ; B7
1936 1ade 05                         FCB     AM_EXTENDED     ; B8
1937 1adf 05                         FCB     AM_EXTENDED     ; B9
1938 1ae0 05                         FCB     AM_EXTENDED     ; BA
1939 1ae1 05                         FCB     AM_EXTENDED     ; BB
1940 1ae2 05                         FCB     AM_EXTENDED     ; BC
1941 1ae3 05                         FCB     AM_EXTENDED     ; BD
1942 1ae4 05                         FCB     AM_EXTENDED     ; BE
1943 1ae5 05                         FCB     AM_EXTENDED     ; BF
1944                         
1945 1ae6 02                         FCB     AM_IMMEDIATE8   ; C0
1946 1ae7 02                         FCB     AM_IMMEDIATE8   ; C1
1947 1ae8 02                         FCB     AM_IMMEDIATE8   ; C2
1948 1ae9 03                         FCB     AM_IMMEDIATE16  ; C3
1949 1aea 02                         FCB     AM_IMMEDIATE8   ; C4
1950 1aeb 02                         FCB     AM_IMMEDIATE8   ; C5
1951 1aec 02                         FCB     AM_IMMEDIATE8   ; C6
1952 1aed 00                         FCB     AM_INVALID      ; C7
1953 1aee 02                         FCB     AM_IMMEDIATE8   ; C8
1954 1aef 02                         FCB     AM_IMMEDIATE8   ; C9
1955 1af0 02                         FCB     AM_IMMEDIATE8   ; CA
1956 1af1 02                         FCB     AM_IMMEDIATE8   ; CB
1957 1af2 02                         FCB     AM_IMMEDIATE8   ; CC
1958 1af3 01                         FCB     AM_INHERENT     ; CD
1959 1af4 02                         FCB     AM_IMMEDIATE8   ; CE
1960 1af5 00                         FCB     AM_INVALID      ; CF
1961                         
1962 1af6 04                         FCB     AM_DIRECT       ; D0
1963 1af7 04                         FCB     AM_DIRECT       ; D1
1964 1af8 04                         FCB     AM_DIRECT       ; D2
1965 1af9 04                         FCB     AM_DIRECT       ; D3
1966 1afa 04                         FCB     AM_DIRECT       ; D4
1967 1afb 04                         FCB     AM_DIRECT       ; D5
1968 1afc 04                         FCB     AM_DIRECT       ; D6
1969 1afd 04                         FCB     AM_DIRECT       ; D7
1970 1afe 04                         FCB     AM_DIRECT       ; D8
1971 1aff 04                         FCB     AM_DIRECT       ; D9
1972 1b00 04                         FCB     AM_DIRECT       ; DA
1973 1b01 04                         FCB     AM_DIRECT       ; DB
1974 1b02 04                         FCB     AM_DIRECT       ; DC
1975 1b03 04                         FCB     AM_DIRECT       ; DD
1976 1b04 04                         FCB     AM_DIRECT       ; DE
1977 1b05 04                         FCB     AM_DIRECT       ; DF
1978                         
1979 1b06 08                         FCB     AM_INDEXED      ; E0
1980 1b07 08                         FCB     AM_INDEXED      ; E1
1981 1b08 08                         FCB     AM_INDEXED      ; E2
1982 1b09 08                         FCB     AM_INDEXED      ; E3
1983 1b0a 08                         FCB     AM_INDEXED      ; E4
1984 1b0b 08                         FCB     AM_INDEXED      ; E5
1985 1b0c 08                         FCB     AM_INDEXED      ; E6
1986 1b0d 08                         FCB     AM_INDEXED      ; E7
1987 1b0e 08                         FCB     AM_INDEXED      ; E8
1988 1b0f 08                         FCB     AM_INDEXED      ; E9
1989 1b10 08                         FCB     AM_INDEXED      ; EA
1990 1b11 08                         FCB     AM_INDEXED      ; EB
1991 1b12 08                         FCB     AM_INDEXED      ; EC
1992 1b13 08                         FCB     AM_INDEXED      ; ED
1993 1b14 08                         FCB     AM_INDEXED      ; EE
1994 1b15 08                         FCB     AM_INDEXED      ; EF
1995                         
1996 1b16 05                         FCB     AM_EXTENDED     ; F0
1997 1b17 05                         FCB     AM_EXTENDED     ; F1
1998 1b18 05                         FCB     AM_EXTENDED     ; F2
1999 1b19 05                         FCB     AM_EXTENDED     ; F3
2000 1b1a 05                         FCB     AM_EXTENDED     ; F4
2001 1b1b 05                         FCB     AM_EXTENDED     ; F5
2002 1b1c 05                         FCB     AM_EXTENDED     ; F6
2003 1b1d 05                         FCB     AM_EXTENDED     ; F7
2004 1b1e 05                         FCB     AM_EXTENDED     ; F8
2005 1b1f 05                         FCB     AM_EXTENDED     ; F9
2006 1b20 05                         FCB     AM_EXTENDED     ; FA
2007 1b21 05                         FCB     AM_EXTENDED     ; FB
2008 1b22 05                         FCB     AM_EXTENDED     ; FC
2009 1b23 05                         FCB     AM_EXTENDED     ; FD
2010 1b24 05                         FCB     AM_EXTENDED     ; FE
2011 1b25 05                         FCB     AM_EXTENDED     ; FF
2012                         
2013                         ; Special table for page 2 instructions prefixed by $10.
2014                         ; Format: opcode (less 10), instruction, addressing mode
2015                         
2016                         PAGE2:
2017 1b26 21 4a 07                   FCB     $21, OP_LBRN,  AM_RELATIVE16
2018 1b29 22 42 07                   FCB     $22, OP_LBHI,  AM_RELATIVE16
2019 1b2c 23 44 07                   FCB     $23, OP_LBLS,  AM_RELATIVE16
2020 1b2f 24 3d 07                   FCB     $24, OP_LBCC,  AM_RELATIVE16
2021 1b32 25 3e 07                   FCB     $25, OP_LBCS,  AM_RELATIVE16
2022 1b35 26 47 07                   FCB     $26, OP_LBNE,  AM_RELATIVE16
2023 1b38 27 3f 07                   FCB     $27, OP_LBEQ,  AM_RELATIVE16
2024 1b3b 28 4c 07                   FCB     $28, OP_LBVC,  AM_RELATIVE16
2025 1b3e 29 4d 07                   FCB     $29, OP_LBVS,  AM_RELATIVE16
2026 1b41 2a 48 07                   FCB     $2A, OP_LBPL,  AM_RELATIVE16
2027 1b44 2b 46 07                   FCB     $2B, OP_LBMI,  AM_RELATIVE16
2028 1b47 2c 40 07                   FCB     $2C, OP_LBGE,  AM_RELATIVE16
2029 1b4a 2d 45 07                   FCB     $2D, OP_LBLT,  AM_RELATIVE16
2030 1b4d 2e 41 07                   FCB     $2E, OP_LBGT,  AM_RELATIVE16
2031 1b50 2f 43 07                   FCB     $2F, OP_LBLE,  AM_RELATIVE16
2032 1b53 3f 7e 01                   FCB     $3F, OP_SWI2,  AM_INHERENT
2033 1b56 83 28 03                   FCB     $83, OP_CMPD,  AM_IMMEDIATE16
2034 1b59 8c 2c 03                   FCB     $8C, OP_CMPY,  AM_IMMEDIATE16
2035 1b5c 8e 54 03                   FCB     $8E, OP_LDY,   AM_IMMEDIATE16
2036 1b5f 93 28 04                   FCB     $93, OP_CMPD,  AM_DIRECT
2037 1b62 9c 2c 04                   FCB     $9C, OP_CMPY,  AM_DIRECT
2038 1b65 9e 54 04                   FCB     $9E, OP_LDY,   AM_DIRECT
2039 1b68 9d 79 04                   FCB     $9D, OP_STY,   AM_DIRECT
2040 1b6b a3 28 08                   FCB     $A3, OP_CMPD,  AM_INDEXED
2041 1b6e ac 2c 08                   FCB     $AC, OP_CMPY,  AM_INDEXED
2042 1b71 ae 54 08                   FCB     $AE, OP_LDY,   AM_INDEXED
2043 1b74 af 79 08                   FCB     $AF, OP_STY,   AM_INDEXED
2044 1b77 b3 28 05                   FCB     $B3, OP_CMPD,  AM_EXTENDED
2045 1b7a bc 2c 05                   FCB     $BC, OP_CMPY,  AM_EXTENDED
2046 1b7d be 54 05                   FCB     $BE, OP_LDY,   AM_EXTENDED
2047 1b80 bf 79 05                   FCB     $BF, OP_STY,   AM_EXTENDED
2048 1b83 ce 51 03                   FCB     $CE, OP_LDS,   AM_IMMEDIATE16
2049 1b86 de 51 04                   FCB     $DE, OP_LDS,   AM_DIRECT
2050 1b89 dd 76 04                   FCB     $DD, OP_STS,   AM_DIRECT
2051 1b8c ee 51 08                   FCB     $EE, OP_LDS,   AM_INDEXED
2052 1b8f ef 76 08                   FCB     $EF, OP_STS,   AM_INDEXED
2053 1b92 fe 51 05                   FCB     $FE, OP_LDS,   AM_EXTENDED
2054 1b95 ff 76 05                   FCB     $FF, OP_STS,   AM_EXTENDED
2055 1b98 00                         FCB     0                             ; indicates end of table
2056                         
2057                         ; Special table for page 3 instructions prefixed by $11.
2058                         ; Same format as table above.
2059                         
2060                         PAGE3:
2061 1b99 3f 7f 01                   FCB     $3F, OP_SWI3,  AM_INHERENT
2062 1b9c 83 2a 03                   FCB     $83, OP_CMPU,  AM_IMMEDIATE16
2063 1b9f 8c 29 03                   FCB     $8C, OP_CMPS,  AM_IMMEDIATE16
2064 1ba2 93 2a 04                   FCB     $93, OP_CMPU,  AM_DIRECT
2065 1ba5 9c 29 04                   FCB     $9C, OP_CMPS,  AM_DIRECT
2066 1ba8 a3 2a 08                   FCB     $A3, OP_CMPU,  AM_INDEXED
2067 1bab ac 29 08                   FCB     $AC, OP_CMPS,  AM_INDEXED
2068 1bae b3 2a 05                   FCB     $B3, OP_CMPU,  AM_EXTENDED
2069 1bb1 bc 29 05                   FCB     $BC, OP_CMPS,  AM_EXTENDED
2070 1bb4 00                         FCB     0                             ; indicates end of table
2071                         
2072                         ; Display strings. Should be terminated in EOT character.
2073                         
2074 1bb5 3b 20 49 4e 56 41  MSG1:   FCC     "; INVALID"
     4c 49 44
2075 1bbe 04                         FCB     EOT
2076                         
2077 1bbf 50 52 45 53 53 20  MSG2:   FCC     "PRESS <SPACE> TO CONTINUE, <Q> TO QUIT "
     3c 53 50 41 43 45
     3e 20 54 4f 20 43
     4f 4e 54 49 4e 55
     45 2c 20 3c 51 3e
     20 54 4f 20 51 55
     49 54 20
2078 1be6 04                         FCB     EOT
2079                         
2080 1be7 50 43 52           MSG3:   FCC     "PCR"
2081 1bea 04                         FCB     EOT
