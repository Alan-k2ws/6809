0001                         ; This is a port of the MONDEB monitor/debugger to the 6809,
0002                         ; specifically my 6809-based Single Board Computer.
0003                         ;
0004                         ; It is a port of the original 6800 version by Don PEters, with some
0005                         ; additional changes taken from a 6809 version written by Alan R.
0006                         ; Baldwin.
0007                         ;
0008                         ; Jeff Tranter <tranter@pobox.com>
0009                         
0010                                 NAM   MONDEB
0011                         
0012                         ;THIS SOURCE CODE WAS SENT TO WALTER BANKS AT
0013                         ;THE UNIVERSITY OF WATERLOO BY DON PETERS ON PAPER TAPE
0014                         ;CROSS ASSEMBLY WAS DONE ON THE U OF W HONEYWELL 66/60
0015                         ;THE BARCODE AND LISTING WERE SET ON A PHOTON PHOTO-
0016                         ;TYPESETTER DRIVEN BY THE HONEYWELL.
0017                         ;
0018                         ;       M O N D E B  - A MONITOR/DEBUGGER FOR THE M6800 MICROPROCESSOR
0019                         
0020                         ; AUTHOR: DON PETERS
0021                         ; DATE: APRIL 1977
0022                         ; MEMORY REQ'D: 3K BYTES AT HIGH END OF ADDRESS SPACE
0023                         
0024                         ; SEE USER MANUAL FOR CAPABILITIES & INSTRUCTIONS ON USE
0025                         
0026                         ;      ORG     $400    ;DEBUG ORG AT 1K
0027 f000                           ORG    $F000    ;NORMAL ORIGIN AT 60K
0028                         
0029                         
0030                         ;I/O DEVICE ADDRESSES
0031 a001                    ACIA1  EQU    $A001    ;ACIA #1 - MAIN TERMINAL ACIA
0032 a001                    ACIA2  EQU    $A001    ;ACIA #2 - AUXILIARY TERMINAL ACIA
0033                         
0034                         ;OTHER CONSTANTS
0035 000d                    CR     EQU    13       ;CARRIAGE RETURN
0036 000a                    LF     EQU    10       ;LINE FEED
0037                         
0038                         
0039 f000                    START  EQU    *        ;PROGRAM ENTRY POINT
0040 f000 10 ce 7f b9               LDS    #STACK   ;INITIALIZE THE STACK POINTER
0041 f004 10 ff 7f 0e               STS    SP       ;SAVE THE POINTER
0042 f008 bd fb 14                  JSR    INITAL   ;INITIALIZE VARIABLES
0043                         
0044                         
0045                         ;TYPE OUT MONITOR NAME & VERSION
0046 f00b bd fb d8                  JSR    DOCRLF   ;ADVANCE TO A CLEAN LINE
0047 f00e 8e fb fb                  LDX    #MSGHED  ;GET ADDRESS OF HEADER
0048 f011 bd fb 51                  JSR    OUTSTR   ;TYPE IT
0049                         
0050                         ;SET UP DESTINATION OF INPUT LINE
0051                         ;DEFINE BEGINNING OF INPUT BUFFER
0052 f014 8e 7f 37                  LDX    #TTYBUF-1   ;GET ADDRESS OF TERMINAL INPUT BUFFER
0053 f017 bf 7f 34                  STX    BUFBEG   ;SAVE IT
0054                         
0055                         ;DEFINE END OF INPUT BUFFER - 72 CHAR CAPACITY, INCL CR
0056 f01a 8e 7f 80                  LDX    #TTYEND
0057 f01d bf 7f 36                  STX    BUFEND
0058                         
0059                         ;DELIMITER CLASS DEFINITION - SPACE OR COMMA (CODE 3)
0060 f020 86 03                     LDA    #3
0061 f022 b7 7f 17                  STA    DELIM
0062 f025 20 0f                     BRA    PROMP1
0063                         
0064                         ;PREPARE TO GET A NEW COMMAND
0065 f027 bd fb d8           PROMPT JSR    DOCRLF   ;TYPE CR-LF
0066 f02a 7c 7f 16                  INC    BOLFLG   ;SET "BEGINNING OF LINE" FLAG
0067 f02d be 7f 12                  LDX    SYNPTR   ;POINT TO CURRENT CHARACTER
0068 f030 a6 84                     LDA    ,X       ;GET IT
0069 f032 81 3b                     CMPA   #';'     ;SEMICOLON?
0070 f034 27 1a                     BEQ    GETCMD   ;CONTINUE SCAN IF IT IS, SKIPPING THE PROMPT
0071                         
0072                         ;TYPE PROMPT
0073 f036 8e fc 19           PROMP1 LDX    #MSGPRM
0074 f039 bd fb 51                  JSR    OUTSTR
0075 f03c bd fa 8f                  JSR    GETLIN  ;GET LINE OF INPUT
0076                         
0077                         ;ABORT LINE ON A CONTROL-C
0078 f03f c1 03                     CMPB   #3
0079 f041 27 e4                     BEQ    PROMPT
0080                         
0081                         ;SET SYNTAX SCANNING POINTER TO BEGINNING OF BUFFER/LINE
0082 f043 be 7f 34                  LDX    BUFBEG
0083 f046 bf 7f 12                  STX    SYNPTR
0084                         
0085                         ;REPROMPT ON AN EMPTY LINE (FIRST CHAR = CR, LF, OR ;)
0086 f049 a6 01                     LDA    1,X      ;GET FIRST CHAR
0087 f04b bd f7 55                  JSR    TSTEOL   ;TEST IT
0088 f04e 27 d7                     BEQ    PROMPT   ;IF IT IS, PROMPT AGAIN
0089                         
0090                         ;USE LIST 1 WHEN MATCHING
0091 f050 86 01              GETCMD LDA    #1
0092                         
0093                         ;NOW GO FOR A MATCH
0094 f052 bd f6 8a                  JSR    COMAND
0095                         
0096                         ;-AND TEST THE RESULT OF THE SCAN
0097 f055 27 d0                     BEQ    PROMPT   ;REPROMPT IF JUST A CR WAS TYPED
0098 f057 2e 20                     BGT    JMPCMD   ;GOOD COMMAND IF POSITIVE
0099                         
0100                         ;*****
0101                         ;UNRECOGNIZABLE SYNTAX - POINT TO ERROR
0102 f059 be 7f 34           BADSYN LDX    BUFBEG   ;GET START OF LINE
0103                         ;SPACE OVER TO ERROR IN SYNTAX
0104 f05c bc 7f 14           BADS1  CPX    LINPTR   ;AT ERROR?
0105 f05f 27 07                     BEQ    BADS2
0106 f061 bd f8 c0                  JSR    OUTSP    ;OUTPUT A SPACE
0107 f064 30 01                     LEAX   1,X      ;NO, MOVE ON
0108 f066 20 f4                     BRA    BADS1
0109                         
0110                         ;THE "EXTRA" CHAR "1" IS COMPENSATED FOR BY THE PROMPT CHAR ON THE PRECEDING LINE
0111 f068 86 5e              BADS2  LDA    #'^'     ;AT ERROR - GET AN UP-ARROW
0112 f06a bd fb 80                  JSR    OUTCHR   ;PRINT IT
0113 f06d bd fb d8                  JSR    DOCRLF
0114 f070 20 c4                     BRA    PROMP1   ;IGNORE ANY SUCCEEDING PACKED COMMANDS
0115                         
0116                         ;*****
0117                         ;THERE SHOULD BE NO MORE CHARACTERS ON THE INPUT LINE
0118                         ;                       (EXCEPT DELIMITERS)
0119 f072 bd f7 33           NOMORE JSR    SKPDLM
0120 f075 25 b0                     BCS    PROMPT   ;IF CARRY BIT SET, END OF LINE (NORMAL)
0121                         ;THERE IS SOMETHING THERE BUT SHOULDN'T BE
0122 f077 20 e0                     BRA    BADSYN
0123                         
0124                         ;*****
0125                         ;EXECUTE A COMPUTED "GOTO" TO THE PROPER COMMAND
0126 f079 1f 89              JMPCMD TFR    A,B      ;SAVE COMMAND # IN ACCB
0127 f07b 48                        ASLA            ;MULTIPLY COMMAND BY 2
0128 f07c 34 04                     PSHS   B        ;ABA
0129 f07e ab e0                     ADDA  ,S+       ;ACCA NOW HOLDS COMMAND # MULTIPLIED BY 3
0130                         ;ADD IT TO BASE OF JUMP TABLE
0131 f080 c6 f0                     LDB    #JMPHI   ;GET HI BYTE OF START OF JUMP TABLE IN ACCB
0132 f082 8b 91                     ADDA   #JMPLO   ;ADD LO BYTE OF START OF JUMP TABLE TO ACCA
0133 f084 c9 00                     ADCB   #0       ;ADD CARRY IF THERE WAS ONE
0134                         ;MOVE ACCA & ACCB TO IX (CODE IS WEIRD, BUT BRIEF)
0135 f086 34 02                     PSHS   A
0136 f088 34 04                     PSHS   B
0137 f08a 1f 41                     TFR    S,X      ;PUT ADDRESS OF "GOTO" INTO X
0138 f08c ae 84                     LDX    ,X       ;GET THE ADDRESS ITSELF
0139 f08e 35 04                     PULS   B        ;RESTORE THE STACK
0140 f090 35 02                     PULS   A
0141 f092 6e 84                     JMP    ,X       ;JUMP TO RIGHT COMMAND
0142                         
0143 f091                    JMPTBL EQU    *-3
0144                         
0145 00f0                    JMPHI  EQU    JMPTBL/256
0146 f000                    JMP256 EQU    JMPHI*256
0147 0091                    JMPLO  EQU    JMPTBL-JMP256
0148                         
0149 f094 7e f0 e8                  JMP    REG
0150 f097 7e f1 3b                  JMP    GOTO
0151 f09a 7e f1 4d                  JMP    LSEI
0152 f09d 7e f1 55                  JMP    LCLI
0153 f0a0 7e f1 5d                  JMP    COPY
0154 f0a3 7e f1 8b                  JMP    BREAK
0155 f0a6 7e f1 eb                  JMP    IBASE
0156 f0a9 7e f2 02                  JMP    DBASE
0157 f0ac 7e f2 3b                  JMP    CONTIN
0158 f0af 7e f2 40                  JMP    DISPLA
0159 f0b2 7e f2 ac                  JMP    SET
0160 f0b5 7e f3 76                  JMP    VERIFY
0161 f0b8 7e f3 be                  JMP    SEARCH
0162 f0bb 7e f4 4f                  JMP    TEST
0163 f0be 7e f4 a9                  JMP    INT
0164 f0c1 7e f4 b1                  JMP    NMI
0165 f0c4 7e f4 b9                  JMP    LSWI
0166 f0c7 7e f4 e1                  JMP    COMPAR
0167 f0ca 7e f5 0a                  JMP    DUMP
0168 f0cd 7e f5 a7                  JMP    LOAD
0169 f0d0 7e f6 3e                  JMP    DELAY
0170 f0d3 7e f6 51                  JMP    HELP
0171 f0d6 7e f1 59                  JMP    LCLF
0172 f0d9 7e f1 51                  JMP    LSEF
0173 f0dc 7e f4 d1                  JMP    FIRQ
0174 f0df 7e f4 d9                  JMP    RSRVD
0175 f0e2 7e f4 c1                  JMP    LSWI2
0176 f0e5 7e f4 c9                  JMP    LSWI3
0177                         
0178                         ;*****
0179                         ;REG - DISPLAY REGISTERS
0180 f0e8                    REG    EQU    *
0181                         ;PRINT STACK STORED SWI DATA
0182 f0e8 be 7f 0e           DISREG LDX    SP       ;GET SAVED STACK POINTER
0183                         
0184                         ;REGISTER NAME TYPEOUT INITIALIZATION
0185 f0eb 7f 7f e3                  CLR    COMNUM   ;START AT BEGINNING OF THE REGISTER NAME LIST
0186                         
0187 f0ee 8d 19                     BSR    OUT2     ;TYPE CONDITION CODES
0188 f0f0 8d 17                     BSR    OUT2     ;TYPE ACCA
0189 f0f2 8d 15                     BSR    OUT2     ;TYPE ACCB
0190 f0f4 8d 13                     BSR    OUT2     ;TYPE DP
0191                         
0192 f0f6 8d 19                     BSR    OUT4     ;TYPE X REG
0193 f0f8 8d 17                     BSR    OUT4     ;TYPE Y REG
0194 f0fa 8d 15                     BSR    OUT4     ;TYPE U REG
0195 f0fc 8d 13                     BSR    OUT4     ;TYPE PROGRAM COUNTER
0196                         
0197                         ;TYPE THE STACK POINTER LOCATION
0198 f0fe 8d 19                     BSR    OUT2A4   ;TYPE STACK POINTER ID
0199 f100 8e 7f 0e                  LDX    #SP
0200 f103 bd f8 d5                  JSR    OUT2BY   ;TYPE THE VALUE
0201 f106 7e f0 72                  JMP    NOMORE
0202                         
0203                         ;OUTPUT CONTENT OF A 1 BYTE REGISTER
0204 f109 8d 0e              OUT2   BSR    OUT2A4
0205 f10b bd f8 cc                  JSR    OUT1BY
0206 f10e 30 01                     LEAX   1,X
0207 f110 39                        RTS
0208                         
0209                         ;OUTPUT CONTENT OF A 2 BYTE REGISTER
0210 f111 8d 06              OUT4   BSR    OUT2A4
0211 f113 bd f8 d5                  JSR    OUT2BY
0212 f116 30 02                     LEAX   2,X      ;SKIP TO NEXT 2 BYTES IN STACK
0213 f118 39                        RTS
0214                         
0215                         ;MISC SETUP FOR REGISTER DISPLAY
0216 f119 bd f8 c0           OUT2A4 JSR    OUTSP    ;OUTPUT A SPACE
0217 f11c 7c 7f e3                  INC    COMNUM   ;SKIP TO NEXT REGISTER NAME
0218 f11f 86 05                     LDA    #5       ;REGISTER NAME IS IN LIST 5
0219 f121 bd f6 f4                  JSR    TYPCMD   ;TYPE IT
0220 f124 bd f8 c6                  JSR    OUTEQ    ;TYPE AN "="
0221 f127 39                        RTS
0222                         
0223                         ;ENTER HERE FROM SOFTWARE INTERRUPT
0224 f128 8e fc 1b           TYPSWI LDX    #MSGSWI
0225 f12b bd fb 51                  JSR    OUTSTR
0226                         ;DECREMENT PC SO IT POINTS TO "SWI" INSTRUCTION
0227 f12e be 7f 0e                  LDX    SP
0228 f131 6d 0c                     TST    12,X      ;TEST LO BYTE OF PC FOR PENDING BORROW
0229 f133 26 02                     BNE    TYPSW1
0230 f135 6a 0b                     DEC    11,X      ;NEED TO BORROW, DEC HI BYTE OF PC
0231 f137 6a 0c              TYPSW1 DEC    12,X      ;DECR LO BYTE OF PC
0232 f139 20 ad                     BRA    DISREG   ;GO DISPLAY REGISTERS
0233                         ;*****
0234                         ;GOTO - GO TO MEMORY ADDRESS
0235 f13b bd f8 16           GOTO   JSR    NUMBER   ;GET DESTINATION
0236 f13e 27 08                     BEQ    GOTO1    ;IF NONE, USE DEFAULT
0237 f140 be 7f 1b                  LDX    NBRHI
0238 f143 bf 7f 21                  STX    LASTGO   ;SAVE IT
0239 f146 6e 84                     JMP    ,X       ;GO TO DESTINATION
0240                         
0241 f148 be 7f 21           GOTO1  LDX   LASTGO    ;GET LAST GOTO ADDRESS
0242 f14b 6e 84                     JMP   ,X        ;GO TO IT
0243                         
0244                         ;*****
0245                         ;SEI - SET INTERRUPT MASK
0246 f14d 1a 10              LSEI   ORCC   #$10     ;SEI
0247 f14f 20 37                     BRA    COPY3
0248                         
0249                         ;*****
0250                         ;SEF - SET FAST INTERRUPT MASK
0251 f151 1a 40              LSEF   ORCC   #$40     ;SEF
0252 f153 20 33                     BRA    COPY3
0253                         
0254                         ;*****
0255                         ;CLI - CLEAR INTERRUPT MASK
0256 f155 1c ef              LCLI   ANDCC  #$EF     ;CLI
0257 f157 20 2f                     BRA    COPY3
0258                         
0259                         ;*****
0260                         ;CLF - CLEAR FAST INTERRUPT MASK
0261 f159 1c ef              LCLF   ANDCC  #$EF     ;CLF
0262 f15b 20 2b                     BRA    COPY3
0263                         
0264                         ;*****
0265                         ;COPY - COPY FROM ONE LOCATION TO ANOTHER
0266 f15d bd f7 cb           COPY   JSR    GTRANG   ;GET SOURCE RANGE INTO RANGLO & RANGHI
0267 f160 2f 23                     BLE    COPY2    ;ERROR IF NO SOURCE
0268 f162 bd f8 16                  JSR    NUMBER   ;GET DESTINATION
0269 f165 2f 1e                     BLE    COPY2    ;ERROR IF NO DESTINATION
0270                         
0271 f167 be 7f 1d                  LDX    RANGLO   ;GET SOURCE ADDRESS POINTER
0272 f16a a6 84              COPY1  LDA    ,X       ;GET BYTE FROM SOURCE
0273 f16c be 7f 1b                  LDX    NBRHI    ;GET DESTINATION ADDRESS POINTER
0274 f16f a7 84                     STA    ,X       ;SAVE BYTE IN DESTINATION
0275 f171 30 01                     LEAX   1,X      ;INC DESTINATION POINTER
0276 f173 bf 7f 1b                  STX    NBRHI    ;SAVE IT
0277 f176 be 7f 1d                  LDX    RANGLO   ;GET SOURCE ADDRESS POINTER
0278 f179 bc 7f 1f                  CPX    RANGHI   ;COMPARE TO END OF INPUT RANGE
0279 f17c 27 0a                     BEQ    COPY3    ;DONE IF EQUAL
0280 f17e 30 01                     LEAX   1,X      ;NOT EQUAL, INC SOURCE POINTER
0281 f180 bf 7f 1d                  STX    RANGLO   ;SAVE IT
0282 f183 20 e5                     BRA    COPY1    ;LOOP FOR NEXT BYTE
0283                         
0284 f185 7e f0 59           COPY2  JMP    BADSYN   ;BAD SYNTAX
0285 f188 7e f0 72           COPY3  JMP    NOMORE   ;SHOULD BE NO MORE ON THE INPUT LINE
0286                         
0287                         ;*****
0288                         ;BREAK - SET BREAKPOINT AT SPECIFIED ADDRESS & REMOVE OLD ONE
0289 f18b bd f8 16           BREAK  JSR    NUMBER   ;GET BREAKPOINT LOCATION
0290 f18e 2b 31                     BMI    BREAK3   ;IF NOT NUMERIC, LOOK FOR "?"
0291 f190 27 1f                     BEQ    BREAK2   ;IF NO MODIFIER, REMOVE OLD BREAKPOINT
0292                         
0293                         ;*****
0294                         ;CHECK IF A "SWI" IS STORED AT THE BREAK ADDRESS
0295 f192 be 7f 28                  LDX    BRKADR   ;GET CURRENT BREAK ADDRESS
0296 f195 a6 84                     LDA    ,X       ;AND THE CHAR THERE
0297 f197 81 3f                     CMPA   #$3F     ;COMPARE TO "SWI"
0298 f199 26 05                     BNE    BREAK1   ;EQUAL?
0299                         ;YES, RESTORE THE OLD INSTRUCTION
0300 f19b b6 7f 2a                  LDA    BRKINS   ;GET IT
0301 f19e a7 84                     STA    ,X       ;RESTORE IT
0302                         
0303                         ;PUT BREAK AT NEWLY SPECIFIED LOCATION
0304 f1a0 be 7f 1b           BREAK1 LDX    NBRHI    ;GET NEW BREAKPOINT (BREAK ADDRESS)
0305 f1a3 bf 7f 28                  STX    BRKADR   ;SAVE IT
0306 f1a6 a6 84                     LDA    ,X       ;GET INSTRUCTION STORED THERE
0307 f1a8 b7 7f 2a                  STA    BRKINS   ;SAVE IT
0308 f1ab 86 3f                     LDA    #$3F     ;GET CODE FOR SOFTWARE INTERRUPT
0309 f1ad a7 84                     STA    ,X       ;PUT IT AT BREAKPOINT
0310 f1af 20 34                     BRA    BREAK5   ;ALL DONE
0311                         
0312                         ;REMOVE BREAKPOINT
0313 f1b1 be 7f 28           BREAK2 LDX    BRKADR   ;GET ADDRESS OF BREAK
0314 f1b4 a6 84                     LDA    ,X       ;GET INST. THERE
0315 f1b6 81 3f                     CMPA   #$3F     ;SWI?
0316 f1b8 26 2b                     BNE    BREAK5   ;IF NOT,, RETURN & PROMPT
0317 f1ba b6 7f 2a                  LDA    BRKINS   ;WAS A SWI - GET PREVIOUS INST.
0318 f1bd a7 84                     STA    ,X       ;& RESTORE IT
0319 f1bf 20 24                     BRA    BREAK5
0320                         
0321                         ;LOOK FOR A QUESTION MARK IN LIST 4
0322 f1c1 86 04              BREAK3 LDA    #4
0323 f1c3 bd f6 8a                  JSR    COMAND   ;SCAN FOR IT
0324 f1c6 2f 20                     BLE    BREAK6   ;BAD SYNTAX IF NOT "?"
0325 f1c8 be 7f 28                  LDX    BRKADR   ;IT IS, GET BREAK ADDRESS
0326 f1cb a6 84                     LDA    ,X       ;GET INSTRUCTION THERE
0327 f1cd 81 3f                     CMPA   #$3F     ;IS IT A "SWI"?
0328 f1cf 27 08                     BEQ    BREAK4   ;IF YES, SAY SO
0329                         ;NO BREAKPOINT SET
0330 f1d1 8e fc 2a                  LDX    #MSGNBR  ;GET THAT MESSAGE
0331 f1d4 bd fb 51                  JSR    OUTSTR   ;SAY IT
0332 f1d7 20 0c                     BRA    BREAK5
0333                         ;BREAKPOINT SET
0334 f1d9 8e fc 32           BREAK4 LDX    #MSGBAT  ;GET THAT MESSAGE
0335 f1dc bd fb 51                  JSR    OUTSTR   ;SAY IT
0336 f1df 8e 7f 28                  LDX    #BRKADR  ;GET BREAK ADDRESS
0337 f1e2 bd f8 d5                  JSR    OUT2BY   ;TYPE IT
0338                         
0339 f1e5 7e f0 72           BREAK5 JMP    NOMORE
0340 f1e8 7e f0 59           BREAK6 JMP    BADSYN
0341                         
0342                         ;*****
0343                         ;IBASE - SET INPUT BASE
0344                         ;LOOK FOR HEX, DEC, OR OCT IN LIST #3
0345 f1eb 86 03              IBASE  LDA    #3
0346 f1ed bd f6 8a                  JSR    COMAND
0347 f1f0 2b 09                     BMI    IBASE2   ;UNRECOGNIZABLE BASE, TRY "?"
0348 f1f2 2e 02                     BGT    IBASE1
0349 f1f4 86 01                     LDA    #1       ;NO BASE GIVEN - DEFAULT TO HEX
0350 f1f6 b7 7f 18           IBASE1 STA    IBCODE   ;SAVE BASE CODE
0351 f1f9 20 ea                     BRA    BREAK5
0352                         
0353                         ;LOOK FOR "?" IN LIST #4
0354 f1fb b6 7f 18           IBASE2 LDA    IBCODE   ;GET IB CODE IN CASE ITS NEEDED
0355 f1fe 34 02                     PSHS   A        ;SAVE IT ON STACK TEMPORARILY
0356 f200 20 26                     BRA    DBASE4
0357                         
0358                         ;*****
0359                         ;DBASE - SET DISPLAY BASE
0360                         ;LOOK FOR HEX,DEC,OCT OR BIN IN LIST #3
0361 f202 86 03              DBASE  LDA    #3
0362 f204 bd f6 8a                  JSR    COMAND
0363 f207 2b 1a                     BMI    DBASE3   ;UNRECOGNIZABLE BASE, TRY "?"
0364 f209 2e 02                     BGT    DBASE1
0365 f20b 86 01                     LDA    #1       ;NO BASE GIVEN - DEFAULT TO HEX
0366 f20d b7 7f 19           DBASE1 STA    DBCODE
0367                         
0368                         ;COMPUTE THE NUMERIC DISPLAY BASE (FOR THE "DISPLAY" COMMAND)
0369 f210 8e f2 1e                  LDX    #DBTBL-1 ;POINT TO HEAD OF DISPLAY BASE TABLE
0370 f213 30 01              DBASE2 LEAX   1,X      ;INC TABLE POINTER
0371 f215 4a                        DECA            ;DECR DISPLAY BASE CODE
0372 f216 26 fb                     BNE    DBASE2   ;LOOP IF NOT EQUAL
0373 f218 a6 84                     LDA    ,X       ;EQUAL - GET NUMERIC BASE FROM TABLE
0374 f21a b7 7f 1a                  STA    DBNBR    ;SAVE IT
0375 f21d 20 c6                     BRA    BREAK5   ;DONE
0376                         
0377                         ;DISPLAY BASE TABLE
0378 f21f 10                 DBTBL  FCB    16
0379 f220 0a                        FCB    10
0380 f221 08                        FCB    8
0381 f222 02                        FCB    2
0382                         
0383                         ;LOOK FOR "?" IN LIST #4
0384 f223 b6 7f 19           DBASE3 LDA    DBCODE   ;GET DB CODE IN CASE ITS NEEDED
0385 f226 34 02                     PSHS   A        ;SAVE IT ON STACK TEMPORARILY
0386 f228 86 04              DBASE4 LDA    #4
0387 f22a bd f6 8a                  JSR    COMAND
0388 f22d 35 04                     PULS   B        ;RETRIEVE INPUT BASE/DISPLAY BASE CODE
0389 f22f 2f b7                     BLE    BREAK6   ;ERROR IF THE "SOMETHING" WAS NOT AN "?"
0390                         ;SET UP FOR TYPEOUT OF BASE CODE
0391 f231 86 03                     LDA    #3       ;ITS IN LIST
0392 f233 f7 7f e3                  STB    COMNUM   ;STORE BASE CODE
0393 f236 bd f6 f4                  JSR    TYPCMD   ;TYPE OUT BASE
0394 f239 20 aa                     BRA    BREAK5
0395                         ;*****
0396                         ;CONTINUE - CONTINUE FROM A "SWI"
0397                         ;RETURN TO LOCATION WHERE SWI WAS
0398 f23b 10 fe 7f 0e        CONTIN LDS    SP       ;IN CASE SP WAS MODIFIED VIA SET COMMAND
0399 f23f 3b                        RTI
0400                         
0401                         ;*****
0402                         ;DISPLAY - DISPLAY MEMORY DATA
0403 f240 bd f7 cb           DISPLA JSR    GTRANG   ;GET MEMORY DISPLAY RANGE
0404 f243 2f 61                     BLE    DISPL9   ;ADDRESS IS REQUIRED
0405                         
0406                         ;INITIALIZE ADDRESS POINTER TO START OF MEMORY
0407 f245 be 7f 1d                  LDX    RANGLO
0408 f248 bf 7f c5                  STX    MEMADR
0409                         
0410                         ;SEARCH LIST 6 FOR DISPLAY MODIFIERS "DATA" OR "USED"
0411 f24b 86 06                     LDA    #6
0412 f24d bd f6 8a                  JSR    COMAND
0413 f250 2b 54                     BMI    DISPL9   ;ANY OTHER MODIFIER IS ILLEGAL
0414                         ;ADJ DISPLAY MODIFIER CODE SO THAT: -1=ADDR & DATA, 0=DATA, I=USED
0415 f252 4a                        DECA
0416 f253 b7 7f e3                  STA    COMNUM   ;SAVE FOR LATER TESTS
0417                         ;INIT "DATA VALUES PER LINE" COUNTER
0418 f256 5f                        CLRB
0419 f257 5c                        INCB
0420 f258 8e 7f c5           DISPL1 LDX    #MEMADR
0421 f25b 7d 7f e3                  TST    COMNUM   ;WHICH DISPLAY OPTION?
0422 f25e 2b 2c                     BMI    DISPL6   ;IF "ADDRESS & DATA", GO THERE
0423                         
0424                         ;OUTPUT DATA WITH ADDRESS ONLY AT LINE BEGINNING
0425 f260 5a                        DECB            ;COUNT DATA VALUES PER LINE
0426 f261 26 0c                     BNE    DISPL2   ;IF COUNT NOT UP, SKIP ADDRESS OUTPUT
0427                         
0428 f263 bd fb d8                  JSR    DOCRLF   ;GET TO LINE BEGINNING
0429 f266 bd f8 d5                  JSR    OUT2BY   ;OUTPUT ADDRESS
0430 f269 bd f8 c0                  JSR    OUTSP    ;AND A SPACE
0431 f26c f6 7f 1a                  LDB    DBNBR    ;RESET LINE COUNTER
0432                         
0433 f26f be 7f c5           DISPL2 LDX    MEMADR   ;POINT TO DATA AT THAT ADDRESS
0434 f272 7d 7f e3                  TST    COMNUM   ;WANT "DATA" OPTION?
0435 f275 2e 05                     BGT    DISPL3   ;IF NOT, GO TO "USES" CODE
0436                         
0437                         ;"DATA" OPTION
0438 f277 bd f8 c0                  JSR    OUTSP    ;OUTPUT PRECEDING SPACE
0439 f27a 20 1b                     BRA    DISPL7
0440                         ;"USED" OPTION
0441 f27c a6 84              DISPL3 LDA    ,X       ;GET THE DATA
0442 f27e 4d                        TSTA            ;EXAMINE IT FOR ZERO
0443 f27f 26 04                     BNE    DISPL4
0444 f281 86 2e                     LDA    #'.'     ;ITS ZERO, GET A "."
0445 f283 20 02                     BRA    DISPL5
0446 f285 86 2b              DISPL4 LDA    #'+'     ;ITS NON-ZERO. GET A "+"
0447 f287 bd fb 80           DISPL5 JSR    OUTCHR   ;OUTPUT THE "." OR "+"
0448 f28a 20 0e                     BRA    DISPL8
0449                         
0450 f28c bd f8 c0           DISPL6 JSR    OUTSP    ;OUTPUT A PRECEEDING SPACE
0451 f28f bd f8 d5                  JSR    OUT2BY   ;TYPE ADDRESS
0452 f292 bd f8 c6                  JSR    OUTEQ    ;TYPE "="
0453 f295 ae 84                     LDX    ,X       ;GET CONTENT
0454 f297 bd f8 cc           DISPL7 JSR    OUT1BY   ;TYPE IT
0455                         
0456 f29a bc 7f 1f           DISPL8 CPX    RANGHI   ;ARE WE DONE?
0457 f29d 27 0a                     BEQ    DISP10   ;IF YES, BACK TO PROMPT
0458 f29f 30 01                     LEAX   1,X      ;NO, INC MEMORY ADDRESS
0459 f2a1 bf 7f c5                  STX    MEMADR   ;SAVE IT
0460 f2a4 20 b2                     BRA    DISPL1
0461                         
0462 f2a6 7e f0 59           DISPL9 JMP    BADSYN
0463 f2a9 7e f0 72           DISP10 JMP    NOMORE
0464                         
0465                         ;*****
0466                         ;SET - SET MEMORY LOCATIONS
0467 f2ac bd f7 cb           SET    JSR    GTRANG   ;GET MEMORY LOCATION/RANGE
0468 f2af 2b 52                     BMI    SET5     ;IF NOT AN ADDRESS, LOOK FOR A REGISTER NAME
0469 f2b1 27 f3                     BEQ    DISPL9   ;AN ADDRESS MODIFIER IS REQUIRED
0470                         
0471                         ;RANGE OF ADDRESSES SPECIFIED?
0472 f2b3 be 7f 1d                  LDX    RANGLO
0473 f2b6 bc 7f 1f                  CPX    RANGHI
0474 f2b9 27 13                     BEQ    SET2     ;IF SINGLE ADDRESS, SET UP ADDRESSES INDIVIDUALLY
0475                         ;SET A RANGE OF ADDRESSES TO A SINGLE VALUE
0476 f2bb bd f8 16                  JSR    NUMBER   ;GET THAT VALUE
0477 f2be 2f e6                     BLE    DISPL9   ;ITS REQUIRED
0478 f2c0 b6 7f 1c                  LDA    NBRLO    ;PUT IT IN ACCA
0479 f2c3 a7 84              SET1   STA    ,X       ;STORE IT IN DESTINATION
0480 f2c5 bc 7f 1f                  CPX    RANGHI   ;END OF RANGE HIT?
0481 f2c8 27 df                     BEQ    DISP10   ;IF YES,ALL DONE
0482 f2ca 30 01                     LEAX   1,X      ;NO, ON TO NEXT ADDRESS IN RANGE
0483 f2cc 20 f5                     BRA    SET1     ;LOOP TO SET IT
0484                         ;SET ADDRESSES UP INDIVIDUALLY
0485 f2ce bf 7f c5           SET2   STX    MEMADR   ;SAVE MEMORY LOC
0486 f2d1 bd f8 16           SET3   JSR    NUMBER   ;GET DATA TO PUT THERE
0487 f2d4 27 0e                     BEQ    SET4     ;END OF LINE?
0488 f2d6 2d ce                     BLT    DISPL9   ;ABORT IF BAD SYNTAX
0489 f2d8 b6 7f 1c                  LDA    NBRLO    ;LOAD DATA BYTE
0490 f2db be 7f c5                  LDX    MEMADR   ;LOAD ADDRESS
0491 f2de a7 84                     STA    ,X       ;STORE DATA
0492                         
0493                         ;INCREMENT ADDRESS IN CASE USER WANTS TO INDIVIDUALLY SET SEVERAL
0494                         ;SUCCESSIVE LOCATIONS
0495 f2e0 30 01                     LEAX   1,X
0496 f2e2 20 ea                     BRA    SET2
0497                         
0498                         ;END OF LINE - WAS IT TERMINATED WITH A LINE FEED?
0499 f2e4 be 7f 12           SET4   LDX    SYNPTR   ;POINT TO END OF LINE
0500 f2e7 a6 84                     LDA    ,X       ;GET CHAR THERE
0501 f2e9 81 0a                     CMPA   #LF      ;LINE FEED?
0502 f2eb 10 26 00 84               LBNE   SET12    ;IF NOT, BACK TO PROMPT
0503 f2ef 8e 7f c5                  LDX    #MEMADR  ;YES, GET NEXT ADDRESS TO BE SET
0504 f2f2 bd f8 d5                  JSR    OUT2BY   ;TYPE IT
0505 f2f5 bd f8 c0                  JSR    OUTSP    ;AND A SPACE
0506 f2f8 bd fa 8f                  JSR    GETLIN   ;GET A NEW LINE
0507 f2fb be 7f 34                  LDX    BUFBEG   ;GET BUFFER BEGINNING
0508 f2fe bf 7f 12                  STX    SYNPTR   ;EQUATE IT TO SYNTAX SCAN POINTER
0509 f301 20 ce                     BRA    SET3     ;GO PICK UP DATA
0510                         
0511                         
0512                         ;LOOK FOR (REGISTER NAME, REGISTER VALUE) PAIRS
0513 f303 86 05              SET5   LDA    #5
0514 f305 bd f6 8a                  JSR    COMAND   ;PICK UP A REGISTER NAME
0515 f308 2b 66                     BMI    SET11    ;ERROR IF UNRECOGNIZABLE
0516 f30a 27 67                     BEQ    SET12    ;DONE IF END OF LINE
0517 f30c 34 02                     PSHS   A        ;SAVE REGISTER NAME(NUMBER)
0518 f30e bd f8 16                  JSR    NUMBER   ;GET NEW REGISTER VALUE
0519 f311 35 02                     PULS   A        ;RESTORE REGISTER NAME(NUMBER)
0520 f313 2f 5b                     BLE    SET11    ;GOT GOOD REGISTER VALUE?
0521 f315 be 7f 0e                  LDX    SP       ;YES, POINT TO TOP OF STACK
0522 f318 f6 7f 1c                  LDB    NBRLO    ;GET REGISTER VALUE
0523                         
0524                         ;CONDITION CODES
0525 f31b 81 01                     CMPA   #1
0526 f31d 26 04                     BNE    SET6
0527 f31f e7 84                     STB     ,X
0528 f321 20 e0                     BRA    SET5
0529                         ;ACCA
0530 f323 81 02              SET6   CMPA   #2
0531 f325 26 04                     BNE    SET7
0532 f327 e7 01                     STB    1,X
0533 f329 20 d8                     BRA    SET5
0534                         
0535                         ;ACCB
0536 f32b 81 03              SET7   CMPA   #3
0537 f32d 26 04                     BNE    SET7A
0538 f32f e7 02                     STB    2,X
0539 f331 20 d0                     BRA    SET5
0540                         
0541                         ;DP
0542 f333 81 04              SET7A  CMPA   #4
0543 f335 26 04                     BNE    SET8
0544 f337 e7 03                     STB    3,X
0545 f339 20 c8                     BRA    SET5
0546                         
0547                         ;X
0548 f33b 81 05              SET8   CMPA   #5
0549 f33d 26 07                     BNE    SET8A
0550 f33f b6 7f 1b                  LDA    NBRHI
0551 f342 ed 04                     STD    4,X
0552 f344 20 bd                     BRA    SET5
0553                         
0554                         ;Y
0555 f346 81 06              SET8A  CMPA   #6
0556 f348 26 07                     BNE    SET8B
0557 f34a b6 7f 1b                  LDA    NBRHI
0558 f34d ed 06                     STD    6,X
0559 f34f 20 b2                     BRA    SET5
0560                         
0561                         ;U
0562 f351 81 07              SET8B  CMPA   #7
0563 f353 26 07                     BNE    SET9
0564 f355 b6 7f 1b                  LDA    NBRHI
0565 f358 ed 08                     STD    8,X
0566 f35a 20 a7                     BRA    SET5
0567                         
0568                         ;PC
0569 f35c 81 08              SET9   CMPA   #8
0570 f35e 26 07                     BNE    SET10
0571 f360 b6 7f 1b                  LDA    NBRHI
0572 f363 ed 0a                     STD    10,X     ;UPDATE HI BYTE
0573 f365 20 9c                     BRA    SET5
0574                         
0575                         ;S
0576 f367 81 09              SET10  CMPA   #9
0577 f369 26 05                     BNE    SET11
0578 f36b fd 7f 0e                  STD    SP
0579 f36e 20 93                     BRA    SET5
0580                         
0581 f370 7e f0 59           SET11  JMP    BADSYN
0582 f373 7e f0 72           SET12  JMP    NOMORE
0583                         ;*****
0584                         ;VERIFY - CHECKSUM VERIFY A BLOCK OF MEMORY
0585 f376 bd f7 cb           VERIFY JSR    GTRANG   ;GET A NUMBER RANGE
0586 f379 27 1b                     BEQ    VERIF1   ;NO MODIFIER MEANS CHECK WHAT WE HAVE
0587 f37b 2b f3                     BMI    SET11    ;ANYTHING ELSE IS ILLEGAL
0588                         ;GOOD RANGE GIVEN, TRANSFER IT TO CHECKSUM ADDRESSES
0589 f37d be 7f 1d                  LDX    RANGLO
0590 f380 bf 7f 23                  STX    VERFRM
0591 f383 be 7f 1f                  LDX    RANGHI
0592 f386 bf 7f 25                  STX    VERTO
0593                         
0594 f389 8d 22                     BSR    CKSUM    ;COMPUTE CHECKSUM
0595 f38b b7 7f 27                  STA    CHKSUM   ;SAVE IT
0596 f38e 8e 7f 27                  LDX    #CHKSUM  ;TYPE THE CHECKSUM
0597 f391 bd f8 cc                  JSR    OUT1BY
0598 f394 20 dd                     BRA    SET12
0599                         
0600                         ;NO MODIFIER GIVEN - JUST VERIFY CHECKSUM
0601 f396 8d 15              VERIF1 BSR    CKSUM    ;COMPUTE CHECKSUM
0602 f398 b1 7f 27                  CMPA   CHKSUM   ;SAME AS STORED CHECKSUM?
0603 f39b 26 08                     BNE    VERIF2
0604                         
0605                         ;THEY VERIFY - SAY SO
0606 f39d 8e fc 39                  LDX    #MSGVER
0607 f3a0 bd fb 51                  JSR    OUTSTR
0608 f3a3 20 ce                     BRA    SET12
0609                         
0610                         ;THEY DON'T - SAY SO
0611 f3a5 8e fc 3c           VERIF2 LDX    #MSGNVE
0612 f3a8 bd fb 51                  JSR    OUTSTR
0613 f3ab 20 c6                     BRA    SET12
0614                         
0615                         ;COMPUTE THE CHECKSUM FROM ADDRESSES VERFRM TO VERTO
0616                         ;RETURN THE CHECKSUM IN ACCA
0617 f3ad 4f                 CKSUM  CLRA            ;INIT CHECKSUM TO ZERO
0618 f3ae be 7f 23                  LDX    VERFRM   ;GET FIRST ADDRESS
0619 f3b1 30 1f                     LEAX   -1,X     ;INIT TO ONE LESS
0620 f3b3 30 01              CKSUM1 LEAX   1,X      ;START OF CHECKSUM LOOP
0621 f3b5 ab 84                     ADDA   ,X       ;UPDATE CHECKSUM IN ACCA WITH BYTE POINTED TO
0622 f3b7 bc 7f 25                  CPX    VERTO    ;HIT END OF RANGE?
0623 f3ba 26 f7                     BNE    CKSUM1   ;IF NOT, LOOP BACK
0624 f3bc 43                        COMA            ;COMPLEMENT THE SUM
0625 f3bd 39                        RTS             ;RETURN WITH IT
0626                         ;*****
0627                         ;SEARCH - SEARCH MEMORY FOR A BYTE STRING
0628                         
0629                         ;GLOBAL VARIABLES USED
0630                         ;LINPTR - INPUT LINE CHARACTER POINTER
0631                         ;LISPTR - COMMAND LIST CHARACTER POINTER
0632                         ;RANGLO - "SEARCH FROM" ADDRESS
0633                         ;RANGHI - "SEARCH TO" ADDRESS
0634                         
0635                         ;LOCAL VARIABLES USE
0636                         ;MEMADR - STARTING MEMORY ADDRESS WHERE A MATCH OCCURRED
0637                         ;BYTPTR - ADDRESS POINTER USED TO FILL BYTSTR AND SUBSTR BUFFERS
0638                         ;NBYTES - NUMBER OF BYTES IN BYTE STRING
0639                         ;NBRMAT - NUMBER OF CHARS THAT MATCH SO FAR IN THE MATCHING PROCESS
0640                         ;BYTSTR - STARTING ADDRESS OF 6 CHARACTER BYTE STRING BUFFER
0641                         
0642                         ;THE SEARCH STRING OCCUPIES TEMP4, TEMP5, & TEMP6 (6 BYTES MAX)
0643                         
0644                         ;GET SEARCH RANGE BEGINNING (RANGLO) & END (RANGHI)
0645 f3be bd f7 cb           SEARCH JSR    GTRANG
0646 f3c1 10 2f 00 84               LBLE   SEARC9   ;ABORT IF NO PAIR
0647                         
0648                         ;INITIALIZED BYTE STRING POINTER
0649 f3c5 8e 7f cb                  LDX    #BYTSTR  ;GET START OF BYTE STRING TO SEARCH FOR
0650 f3c8 bf 7f c7                  STX    BYTPTR   ;SET POINTER TO IT
0651                         
0652 f3cb 7f 7f c9                  CLR    NBYTES   ;ZERO # OF BYES IN BYTE STRING
0653                         
0654                         ;GET BYTE STRING
0655 f3ce bd f8 16           SEARC1 JSR    NUMBER   ;GET A BYTE
0656 f3d1 27 1b                     BEQ    SEARC2   ;BEGIN SEARCH IF EOL
0657 f3d3 2d 74                     BLT    SEARC9
0658                         
0659                         ;GOOD BYTE, ADD IT TO STRING
0660 f3d5 7c 7f c9                  INC    NBYTES   ;COUNT THIS BYTE
0661                         ;DON'T ACCEPT OVER 6 BYTES
0662 f3d8 b6 7f c9                  LDA    NBYTES
0663 f3db 81 06                     CMPA   #6
0664 f3dd 2e 6a                     BGT    SEARC9
0665                         
0666 f3df b6 7f 1c                  LDA    NBRLO    ;GET (LOW ORDER) BYTE
0667 f3e2 be 7f c7                  LDX    BYTPTR   ;GET BYTE POINTER
0668 f3e5 a7 84                     STA    ,X       ;SAVE BYTE
0669 f3e7 30 01                     LEAX   1,X      ;MOVE BYTE POINTER TO NEXT LOCATION IN STRING
0670 f3e9 bf 7f c7                  STX    BYTPTR   ;SAVE IT
0671 f3ec 20 e0                     BRA    SEARC1
0672                         
0673                         ;BEGIN SEARCH FOR BYTE STRING
0674                         ;IS # OF BYTES TO LOOK FOR >0
0675 f3ee 7d 7f c9           SEARC2 TST    NBYTES
0676 f3f1 27 56                     BEQ    SEARC9   ;IF NOT, BAD SYNTAX
0677                         
0678                         ;MAKE USE OF INPUT LINE CHARACTER FETCH & COMMAND LIST CHAR FETCH ROUTINES
0679                         
0680                         ;INITIALIZE MEMORY POINTER TO START OF SEARCH RANGE
0681 f3f3 be 7f 1d                  LDX    RANGLO
0682 f3f6 30 1f                     LEAX   -1,X
0683 f3f8 bf 7f 14                  STX    LINPTR
0684                         
0685                         ;INITIALIZE BYTE POINTER TO START OF BYTE STRING
0686 f3fb 8e 7f ca           SEARC3 LDX    #BYTSTR-1
0687 f3fe bf 7f e4                  STX    LISPTR
0688                         
0689 f401 7f 7f ca                  CLR    NBRMAT   ;SET "NUMBER OF BYTES THAT MATCHED" TO ZERO
0690                         ;GET BYTE FROM BYTE STRING & RETURN IT IN ACCA
0691 f404 bd f9 a5                  JSR    GETLST
0692                         ;GET BYTE FROM MEMORY RANGE & RETURN IT IN ACCB
0693 f407 bd f9 97           SEARC4 JSR    GETCHR
0694                         
0695 f40a 34 04                     PSHS   B        ;CBA
0696 f40c a1 e0                     CMPA   ,S+      ;COMPARE MEMORY & BYTE STRING CHARACTERS
0697 f40e 27 07                     BEQ    SEARC5   ;IF NO MATCH, TEST FOR RANGE END
0698 f410 bc 7f 1f                  CPX    RANGHI   ;HAVE WE REACHED THE RANGE SEARCH UPPER LIMIT?
0699 f413 27 37                     BEQ    SEAR10   ;YES, GO PROMPT FOR NEXT COMMAND
0700 f415 20 f0                     BRA    SEARC4
0701                         
0702                         ;MATCH ACHIEVED - SAVE ADDRESS OF MATCH
0703 f417 bf 7f c5           SEARC5 STX    MEMADR
0704 f41a 7c 7f ca           SEARC6 INC    NBRMAT   ;BUMP NUMBER MATCHED
0705 f41d b6 7f ca                  LDA    NBRMAT
0706 f420 b1 7f c9                  CMPA   NBYTES   ;HAVE ALL CHARACTERS MATCHED?
0707 f423 27 19                     BEQ    SEARC8   ;IF SO, MATCH ACHIEVED
0708                         ;HAVEN'T MATCHED ALL YET, GO GET NEXT PAIR EVEN IF PAST "SEARCH TO" ADDRESS
0709 f425 bd f9 a5                  JSR    GETLST
0710 f428 bd f9 97                  JSR    GETCHR
0711 f42b 34 04                     PSHS   B        ;CBA
0712 f42d a1 e0                     CMPA   ,S+
0713 f42f 27 e9                     BEQ    SEARC6
0714                         ;MISMATCH ON SOME BYTE PAST THE FIRST ONE
0715                         ;RESET THE MEMORY POINTER TO GET NEXT UNTESTED MEMORY LOCATION
0716 f431 be 7f c5           SEARC7 LDX    MEMADR
0717                         ;THIS TEST HANDLES SPECIAL CASE OF A MATCH ON RANGE END
0718 f434 bc 7f 1f                  CPX    RANGHI
0719 f437 27 13                     BEQ    SEAR10
0720 f439 bf 7f 14                  STX    LINPTR
0721                         ;GO RESET THE BYTE STRING POINTER
0722 f43c 20 bd                     BRA    SEARC3
0723                         
0724                         ;MATCH ON BYTE STRING ACHIEVED, TYPE OUT MEMORY ADDRESS
0725 f43e 8e 7f c5           SEARC8 LDX    #MEMADR
0726 f441 bd f8 d5                  JSR    OUT2BY
0727 f444 bd f8 c0                  JSR    OUTSP    ;AND A SPACE
0728                         ;ASSUME A MISMATCH (I.E., RESET MEMORY & BYTE STRING POINTERS & CONTINUE
0729 f447 20 e8                     BRA    SEARC7
0730                         
0731 f449 7e f0 59           SEARC9 JMP    BADSYN
0732 f44c 7e f0 72           SEAR10 JMP    NOMORE
0733                         
0734                         ;*****
0735                         ;TEST - TEST RAM FOR BAD BYTES
0736                         ;GET AN ADDRESS RANGE
0737 f44f bd f7 cb           TEST   JSR    GTRANG
0738 f452 2f f5                     BLE    SEARC9   ;ABORT IF NO PAIR
0739                         ;RANGLO HOLS STARTING ADDRESS OF RANGE
0740                         ;RANGHI HOLDS ENDING ADDRESS OF RANGE
0741 f454 be 7f 1d                  LDX    RANGLO
0742 f457 bf 7f c5                  STX    MEMADR
0743                         ;GET BYTE STORED AT TEST LOCATION & SAVE IT
0744 f45a a6 84              TEST1  LDA    ,X
0745 f45c 34 02                     PSHS   A
0746                         
0747 f45e 6f 84                     CLR    ,X       ;ZERO THE LOCATION
0748 f460 6d 84                     TST    ,X       ;TEST IT
0749 f462 27 05                     BEQ    TEST2    ;OK IF = ZERO
0750                         
0751                         ;CAN'T CLEAR LOCATION
0752 f464 8e fc 4c                  LDX    #MSGCCL
0753 f467 20 20                     BRA    TEST4
0754                         
0755 f469 6a 84              TEST2  DEC    ,X       ;SET LOCATION TO FF
0756 f46b 86 ff                     LDA    #$FF
0757 f46d a1 84                     CMPA   ,X       ;DID IT GET SET TO FF?
0758 f46f 27 05                     BEQ    TEST3
0759                         
0760                         ;CAN'T SET LOCATION TO ONE'S
0761 f471 8e fc 58                  LDX    #MSGCSO
0762 f474 20 13                     BRA    TEST4
0763                         
0764 f476 be 7f c5           TEST3  LDX    MEMADR   ;GET LOCATION BEING TESTED
0765 f479 35 02                     PULS   A
0766 f47b a7 84                     STA    ,X       ;RESTORE PREVIOUS CONTENT
0767                         
0768                         ;HIT END OF TEST RANGE?
0769 f47d bc 7f 1f                  CPX    RANGHI
0770 f480 27 ca                     BEQ    SEAR10   ;YES, ALL DONE
0771                         
0772                         ;NO, MOVE TO TEST NEXT LOCATION
0773 f482 30 01                     LEAX   1,X
0774 f484 bf 7f c5                  STX    MEMADR
0775 f487 20 d1                     BRA    TEST1
0776                         
0777                         ;*LOCATION IS BAD
0778 f489 bf 7f c9           TEST4  STX    TEMP3    ;SAVE ERROR MESSAGE TEMPORARILY
0779                         
0780 f48c 8e 7f c5                  LDX    #MEMADR
0781 f48f bd f8 d5                  JSR    OUT2BY   ;TYPE OUT BAD ADDRESS.
0782 f492 bd f8 c6                  JSR    OUTEQ    ;AN EQUAL SIGN
0783                         
0784 f495 be 7f c5                  LDX    MEMADR
0785 f498 bd f8 cc                  JSR    OUT1BY   ;ITS CONTENT.
0786 f49b bd f8 c0                  JSR    OUTSP    ;A SPACE.
0787 f49e be 7f c9                  LDX    TEMP3
0788 f4a1 bd fb 51                  JSR    OUTSTR   ;AND THE TYPE OF ERROR
0789                         
0790 f4a4 bd fb d8                  JSR    DOCRLF   ;SEND CR-LF
0791 f4a7 20 cd                     BRA    TEST3
0792                         ;*****
0793                         ;INT - SET UP INTERRUPT POINTER
0794 f4a9 bd f8 0b           INT    JSR    NUMINX   ;GET POINTER IN IX
0795 f4ac bf 7f 00                  STX    INTVEC   ;SAVE IT
0796 f4af 20 4c                     BRA    COMPA1
0797                         
0798                         ;*****
0799                         ;NMI - SET UP NON-MASKABLE INTERRUPT POINTER
0800 f4b1 bd f8 0b           NMI    JSR    NUMINX   ;GET POINTER IN IX
0801 f4b4 bf 7f 04                  STX    NMIVEC   ;SAVE IT
0802 f4b7 20 44                     BRA    COMPA1
0803                         
0804                         ;*****
0805                         ;SWI - SET UP SWI POINTER
0806 f4b9 bd f8 0b           LSWI   JSR    NUMINX   ;GET POINTER TO IX
0807 f4bc bf 7f 08                  STX    SWIVEC   ;SAVE IT
0808 f4bf 20 3c                     BRA    COMPA1
0809                         
0810                         ;*****
0811                         ;SWI2 - SET UP SWI2 POINTER
0812 f4c1 bd f8 0b           LSWI2  JSR    NUMINX   ;GET POINTER TO IX
0813 f4c4 bf 7f 0a                  STX    SWI2VC   ;SAVE IT
0814 f4c7 20 34                     BRA    COMPA1
0815                         
0816                         ;*****
0817                         ;SWI3 - SET UP SW3 POINTER
0818 f4c9 bd f8 0b           LSWI3  JSR    NUMINX   ;GET POINTER TO IX
0819 f4cc bf 7f 0c                  STX    SWI3VC   ;SAVE IT
0820 f4cf 20 2c                     BRA    COMPA1
0821                         
0822                         ;*****
0823                         ;FIRQ - SET UP FAST INTERRUPT POINTER
0824 f4d1 bd f8 0b           FIRQ   JSR    NUMINX   ;GET POINTER IN IX
0825 f4d4 bf 7f 02                  STX    FIRQVC   ;SAVE IT
0826 f4d7 20 24                     BRA    COMPA1
0827                         
0828                         ;*****
0829                         ;RSRVD - SET UP RESERVED INTERRUPT POINTER
0830 f4d9 bd f8 0b           RSRVD  JSR    NUMINX   ;GET POINTER IN IX
0831 f4dc bf 7f 06                  STX    RSRVDVC  ;SAVE IT
0832 f4df 20 1c                     BRA    COMPA1
0833                         
0834                         ;*****
0835                         ;COMPARE - OUTPUT SUM & DIFFERENCE OF TWO INPUT NUMBERS
0836 f4e1 bd f8 0b           COMPAR JSR    NUMINX   ;GET FIRST NUMBER
0837 f4e4 bf 7f 1d                  STX    RANGLO   ;PUT IT IN RANGLO
0838                         
0839 f4e7 bd f8 0b                  JSR    NUMINX   ;GET SECOND NUMBER
0840 f4ea bf 7f 1b                  STX    NBRHI    ;SAVE IT IN NBRHI
0841                         
0842                         ;COMPUTE AND OUTPUT THE SUM
0843 f4ed bd f7 a5                  JSR    SUMNUM   ;COMPUTE SUM
0844 f4f0 8e fc 6a                  LDX    #MSGSIS  ;GETS ITS TITLE
0845 f4f3 8d 0b                     BSR    OUTSD    ;OUTPUT TITLE & SUM
0846                         
0847 f4f5 bd f7 b8                  JSR    DIFNUM   ;COMPUTE DIFFERENCE
0848 f4f8 8e fc 72                  LDX    #MSGDIS  ;GET ITS TITLE
0849 f4fb 8d 03                     BSR    OUTSD    ;OUTPUT TITLE & DIFFERENCE
0850                         
0851 f4fd 7e f0 72           COMPA1 JMP    NOMORE
0852                         
0853                         ;COMPUTE AND OUTPUT THE RESULT
0854 f500 bd fb 51           OUTSD  JSR    OUTSTR   ;OUTPUT IT
0855 f503 8e 7f 1f                  LDX    #RANGHI  ;GET RESULT
0856 f506 bd f8 d5                  JSR    OUT2BY   ;DISPLAY RESULT
0857 f509 39                        RTS
0858                         ;*****
0859                         ;DUMP - DUMP A PORTION OF MEMORY, IN MIKBUG FORMAT, TO A SPECIFIED ACIA ADDRESS
0860                         
0861                         ;GET ADDRESS RANGE: START IN RANGLO (2 BYTES), END IN RANGHI (2 BYTES)
0862                         ;IF NO ADDRESS RANGE IS GIVEN, USE WHATEVER IS IN RANGLO & RANGHI
0863 f50a bd f7 cb           DUMP   JSR    GTRANG
0864                         
0865 f50d 7f 7f cd                  CLR    TEMP5    ;INITIALIZE TO DUMP TO TERMINAL
0866                         
0867                         ;LOOK FOR A "TO" MODIFIER
0868 f510 86 02              DUMP1  LDA    #2
0869 f512 bd f6 8a                  JSR    COMAND
0870 f515 27 15                     BEQ    DUMP4
0871 f517 10 2f 00 80        DUMP2  LBLE   DUMP10   ;ERROR IF BAD SYNTAX
0872 f51b 81 01                     CMPA   #1       ;TO?
0873 f51d 27 02                     BEQ    DUMP3
0874 f51f 20 ef                     BRA    DUMP1    ;GO LOOK FOR ANOTHER MODIFIER
0875                         
0876 f521 bd f8 0b           DUMP3  JSR    NUMINX   ;GET "TO" ADDRESS
0877 f524 bf 7f 2f                  STX    OUTADR   ;SAVE IT
0878 f527 7c 7f cd                  INC    TEMP5    ;REMEMBER THIS
0879 f52a 20 e4                     BRA    DUMP1    ;GO LOOK FOR ANOTHER MODIFIER
0880                         
0881 f52c 7d 7f cd           DUMP4  TST    TEMP5
0882 f52f 27 03                     BEQ    DUMP5
0883 f531 7c 7f 2e                  INC    OUTFLG   ;SET FLAG FOR PROPER OUTPUT DEVICE
0884 f534 8d 68              DUMP5  BSR    NULLS    ;SEND SOME NULLS
0885                         
0886                         ;MIKBUG MODE
0887                         ;OUTPUT AN "S0" TYPE RECORD
0888 f536 8e fc 7d                  LDX    #MSGS0
0889 f539 bd fb 51                  JSR    OUTSTR
0890                         
0891                         ;COMPUTER # OF BYTES TO OUTPUT (RANGE END - RANGE START + 1)
0892                         ;SUBTRACT LO BYTES
0893 f53c b6 7f 20           DUMP6  LDA    RANGHI+1
0894 f53f b0 7f 1e                  SUBA   RANGLO+1
0895                         ;SUBTRACT HI BYTES
0896 f542 f6 7f 1f                  LDB    RANGHI
0897 f545 f2 7f 1d                  SBCB   RANGLO
0898                         ;NON-ZERO HI BYTE IMPLIES LOTS TO OUTPUT
0899 f548 26 04                     BNE    DUMP7
0900                         ;HI BYTE DIFF IS ZERO
0901 f54a 81 10                     CMPA   #16      ;LO BYTE OF DIFF 0 TO 15
0902 f54c 25 02                     BCS    DUMP8    ;IF YES, TO DUMP8
0903 f54e 86 0f              DUMP7  LDA    #15      ;NO, LO BYTE IS 16-255; SET BYTES TO 15
0904                         ;TO GET FRAME COUNT, ADD 1 (DIFF OF 0 IMPLIES 1 OUTPUT) + # OF DATA BYTES,
0905                         ; + 2 ADDR BYTES + 1 CHECKSUM BYTE
0906 f550 8b 04              DUMP8  ADDA   #4
0907 f552 b7 7f c9                  STA    TEMP3    ;TEMP3 IS THE FRAME COUNT
0908 f555 80 03                     SUBA   #3
0909 f557 b7 7f cb                  STA    TEMP4    ;TEMP4 IS THE RECORD BYTE COUNT
0910                         ;OUTPUT A MIKBUG "S1" HEADER DATA RECORD
0911 f55a 8e fc 90                  LDX    #MSGS1
0912 f55d bd fb 51                  JSR    OUTSTR
0913 f560 5f                        CLRB            ;ZERO CHECKSUM
0914                         ;PUNCH FRAME COUNT
0915 f561 8e 7f c9                  LDX    #TEMP3
0916 f564 8d 39                     BSR    OUTP2
0917                         
0918                         ;PUNCH ADDRESS
0919 f566 8e 7f 1d                  LDX    #RANGLO
0920 f569 8d 34                     BSR    OUTP2
0921 f56b 8d 32                     BSR    OUTP2
0922                         
0923                         ;OUTPUT DATA
0924 f56d be 7f 1d                  LDX    RANGLO
0925 f570 8d 2d              DUMP9  BSR    OUTP2    ;OUTPUT DATA BYTE
0926 f572 7a 7f cb                  DEC    TEMP4    ;DEC BYTE COUNT
0927 f575 26 f9                     BNE    DUMP9
0928                         
0929                         ;COMPLEMENT AND PUNCH THE CHECKSUM
0930 f577 bf 7f 1d                  STX    RANGLO   ;SAVE MEMORY POINTER
0931 f57a 53                        COMB            ;COMPLEMENT CHECKSUM
0932 f57b 34 04                     PSHS   B        ;PUT IT ON STACK
0933 f57d 1f 41                     TFR    S,X      ;LET IX POINT TO IT
0934 f57f 8d 1e                     BSR    OUTP2    ;OUTPUT CHECKSUM
0935 f581 35 04                     PULS   B        ;PULL IT OFF STACK
0936 f583 be 7f 1d                  LDX    RANGLO   ;RESTORE MEMORY POINTER
0937 f586 30 1f                     LEAX   -1,X
0938 f588 bc 7f 1f                  CPX    RANGHI   ;HIT END OF RANGE?
0939 f58b 26 af                     BNE    DUMP6
0940                         
0941                         ;YES, OUTPUT AN "S9" RECORD
0942 f58d 8e fc 95                  LDX    #MSGS9
0943 f590 bd fb 51                  JSR    OUTSTR
0944 f593 8d 09                     BSR    NULLS    ;GENERATE BLANK TAPE
0945 f595 7f 7f 2e                  CLR    OUTFLG   ;SET TO TERMINAL OUTPUT
0946 f598 7e f0 72                  JMP    NOMORE   ;ALL DONE
0947 f59b 7e f0 59           DUMP10 JMP    BADSYN   ;BAD SYNTAX
0948                         
0949                         ;SEND A STRING OF NULLS
0950 f59e 39                 NULLS  RTS
0951                         
0952                         ;OUTPUT A BYTE POINTED TO BY IX AS 2 HEX CHARACTERS
0953 f59f eb 84              OUTP2  ADDB   ,X       ;UPDATE CHECKSUM
0954 f5a1 bd f8 cc                  JSR    OUT1BY
0955 f5a4 30 01                     LEAX   1,X
0956 f5a6 39                        RTS
0957                         ;*****
0958                         ;LOAD - LOAD A MIKBUG TAPE
0959                         ;LOOK FOR A "FROM" MODIFIER
0960 f5a7 86 07              LOAD   LDA    #7       ;IN LIST 7
0961 f5a9 bd f6 8a                  JSR    COMAND
0962 f5ac 2b ed                     BMI    DUMP10   ;ERROR, UNRECOGNIZABLE MODIFIER
0963 f5ae 27 09                     BEQ    LOAD1
0964                         
0965 f5b0 bd f8 0b                  JSR    NUMINX   ;GET "FROM" ADDRESS
0966 f5b3 bf 7f 2c                  STX    INPADR   ;SAVE IT
0967 f5b6 7c 7f 2b                  INC    INPFLG   ;SET FLAG FOR NON-TERMINAL ACIA
0968                         
0969                         ;KEEP READING CHARACTERS UNTIL AN "S" IS READ
0970 f5b9 bd fb 62           LOAD1  JSR    INPCHR   ;GET A CHAR
0971 f5bc 81 53                     CMPA   #'S'     ;IS IT AN S?
0972 f5be 26 f9                     BNE    LOAD1
0973                         
0974                         ;GOT AN "S", EXAMINE NEXT CHARACTER
0975 f5c0 bd fb 62                  JSR   INPCHR
0976 f5c3 81 39                     CMPA   #'9'     ;DONE IF ITS A "9"
0977 f5c5 27 2f                     BEQ    LOAD4
0978                         
0979 f5c7 81 31                     CMPA   #'1'     ;IS IT A "1"?
0980 f5c9 26 ee                     BNE    LOAD1    ;IF NOT, LOOK FOR NEXT "S"
0981                         ;VALID S1 RECORD
0982 f5cb 7f 7f ee                  CLR    CKSM     ;CLEAR CHECKSUM
0983                         ;READ RECORD BYTE COUNT
0984 f5ce bd f6 0a                  JSR    RDBYTE
0985 f5d1 80 02                     SUBA   #2
0986 f5d3 b7 7f ed                  STA    BYTECT   ;SAVE COUNT MINUS 2 ADDRESS BYTES
0987                         
0988 f5d6 8d 24                     BSR    BLDADR   ;BUILD ADDRESS
0989                         
0990 f5d8 8d 30              LOAD2  BSR    RDBYTE   ;READ A DATA BYTE INTO ACCA
0991 f5da 7a 7f ed                  DEC    BYTECT   ;COUNT IT
0992 f5dd 27 06                     BEQ    LOAD3    ;IF DONE WITH RECORD, CHECK CHECKSUM
0993 f5df a7 84                     STA    ,X       ;NOT DONE, STORE BYTE IN MEMORY
0994 f5e1 30 01                     LEAX   1,X      ;ON TO NEXT MEMORY ADDRESS
0995 f5e3 20 f3                     BRA    LOAD2
0996                         
0997                         ;RECORD READ IN COMPLETE
0998 f5e5 7c 7f ee           LOAD3  INC    CKSM     ;TEST CHECKSUM BY ADDING 1
0999 f5e8 27 cf                     BEQ    LOAD1    ;IF OK, RESULT SHOULD BE ZERO
1000                         
1001                         ;RECORD CHECKSUM ERROR
1002 f5ea 8e fc 3c                  LDX    #MSGNVE  ;SAY SO
1003 f5ed bd fb 51                  JSR    OUTSTR
1004 f5f0 8e 7f c5                  LDX    #TEMP1   ;GET RECORD ADDRESS OF IT
1005 f5f3 bd f8 d5                  JSR    OUT2BY   ;TYPE IT TOO
1006 f5f6 7f 7f 2b           LOAD4  CLR    INPFLG   ;RESET FLAG TO NORMAL TERMINAL INPUT
1007 f5f9 7e f0 72                  JMP    NOMORE
1008                         
1009                         ;BUILD ADDRESS
1010 f5fc 8d 0c              BLDADR BSR    RDBYTE
1011 f5fe b7 7f c5                  STA    TEMP1
1012 f601 8d 07                     BSR    RDBYTE
1013 f603 b7 7f c6                  STA    TEMP1+1
1014 f606 be 7f c5                  LDX    TEMP1
1015 f609 39                        RTS
1016 f60a 8d 15              RDBYTE BSR    INHEX    ;GET LEFT HEX DIGIT
1017                         ;MOVE TO HI 4 BITS
1018 f60c 48                        ASLA
1019 f60d 48                        ASLA
1020 f60e 48                        ASLA
1021 f60f 48                        ASLA
1022 f610 1f 89                     TFR    A,B      ;SAVE IT IN ACCA
1023 f612 8d 0d                     BSR    INHEX    ;GET RIGHT HEX DIGIT
1024 f614 34 04                     PSHS   B
1025 f616 ab e0                     ADDA   ,S+      ;COMBINE THEM IN ACCA
1026                         ;UPDATE THE CHECKSUM
1027 f618 1f 89                     TFR    A,B
1028 f61a fb 7f ee                  ADDB   CKSM
1029 f61d f7 7f ee                  STB    CKSM
1030 f620 39                        RTS
1031                         
1032                         ;INPUT A HEX CHAR & CONVERT TO INTERNAL FORM
1033 f621 bd fb 62           INHEX  JSR    INPCHR   ;INPUT A CHAR
1034 f624 80 30                     SUBA   #$30
1035 f626 2b 0f                     BMI    INHEX2   ;NOT HEX IF BELOW ASCII "1"
1036 f628 81 09                     CMPA   #$09
1037 f62a 2f 0a                     BLE    INHEX1   ;OK IF ASCII "9" OR LESS
1038 f62c 81 11                     CMPA   #$11     ;BELOW ASCII "A"?
1039 f62e 2b 07                     BMI    INHEX2   ;ERROR IF IT IS
1040 f630 81 16                     CMPA   #$16     ;OVER ASCII "F"?
1041 f632 2e 03                     BGT    INHEX2   ;ERROR IF IT IS
1042 f634 80 07                     SUBA   #7       ;CONVERT ASCII A-F TO HEX A-F
1043 f636 39                 INHEX1 RTS
1044                         ;ERROR - CHAR NOT HEX, SAY SO
1045 f637 8e fc a4           INHEX2 LDX    #MSGCNH
1046 f63a bd fb 51                  JSR    OUTSTR
1047 f63d 39                        RTS
1048                         
1049                         ;*****
1050                         ;DELAY - DELAY SPECIFIED # OF MILLISECONDS
1051 f63e bd f8 0b           DELAY  JSR    NUMINX   ;GET DELAY TIME
1052 f641 8d 03                     BSR    TIMDEL
1053 f643 7e f0 72                  JMP    NOMORE
1054                         
1055                         ;**
1056                         ;TIME DELAY SUBROUTINE
1057                         ;IX IS INPUT AS THE # OF MILLISECONDS TO DELAY
1058                         ;ACCA IS ALTERED
1059                         ;ACCB IS PRESERVED
1060                         ;ADJ TIMCON SO (6*TIMCON*CYCLE TIME=1 MS)
1061 f646 b6 7f eb           TIMDEL LDA    TIMCON
1062                         ;ENTER A 6 CYCLE LOOP
1063 f649 4a                 TIMDE1 DECA
1064 f64a 26 fd                     BNE    TIMDE1
1065 f64c 30 1f                     LEAX   -1,X     ;DECREMENT MILLISECOND COUNTER
1066 f64e 26 f6                     BNE    TIMDEL
1067 f650 39                        RTS
1068                         
1069                         ;HELP COMMAND
1070 f651 bd fb d8           HELP   JSR    DOCRLF   ;NEXT LINE
1071 f654 8e f9 b0                  LDX    #COMLST  ;COMMAND LIST
1072                         
1073 f657 c6 04              HEL1   LDB    #4       ;COMMANDS PER LINE
1074 f659 f7 7f c5                  STB    TEMP1
1075                         
1076 f65c c6 0c              HEL2   LDB    #12      ;POSITIONS PER COMMAND
1077                                                ;MUST BE LARGER THAN LONGEST COMMAND
1078 f65e a6 80              HEL3   LDA    ,X+      ;GET CHARACTER
1079 f660 81 0d                     CMPA   #CR      ;<CR> IS END OF COMMAND
1080 f662 27 06                     BEQ    HEL4
1081 f664 bd fb 80                  JSR    OUTCHR   ;PRINT COMMAND CHARACTER
1082 f667 5a                        DECB
1083 f668 26 f4                     BNE    HEL3
1084                         
1085 f66a a6 84              HEL4   LDA    ,X       ;GET CHARACTER
1086 f66c 81 0a                     CMPA   #LF      ;<LF> IS END OF LIST
1087 f66e 27 14                     BEQ    HEL6     ;FINISHED
1088 f670 7a 7f c5                  DEC    TEMP1    ;PER LINE DONE ?
1089 f673 26 05                     BNE    HEL5     ;NO - SKIP
1090                         
1091 f675 bd fb d8                  JSR    DOCRLF   ;NEXT LINE
1092 f678 20 dd                     BRA    HEL1
1093                         
1094 f67a 86 20              HEL5   LDA    #' '     ;SPACE
1095 f67c bd fb 80                  JSR    OUTCHR
1096 f67f 5a                        DECB
1097 f680 26 f8                     BNE    HEL5
1098 f682 20 d8                     BRA    HEL2
1099                         
1100 f684 bd fb d8           HEL6   JSR    DOCRLF   ;NEXT LINE
1101 f687 7e f0 72                  JMP    NOMORE
1102                         
1103                         ;====================================================
1104                         
1105                         ;  C O M M A N D     L I S T     S C A N N I N G    R O U T I N E
1106                         
1107                         ;THIS ROUTINE SEEKS A MATCH OF THE CHARACTERS POINTED AT
1108                         ;BY THE INPUT LINE SCANNING POINTER TO ONE OF THE COMMANDS
1109                         ;IN A LIST SPECIFIED BY ACCA.
1110                         ;
1111                         ; AS FOLLOWS:
1112                         ;
1113                         ;      ACCA=-1: THE MATCH WAS UNSUCCESSFUL.  THE SYNTAX
1114                         ;               POINTER (SYNPTR) WAS NOT UPDATED (ADVANCED).
1115                         ;
1116                         ;      ACCA= 0: THE MATCH WAS UNSUCCESSFUL SINCE THERE WERE
1117                         ;               NO MORE CHARACTERS, I.E., THE END OF THE
1118                         ;               LINE WAS REACHED.
1119                         ;
1120                         ;      ACCA=+N: SUCCESSFUL MATCH.  THE SYNTAX POINTER WAS UPDATED
1121                         ;               TO THE FIRST CHARACTER FOLLOWING THE COMMAND
1122                         ;               DELIMITER.  ACCA HOLDS THE NUMBER OF THE
1123                         ;               COMMAND MATCHED.
1124                         ;GLOBAL VARIABLES FOR EXTERNAL COMMUNICATION
1125                         ;SYNPTR - GOOD SYNTAX INPUT CHAR LINE POINTER
1126                         ;LINPTR - INPUT LINE CHARACTER POINTER
1127                         ;DELIM - CLASS OF PERMISSIBLE COMMAND DELIMITERS
1128                         
1129                         ;TEMPORARY 2 BYTE INTERNAL VARIABLES
1130                         ;LISPTR - COMMAND LIST CHARACTER POINTER
1131                         
1132                         ;TEMPORARY 1 BYTE INTERNAL VARIABLES
1133                         ;NUMMAT - NUMBER OF CHARACTERS THAT SUCCESSFULLY MATCH
1134                         ;LISNUM - # OF LIST WITHIN WHICH A MATCH WILL BE SOUGHT
1135                         ;COMNUM - COMMAND NUMBER MATCHED
1136                         
1137                         ;CONSTANTS USED
1138                         ;CR - CARRIAGE RETURN
1139                         ;LF - LINE FEED
1140                         
1141                         ;ACCB & IX ARE NOT PRESERVED.
1142                         
1143 f68a b7 7f e2           COMAND STA    LISNUM   ;SAVE LIST # TO MATCH WITHIN
1144                         ;TEST IF WE ARE AT THE END OF THE LINE
1145 f68d bd f7 33                  JSR    SKPDLM
1146 f690 24 02                     BCC    INILST
1147 f692 4f                        CLRA
1148 f693 39                        RTS
1149                         
1150                         ;INITIALIZE THE COMMAND LIST POINTER TO ONE LESS THAN
1151                         ;                       THE BEGINNING OF THE COMMAND LISTS
1152 f694 be 7f 10           INILST LDX    COMADR   ;ENTRY POINT
1153                         
1154                         ;MOVE TO THE BEGINNING OF THE DESIRED COMMAND LIST
1155 f697 b6 7f e2                  LDA    LISNUM   ;SEARCH FOR "STRING" # LISNUM
1156 f69a c6 0a                     LDB    #LF      ;USE LF AS A "STRING" TERMINATOR
1157 f69c 8d 7c                     BSR    FNDSTR
1158 f69e bf 7f e4                  STX    LISPTR
1159                         
1160                         ;THE LIST POINTER, LISPTR, NOW POINTS TO ONE LESS THAN THE FIRST CHARACTER
1161                         ;OF THE FIRST COMMAND IN THE DESIRED LIST.
1162 f6a1 7f 7f e3                  CLR    COMNUM
1163                         
1164                         ;RESET INPUT LINE POINTER TO: 1) BEGINNING OF LINE, OR TO
1165                         ;  2) POINT WHERE LAST SUCCESSFUL SCAN TERMINATED
1166 f6a4 7c 7f e3           CMD3   INC    COMNUM
1167 f6a7 be 7f 12                  LDX    SYNPTR
1168 f6aa bf 7f 14                  STX    LINPTR
1169 f6ad 7f 7f e1                  CLR    NUMMAT   ;CLEAR NUMBER OF CHARACTERS MATCHED
1170                         
1171 f6b0 bd f9 97           CMD4   JSR    GETCHR   ;GET INPUT LINE CHAR IN ACCB
1172 f6b3 bd f7 60                  JSR    TSTDLM   ;TEST FOR A DELIMITER
1173 f6b6 26 16                     BNE    MATCH    ;SUCCESS (FOUND DELIMITER) IF NOT = ZERO
1174 f6b8 bd f9 a5                  JSR    GETLST   ;GET COMMAND LIST CHAR IN ACCA
1175 f6bb 81 0a                     CMPA   #LF      ;HAS END OF COMMAND LIST BEEN REACHED?
1176 f6bd 27 19                     BEQ    NMATCH   ;IF SO, POTENTIAL MATCH FAILURE
1177 f6bf 81 0d                     CMPA   #CR      ;HAS END OF COMMAND BEEN REACHED?
1178 f6c1 27 15                     BEQ    NMATCH   ;IF SO, POTENTIAL MATCH FAILURE
1179                         
1180 f6c3 34 04                     PSHS   B        ;CBA
1181 f6c5 a1 e0                     CMPA   ,S+      ;COMPARE THE TWO CHARACTERS
1182 f6c7 26 1b                     BNE    NEXCOM   ;MATCH NOT POSSIBLE ON THIS COMMAND
1183                         
1184                         ;THEY MATCH, COMPARE THE SUCCEEDING CHARACTERS
1185 f6c9 7c 7f e1                  INC    NUMMAT   ;INC NUMBER OF CHARACTERS MATCHED
1186 f6cc 20 e2                     BRA    CMD4
1187                         
1188                         ;***
1189                         ;SUCCESSFUL MATCH - RETURN COMMAND NUMBER MATCHED IN ACCA
1190 f6ce b6 7f e3           MATCH  LDA    COMNUM
1191 f6d1 be 7f 14                  LDX    LINPTR
1192 f6d4 bf 7f 12                  STX    SYNPTR   ;UPDATE GOOD SYNTAX POINTER
1193 f6d7 39                        RTS
1194                         
1195                         ;***
1196                         ;NO MATCH
1197                         ;DID AT LEAST ONE MATCH?
1198 f6d8 7d 7f e1           NMATCH TST    NUMMAT
1199 f6db 27 07                     BEQ    NEXCOM   ;TO NEXT COMMAND IF NONE MATCHED
1200                         
1201                         ;AT LEAST ONE MATCHED - TEST FOR DELIMITER (NON-MATCHING CHAR)
1202 f6dd bd f7 60                  JSR    TSTDLM
1203 f6e0 26 ec                     BNE    MATCH    ;IF A DELIMITER, MATCH HAS BEEN ACHIEVED
1204 f6e2 a6 84                     LDA    ,X       ;RETRIEVE LAST CHARACTER
1205                         ;
1206                         ;ILLEGAL DELIMITER
1207                         
1208                         ;MOVE TO NEXT COMMAND WITHIN LIST
1209 f6e4 81 0a              NEXCOM CMPA   #LF      ;END OF THIS LIST?
1210 f6e6 27 09                     BEQ    MFAIL    ;IF SO, NOTHING ON LIST MATCHED
1211 f6e8 81 0d                     CMPA   #CR      ;IS IT A CR?
1212 f6ea 27 b8                     BEQ    CMD3     ;YES, NEXT COMMAND
1213 f6ec bd f9 a5                  JSR    GETLST   ;GET NEXT COMMAND LIST CHARACTER
1214 f6ef 20 f3                     BRA    NEXCOM   ;NO, GET TO END OF COMMAND
1215                         
1216                         ;***
1217                         ;MATCH FAILURE - NO MATCH POSSIBLE WITHIN THIS LIST
1218 f6f1 4f                 MFAIL  CLRA            ;MATCH FAILURE
1219 f6f2 4a                        DECA            ;NO MATCH POSSIBLE WITHIN THIS LIST
1220 f6f3 39                        RTS
1221                         
1222                         ;======================================================
1223                         ;THIS ROUTINE TYPES OUT COMMAND NUMBER "COMNUM"
1224                         ;THE LIST IS SPECIFIED IN ACCA
1225                         ;ACCB & IX ARE PRESERVED
1226 f6f4 bf 7f db           TYPCMD STX    XTEMP
1227 f6f7 34 04                     PSHS   B
1228 f6f9 8e f9 af                  LDX    #COMLST-1 ;MOVE TO HEAD OF COMMAND LISTS
1229 f6fc c6 0a                     LDB    #LF      ;AND LIST TERMINATOR
1230 f6fe 8d 1a                     BSR    FNDSTR   ;GO TO HEAD OF DESIRED LIST
1231 f700 b6 7f e3                  LDA    COMNUM   ;GET COMMAND NUMBER
1232 f703 c6 0d                     LDB    #CR      ;GET COMMAND TERMINATOR
1233 f705 8d 13                     BSR    FNDSTR   ;GO TO HEAD OF DESIRED COMMAND
1234                         
1235 f707 30 01              TYPCM1 LEAX   1,X      ;MOVE TO NEXT CHARACTER
1236 f709 a6 84                     LDA    ,X       ;GET A COMMAND CHARACTER
1237 f70b 81 0d                     CMPA   #CR      ;IS IT A COMMAND TERMINATOR?
1238 f70d 27 05                     BEQ    TYPCM2   ;IF SO, RETURN
1239 f70f bd fb 80                  JSR    OUTCHR   ;NO, TYPE IT
1240 f712 20 f3                     BRA    TYPCM1
1241                         
1242 f714 be 7f db           TYPCM2 LDX    XTEMP
1243 f717 35 04                     PULS   B
1244 f719 39                        RTS
1245                         
1246                         ;======================================================
1247                         ;MOVE TO BEGINNING OF DESIRED STRING NUMBER (IN ACCA)
1248                         ;EACH STRING IS TERMINATED BY AN END OF STRING CHARACTER (IN ACCB)
1249                         ;THE INDEX REGISTER IS ASSUMED INITIALIZED POINTING TO
1250                         ;ONE LESS THAT THE FIRST CHARACTER OF THE FIRST STRING
1251                         ;ACCA, ACCB & IX ARE NOT PRESERVED
1252                         ;LOCAL VARIABLES
1253                         ;STRNUM - STRING # TO FIND
1254                         ;EOSCHR - "END OF STRING" CHARACTER
1255                         
1256 f71a b7 7f c7           FNDSTR STA    STRNUM   ;SAVE STRING NUMBER
1257 f71d f7 7f c8                  STB    EOSCHR   ;SAVE TERMINATOR
1258 f720 5f                        CLRB
1259 f721 5c                 FNDST1 INCB            ;STRING 1 IS THE FIRST STRING
1260 f722 f1 7f c7                  CMPB   STRNUM   ;IS THIS THE RIGHT STRING?
1261 f725 27 0b                     BEQ    FNDST3   ;IF SO, DONE
1262                         
1263                         ;NO, SWALLOW UP CHARACTERS UNTIL AND END OF STRING CHAR IS HIT
1264 f727 30 01              FNDST2 LEAX   1,X      ;BUMP POINTER TO NEXT ONE
1265 f729 a6 84                     LDA    ,X       ;GET CHAR POINTED AT
1266 f72b b1 7f c8                  CMPA   EOSCHR   ;END OF STRING HIT?
1267 f72e 27 f1                     BEQ    FNDST1   ;IF IT IS, BUMP THE STRING COUNTER
1268 f730 20 f5                     BRA    FNDST2   ;NO, MOVE ON TO NEXT CHAR
1269 f732 39                 FNDST3 RTS             ;IX SET PROPERLY, RETURN
1270                         
1271                         ;======================================================
1272                         ;SKIP LEADING DELIMITERS
1273                         ;THIS ROUTINE SHOULD BE CALLED PRIOR TO SCANNING FOR ANY INFORMATION
1274                         ;ON THE INPUT LINE
1275                         ;THE CURRENT CHARACTER IS IGNORED IF THE SCANNING POINTER IS AT THE
1276                         ;BEGINNING OF A LINE.  IF NOT, THE SCANNING POINTER SKIPS OVER SPACES
1277                         ;AND COMMAS UNTIL AN END OF LINE OR NON-DELIMITER IS FOUND.
1278                         ;THE CARRY BIT IS SET IF AN END OF LINE IS ENCOUNTERED.
1279                         
1280                         ;ACCA, ACCB & IX ARE NOT PRESERVED
1281                         
1282 f733 1c fe              SKPDLM ANDCC  #$FE     ;CLC
1283 f735 7d 7f 16                  TST    BOLFLG   ;AT BEGINNING OF LINE?
1284 f738 2e 0c                     BGT    SKPDL2
1285                         
1286                         ;LOOK AT CURRENT INPUT CHARACTER
1287 f73a be 7f 12           SKPDL1 LDX    SYNPTR   ;GET POINTER TO IT
1288 f73d a6 84                     LDA    ,X       ;GET CHAR
1289 f73f 8d 14                     BSR    TSTEOL   ;TEST FOR END OF LINE
1290 f741 26 03                     BNE    SKPDL2
1291 f743 1a 01                     ORCC   #$01     ;SEC YES, END HIT, SET CARRY
1292 f745 39                        RTS
1293                         ;"PEEK" AT NEXT CHAR IN LINE
1294 f746 e6 01              SKPDL2 LDB    1,X     ;GET IT
1295 f748 8d 16                     BSR    TSTDLM  ;SEE IF ITS A DELIMITER
1296 f74a 26 01                     BNE    SKPDL3
1297 f74c 39                        RTS            ;ITS NOT, RETURN
1298                         
1299                         ;NEXT CHAR IS A DELIMITER
1300 f74d bd f9 97           SKPDL3 JSR    GETCHR   ;MOVE TO NEXT CHAR IN INPUT LINE
1301 f750 bf 7f 12                  STX    SYNPTR   ;UPDATE SYNTAX POINTER
1302 f753 20 e5                     BRA    SKPDL1   ;GO TEST FOR END OF LINE
1303                         
1304                         ;======================================================
1305                         ;TEST FOR END-OF-LINE CHARACTER
1306                         ;Z BIT OF CC REG SET IF CHAR IN ACCA IS A TERMINATOR
1307                         ;ACCA, ACCB, & IX ARE PRESERVED
1308 f755 81 0d              TSTEOL CMPA   #CR      ;CARRIAGE RETURN?
1309 f757 27 06                     BEQ    TSTEO1
1310 f759 81 0a                     CMPA   #LF      ;LINE FEED? (CONTINUED LINES)
1311 f75b 27 02                     BEQ     TSTEO1
1312 f75d 81 3b                     CMPA    #';'    ;FOR SEVERAL COMMANDS ON ONE LINE
1313 f75f 39                 TSTEO1 RTS
1314                         
1315                         ;======================================================
1316                         ;CHECK THE CHARACTER IN ACCB
1317                         ;AGAINST THE DELIMITER(S) SPECIFIED BY VARIABLE DELIM
1318                         ;ACCB & IX ARE PRESERVED
1319                         ;ACCA IS SET TO 0 IF ACCB IS NOT A DELIMITER, TO 1 IF IT IS
1320                         ;  IF DELIM=1, SPACE IS DELIMITER
1321                         ;  IF DELIM-2, COMMA IS DELIMITER
1322                         ;  IF DELIM=3, SPACE OR COMMAND IS DELIMITER
1323                         ;  IF DELIM=4, ANY NON-ALPHANUMERIC IS A DELIMITER
1324                         ;TEST FOR END-OF-LINE (LOGICAL OR PHYSICAL)
1325 f760 34 04              TSTDLM PSHS   B
1326 f762 1f 98                     TFR    B,A
1327 f764 8d ef                     BSR    TSTEOL
1328 f766 35 04                     PULS   B
1329 f768 27 35                     BEQ    DLMYES
1330                         
1331 f76a b6 7f 17                  LDA    DELIM
1332 f76d 81 01                     CMPA   #1
1333 f76f 26 06                     BNE    ISDLM2
1334 f771 c1 20                     CMPB   #32      ;WANT A SPACE - IS IT?
1335 f773 26 2d                     BNE    DLMNO
1336 f775 20 28                     BRA    DLMYES
1337                         
1338 f777 81 02              ISDLM2 CMPA   #2
1339 f779 26 06                     BNE    ISDLM3
1340 f77b c1 2c              TSTCMA CMPB   #','     ;WANT A COMMA - IS IT?
1341 f77d 26 23                     BNE    DLMNO
1342 f77f 20 1e                     BRA    DLMYES
1343 f781 81 03              ISDLM3 CMPA   #3
1344 f783 26 06                     BNE    ISDLM4
1345 f785 c1 20                     CMPB   #32      ;WANT EITHER, IS IT A SPACE?
1346 f787 27 16                     BEQ    DLMYES
1347 f789 20 f0                     BRA    TSTCMA   ;OR A COMMA?
1348                         
1349 f78b 81 04              ISDLM4 CMPA   #4
1350 f78d 26 15                     BNE    ERROR    ;ERROR IF DELIM NOT 1-4
1351                         ;TEST IF CHAR IS 0 TO 9 INCLUSIVE
1352 f78f c1 30                     CMPB   #'0'
1353 f791 2d 0c                     BLT    DLMYES
1354 f793 c1 39                     CMPB   #'9'
1355 f795 2f 0b                     BLE    DLMNO
1356                         
1357                         ;TEST IF CHAR IS A TO 9 INCLUSIVE
1358 f797 c1 41                     CMPB   #'A'
1359 f799 2d 04                     BLT    DLMYES
1360 f79b c1 5a                     CMPB   #'Z'
1361 f79d 2f 03                     BLE    DLMNO
1362                         ;OVER Z - ITS A DELIMITER
1363                         
1364                         ;CHAR IN ACCB IS A DELIMITER
1365 f79f 86 01              DLMYES LDA    #1
1366 f7a1 39                        RTS
1367                         
1368                         ;CHAR IN ACCB IS NOT A DELIMITER
1369 f7a2 4f                 DLMNO  CLRA
1370 f7a3 39                        RTS
1371                         
1372                         ;ERROR IN SPECIFYING DELIMITER CLASS
1373 f7a4 3f                 ERROR  SWI             ;HAVE MONITOR TYPE OUT PERTINENT STATISTICS
1374                         
1375                         ;=====================================================
1376                         ;ADD THE 2 BYE NUMBER STORED IN (RANGLO,RANGLO+1) TO THE NUMBER
1377                         ;STORED IN (NBRHI,NBRLO) AND PUT THE RESULT IN (RANGHI,RANGHI+1)
1378                         ;ACCB & IX ARE PRESERVED
1379                         ;ACCA IS ALTERED
1380                         
1381                         ;ADD LO ORDER BYTES
1382 f7a5 b6 7f 1e           SUMNUM LDA    RANGLO+1
1383 f7a8 bb 7f 1c                  ADDA   NBRLO
1384 f7ab b7 7f 20                  STA    RANGHI+1
1385                         
1386                         ;ADD HI ORDER BYTES
1387 f7ae b6 7f 1d                  LDA    RANGLO
1388 f7b1 b9 7f 1b                  ADCA   NBRHI
1389 f7b4 b7 7f 1f                  STA    RANGHI
1390 f7b7 39                        RTS
1391                         
1392                         ;========================================================
1393                         ;SUBTRACT THE TWO BYTE NUMBER STORED IN (NBRHI,NBRLO) FROM THE
1394                         ;TWO BYTE NUMBER STORED IN (RANGLO,RANGLO+1) AND PUT THE
1395                         ;RESULT IN (RANGHI,RANGHI+1)
1396                         ;ACCB & IX ARE PRESERVED
1397                         ;ACCA IS ALTERED
1398                         
1399                         ;SUBTRACT LO ORDER BYTES
1400 f7b8 b6 7f 1e           DIFNUM LDA    RANGLO+1
1401 f7bb b0 7f 1c                  SUBA   NBRLO
1402 f7be b7 7f 20                  STA    RANGHI+1
1403                         
1404                         ;SUBTRACT HI ORDER BYES
1405 f7c1 b6 7f 1d                  LDA    RANGLO
1406 f7c4 b2 7f 1b                  SBCA   NBRHI
1407 f7c7 b7 7f 1f                  STA    RANGHI
1408 f7ca 39                        RTS
1409                         
1410                         ;======================================================
1411                         ;THIS ROUTINE SCANS THE INPUT LINE FOR A PAIR OF NUMBERS
1412                         ;REPRESENTING AN ADDRESS RANGE.  A COLON SEPARATING THE
1413                         ;PAIR IMPLIES "THRU", WHILE AN "!" IMPLIED "THRU THE FOLLOWING"
1414                         ;E.G., 100:105 IS EQUIVALENT TO 100!5
1415                         ;A SINGLE NUMBER IMPLIES A RANGE OF 1
1416                         ;
1417                         ;ON RETURN (RANGLO,RANGLO+1) HOLDS THE RANGE START, AND
1418                         ;          (RANGHI,RANGHI+1) HOLDS THE RANGE END.
1419                         ;ACCA, ACCB, & IX ARE NOT PRESERVED
1420                         
1421 f7cb 8d 49              GTRANG BSR    NUMBER   ;PICK UP FIRST NUMBER
1422 f7cd 2e 03                     BGT    GTRAN1
1423 f7cf 2d 09                     BLT    GTRAN2
1424 f7d1 39                        RTS             ;NOTHING MORE ON INPUT LINE
1425                         
1426                         ;GOOD SINGLE NUMBER - TRANSFER IT TO RANGLO
1427 f7d2 be 7f 1b           GTRAN1 LDX    NBRHI
1428 f7d5 bf 7f 1d                  STX    RANGLO
1429 f7d8 20 0d                     BRA    GTRAN3   ;AND TO RANGHI
1430                         
1431                         ;BAD NUMBER, BUT IS IT BAD DUE TO A ":" OR "!" DELIMITER?
1432 f7da be 7f 14           GTRAN2 LDX    LINPTR
1433 f7dd a6 84                     LDA    ,X
1434 f7df 81 3a                     CMPA   #':'     ;WAS IT A COLON
1435 f7e1 26 0c                     BNE    GTRAN4   ;IF NOT, GO TEST FOR "!"
1436                         
1437 f7e3 8d 1a                     BSR    GTRAN8   ;WAS ":", PROCESS NUMBER & GET NEXT ONE
1438 f7e5 2f 0e                     BLE    GTRAN5   ;ILLEGAL IF END OF LINE OR NON-NUMERIC
1439                         
1440                         ;TRANSFER SECOND NUMBER TO RANGHI
1441 f7e7 be 7f 1b           GTRAN3 LDX    NBRHI
1442 f7ea bf 7f 1f                  STX    RANGHI
1443 f7ed 20 0d                     BRA    GTRAN7
1444                         
1445 f7ef 81 21              GTRAN4 CMPA   #'!'     ;WAS DELIMITER A "!"?
1446 f7f1 27 03                     BEQ    GTRAN6   ;IF YES, GET 2ND NUMBER
1447                         
1448                         ;ILLEGAL DELIMITER, RETURN
1449 f7f3 4f                        CLRA
1450 f7f4 4a                        DECA
1451 f7f5 39                 GTRAN5 RTS
1452                         
1453 f7f6 8d 07              GTRAN6 BSR    GTRAN8   ;WAS "!", PROCESS FIRST NUMBER & GET NEXT ONE
1454 f7f8 2f fb                     BLE    GTRAN5
1455 f7fa 8d a9                     BSR    SUMNUM   ;COMPUTE RANGE END, PUT INTO RANGHI
1456                         
1457                         ;SUCCESSFUL EXIT
1458 f7fc 86 01              GTRAN7 LDA    #1
1459 f7fe 39                        RTS
1460                         
1461                         ;UPDATE SYNTAX POINTER, MOVE FIRST NUMBER TO RANGLO, & GET 2ND NUMBER
1462 f7ff bf 7f 12           GTRAN8 STX    SYNPTR   ;UPDATE SYNTAX POINTER
1463 f802 be 7f 1b                  LDX    NBRHI    ;GET FIRST NUMBER OF THE PAIR
1464 f805 bf 7f 1d                  STX    RANGLO   ;SAVE IT IN "LOW RANGE" VALUE
1465 f808 8d 0c                     BSR    NUMBER   ;PICK UP THE SECOND NUMBER OF THE PAIR
1466 f80a 39                        RTS
1467                         
1468                         ;======================================================
1469                         ;GET A 2 BYTE NUMBER & RETURN IT IN THE INDEX REGISTER
1470 f80b 8d 09              NUMINX BSR    NUMBER
1471 f80d 2e 03                     BGT    NUMIN1
1472 f80f 7e f0 59                  JMP    BADSYN
1473 f812 be 7f 1b           NUMIN1 LDX    NBRHI
1474 f815 39                        RTS
1475                         
1476                         ;======================================================
1477                         ;SCAN FOR A NUMBER
1478                         ;RETURN THE MOST SIGNIFICANT BYTE IN NBRHI
1479                         ;  AND THE LEAST SIGNIFICANT BYTE IN NBRLO
1480                         ;THE RESULT OF THE SCAN FOR A NUMBER IF RETURNED IN
1481                         ;ACCA AS FOLLOWS:
1482                         ;
1483                         ;      ACCA=-1: THE MATCH WAS UNSUCCESSFUL.  THE SYNTAX
1484                         ;               POINTER (SYNPTR) WAS NOT UPDATED.
1485                         ;
1486                         ;      ACCA= 0: THE MATCH WAS UNSUCCESSFUL SINCE THERE WERE NO
1487                         ;               MORE CHARACTERS. (I.E., THE END OF THE
1488                         ;               LINE WAS ENCOUNTERED.)
1489                         ;
1490                         ;      ACCA=+1: THE SCAN WAS SUCCESSFUL.  THE SYNTAX POINTER
1491                         ;               WAS UPDATED TO THE FIRST CHARACTER FOLLOWING
1492                         ;               THE COMMAND.
1493                         
1494                         ;IX IS PRESERVED
1495                         ;GLOBAL VARIABLES FOR EXTERNAL COMMUNICATION
1496                         ;NBRHI - NUMBER HI BYTE
1497                         ;NBRLO - NUMBER LO BYTE
1498                         ;IBCODE - INPUT BASE CODE
1499                         ;DBCODE - DISPLAY BASE CODE
1500                         
1501                         ;LOCAL VARIABLES
1502                         ;NBR2X - USED IN DECIMAL CONVERSION
1503                         ;XTEMP2 - SAVES IX
1504                         
1505                         ;INITIALIZE BOTH BYTES TO ZERO
1506 f816 bf 7f df           NUMBER STX    XTEMP2   ;SAVE IX
1507 f819 7f 7f 1b                  CLR    NBRHI
1508 f81c 7f 7f 1c                  CLR    NBRLO
1509                         
1510                         ;INITIALIZE THE LINE SCANNING POINTER
1511 f81f be 7f 12                  LDX    SYNPTR
1512 f822 bf 7f 14                  STX    LINPTR
1513                         
1514                         ;ARE WE AT END OF LINE?
1515 f825 bd f7 33                  JSR    SKPDLM
1516 f828 24 05                     BCC    NUMLUP
1517 f82a be 7f df                  LDX    XTEMP2
1518 f82d 4f                        CLRA            ;YES, ZERO ACCA
1519 f82e 39                        RTS
1520                         
1521 f82f bd f9 97           NUMLUP JSR    GETCHR   ;GET A CHARACTER FROM THE INPUT LINE INTO ACCB
1522                         
1523                         ;TEST FOR A DELIMITER
1524 f832 bd f7 60                  JSR    TSTDLM
1525 f835 26 65                     BNE    GUDNUM   ;GOOD DELIMITER IF ACCA NON-ZERO
1526                         
1527                         ;NOT A DELIMITER, TEST IF CHARACTER IS < ASCII 0
1528 f837 c0 30                     SUBB   #'0'     ;SUBTRACT ASCII 0
1529 f839 2b 6d                     BMI    CONERR   ;ERROR IF LESS
1530                         
1531                         ;DETERMINE INPUT BASE & GO TO RIGHT ROUTINE
1532 f83b b6 7f 18                  LDA    IBCODE
1533 f83e 81 01                     CMPA   #1
1534 f840 27 08                     BEQ    HEXNUM
1535                         
1536 f842 81 02                     CMPA   #2
1537 f844 27 1e                     BEQ    DECNUM
1538                         
1539 f846 81 03                     CMPA   #3
1540 f848 27 41                     BEQ    OCTNUM
1541                         
1542                         ;DEFAULT AN ILLEGAL INPUT BASE TO HEX
1543                         ;*****
1544                         ;INPUT A HEX NUMBER
1545                         ;TEST FOR A LEGAL DIGIT
1546 f84a c1 09              HEXNUM CMPB   #$09
1547 f84c 2f 0a                     BLE    HEXN1    ;OR IF 9 OR LESS
1548 f84e c1 11                     CMPB   #$11
1549 f850 2b 56                     BMI    CONERR    ;NOT HEX IF < A
1550 f852 c1 16                     CMPB   #$16
1551 f854 2e 52                     BGT    CONERR    ;NOT HEX IF > F
1552 f856 c0 07                     SUBB   #7        ;MOVE A-F ABOVE 0-9
1553                         
1554                         ;SHIFT LO & HI BYTES LEFT 4 BITS
1555 f858 8d 54              HEXN1  BSR    SHIFT2
1556 f85a 8d 52                     BSR    SHIFT2
1557                         
1558 f85c fa 7f 1c                  ORB    NBRLO
1559 f85f f7 7f 1c                  STB    NBRLO
1560                         
1561 f862 20 cb                     BRA    NUMLUP
1562                         
1563                         ;*****
1564                         ;INPUT A DECIMAL NUMBER
1565                         ;TEST FOR A LEGAL DIGIT
1566 f864 c1 09              DECNUM CMPB   #$09
1567 f866 2e 40                     BGT    CONERR   ;NOT DECIMAL IF > 9
1568                         
1569                         ;MULTIPLE SAVED VALUE BY 10 & ADD IN NEW DIGIT
1570                         ;NOTE THAT 10X=2X+8x
1571                         ;MULTIPLY CURRENT NUMBER BY 2 TO GET 2X VALUE
1572 f868 8d 49                     BSR    SHIFT
1573                         ;SAVE THIS *2 NUMBER TEMPORARILY
1574 f86a be 7f 1b                  LDX    NBRHI
1575 f86d bf 7f e9                  STX    NBR2X
1576                         ;MULTIPLY THIS # BY 4 TO GET 8X VALUE
1577 f870 8d 3c                     BSR    SHIFT2
1578                         ;(NBRHI,NBRLO) NOW HOLDS *8
1579                         ;GENERATE DIGIT+8x+2x
1580 f872 4f                        CLRA            ;ACCA WILL HOLD MS BYTE
1581 f873 fb 7f ea                  ADDB   NBR2X+1  ;ADD 2X LS BYTE TO DIGIT
1582 f876 b9 7f e9                  ADCA   NBR2X    ;ADD 2X MS BYTE
1583 f879 25 2d                     BCS    CONERR   ;CARRY OUT OF MS BYTE IS AN ERROR
1584 f87b fb 7f 1c                  ADDB   NBRLO    ;ADD 8X LS BYTE
1585 f87e b9 7f 1b                  ADCA   NBRHI    ;ADD 8X MS BYTE
1586 f881 25 25                     BCS    CONERR   ;CARRY OUT OF MS BYTE IS AN ERROR
1587 f883 f7 7f 1c                  STB    NBRLO    ;SAVE FINAL LS BYTE
1588 f886 b7 7f 1b                  STA    NBRHI    ;SAVE FINAL MS BYTE
1589                         
1590 f889 20 a4                     BRA    NUMLUP
1591                         ;*****
1592                         ;INPUT AN OCTAL NUMBER
1593 f88b c1 07              OCTNUM CMPB   #$07
1594 f88d 2e 19                     BGT    CONERR   ;NOT OCTAL IF > 7
1595                         
1596                         ;SHIFT HI & LO BYTES 2 PLACES LEFT - CARRY OUT OF HI BYTE IS ILLEGAL
1597 f88f 8d 1d                     BSR    SHIFT2
1598 f891 8d 20                     BSR    SHIFT
1599                         
1600 f893 fa 7f 1c                  ORB    NBRLO    ;ADD IN NEW DIGIT
1601 f896 f7 7f 1c                  STB    NBRLO
1602                         
1603 f899 7e f8 2f                  JMP    NUMLUP
1604                         
1605                         ;*****
1606                         ;GOOD NUMBER - SCAN WAS SUCCESSFUL
1607                         ;UPDATE GOOD SYNTAX LINE POINTER
1608 f89c be 7f 14           GUDNUM LDX    LINPTR
1609 f89f bf 7f 12                  STX    SYNPTR
1610 f8a2 be 7f df                  LDX    XTEMP2
1611 f8a5 86 01                     LDA    #1       ;SET "GOOD SCAN" FLAG
1612 f8a7 39                        RTS
1613                         
1614                         ;*****
1615                         ;CONVERSION ERROR - SCAN WAS UNSUCCESSFUL
1616 f8a8 be 7f df           CONERR LDX    XTEMP2
1617 f8ab 4f                        CLRA
1618 f8ac 4a                        DECA
1619 f8ad 39                        RTS
1620                         ;----------------------------------
1621                         ;SHIFT LEFT 2 POSITIONS
1622 f8ae 8d 03              SHIFT2 BSR    SHIFT
1623 f8b0 8d 01                     BSR    SHIFT
1624 f8b2 39                        RTS
1625                         ;----------------------------------
1626                         ;SHIFT A TWO BYTE NUMBER LEFT ONE POSITION
1627 f8b3 78 7f 1c           SHIFT  ASL    NBRLO
1628 f8b6 79 7f 1b                  ROL    NBRHI
1629 f8b9 25 01                     BCS    SHFTER
1630 f8bb 39                        RTS
1631                         ;ERROR - HI ORDER BYTE OVERFLOW
1632                         ;ABORT NUMBER ROUTINE DIRECTLY THRU STACK ADJ. & A JUMP
1633 f8bc 32 62              SHFTER LEAS   2,S
1634 f8be 20 e8                     BRA    CONERR
1635                         
1636                         ;======================================================
1637                         ;OUTPUT A SPACE
1638 f8c0 86 20              OUTSP  LDA    #$20
1639 f8c2 bd fb 80                  JSR    OUTCHR
1640 f8c5 39                        RTS
1641                         
1642                         ;======================================================
1643                         ;OUTPUT AN "=" SIGN
1644 f8c6 86 3d              OUTEQ  LDA    #'='
1645 f8c8 bd fb 80                  JSR    OUTCHR
1646 f8cb 39                        RTS
1647                         
1648                         ;======================================================
1649                         ;OUTPUT A 1 BYTE NUMBER
1650                         ;ACCA, ACCB, & IX ARE PRESERVED
1651 f8cc 34 04              OUT1BY PSHS   B
1652 f8ce c6 01                     LDB    #1
1653 f8d0 8d 0c                     BSR    OUTNUM
1654 f8d2 35 04                     PULS   B
1655 f8d4 39                        RTS
1656                         
1657                         ;======================================================
1658                         ;OUTPUT A 2 BYTE NUMBER
1659                         ;ACCA, ACCB, & IX ARE PRESERVED
1660 f8d5 34 04              OUT2BY PSHS   B
1661 f8d7 c6 02                     LDB    #2
1662 f8d9 8d 03                     BSR    OUTNUM
1663 f8db 35 04                     PULS   B
1664 f8dd 39                        RTS
1665                         
1666                         ;======================================================
1667                         ;DISPLAY THE NUMBER POINTED AT BY THE ADDRESS IN THE INDEX REGISTER
1668                         ;AND OUTPUT IT ACCORDING TO THE BASE SPECIFIED IN "DBCODE"
1669                         ;LEADING ZEROES ARE INCLUDED
1670                         ;ACCA & IX ARE PRESERVED
1671                         ;ACCB IS INPUT AS THE NUMBER OF BYTES COMPRISING THE NUMBER
1672                         ;GLOBAL VARIABLES FOR EXTERNAL COMMUNICATION
1673                         ;IBCODE - INPUT BASE CODE
1674                         ;DBCODE - DISPLAY BASE CODE
1675                         
1676                         ;LOCAL VARIABLES
1677                         ;DECDIG - DECIMAL DIGIT BEING BUILT
1678                         ;NUMBHI - HI BYTE OF NUMBER BEING OUTPUT
1679                         ;NUMBLO - LO BYTE OF NUMBER BEING OUTPUT
1680                         
1681 f8de bf 7f dd           OUTNUM STX    XTEMP1
1682 f8e1 34 02                     PSHS   A
1683 f8e3 ae 84                     LDX    ,X       ;GET THE TO BYTES AT THAT ADDRESS
1684 f8e5 bf 7f e7                  STX    NUMBHI   ;PUT THEM IN A SCRATCH AREA FOR PROCESSING
1685 f8e8 b6 7f 19                  LDA    DBCODE   ;GET DISPLAY BASE
1686                         
1687 f8eb 81 01                     CMPA   #1
1688 f8ed 27 0c                     BEQ    OUTHEX
1689 f8ef 81 02                     CMPA   #2
1690 f8f1 27 1e                     BEQ    OUTDEC
1691 f8f3 81 03                     CMPA   #3
1692 f8f5 27 61                     BEQ    OUTOCT
1693 f8f7 81 04                     CMPA   #4
1694 f8f9 27 7b                     BEQ    OUTBIN
1695                         
1696                         ;*****
1697                         ;OUTPUT A HEX NUMBER
1698 f8fb 58                 OUTHEX ASLB            ;1 BYTE=2 CHARS, 2 BYTES=4 CHARS
1699                         ;GET NEXT 4 BITS
1700 f8fc bd f9 8a           DISNU1 JSR    LSH2
1701 f8ff bd f9 8a                  JSR    LSH2
1702                         
1703 f902 84 0f                     ANDA   #$F      ;EXTRACT 4 BITS
1704 f904 81 09                     CMPA   #9
1705 f906 2f 02                     BLE    DISNU2
1706 f908 8b 07                     ADDA   #7       ;CONVERT 10:15 TO A:F
1707                         
1708 f90a 8d 78              DISNU2 BSR    OUTIT
1709 f90c 5a                        DECB
1710 f90d 26 ed                     BNE    DISNU1
1711 f90f 20 37                     BRA    OUTDE5
1712                         
1713                         ;*****
1714                         ;OUTPUT A DECIMAL NUMBER
1715 f911 5a                 OUTDEC DECB            ;TEST # OF BYTES TO OUTPUT
1716 f912 27 0b                     BEQ    OUTDE1
1717                         ;INITIALIZE FOR OUTPUT OF A 2 BYTE NUMBER
1718 f914 8e f9 4e                  LDX    #C10K
1719 f917 b6 7f e7                  LDA    NUMBHI
1720 f91a f6 7f e8                  LDB    NUMBLO
1721 f91d 20 07                     BRA    OUTDE2
1722                         
1723                         ;INITIALIZE FOR OUTPUT OF A 1 BYTE NUMBER
1724 f91f 8e f9 52           OUTDE1 LDX    #C100
1725 f922 4f                        CLRA
1726 f923 f6 7f e7                  LDB    NUMBHI
1727                         
1728 f926 7f 7f e6           OUTDE2 CLR    DECDIG   ;CLEAR THE DIGIT TO OUTPUT
1729                         
1730                         ;SUBTRACT THE POWER OF 10 CONVERSION CONSTANT
1731 f929 e0 01              OUTDE3 SUBB   1,X
1732 f92b a2 84                     SBCA   0,X
1733 f92d 25 05                     BCS    OUTDE4   ;TEST FOR BORROW (CARRY)
1734                         
1735 f92f 7c 7f e6                  INC    DECDIG   ;NO BORROW YET - INC DIGIT BEING BUILT
1736 f932 20 f5                     BRA    OUTDE3   ;REPEAT LOOP
1737                         ;BORROW GENERATED - CANCEL LAST SUBTRACTION
1738 f934 eb 01              OUTDE4 ADDB   1,X
1739 f936 a9 84                     ADCA   0,X
1740                         
1741                         ;BUILDING OF DIGIT TO OUTPUT COMPLETE - PRINT IT
1742 f938 34 02                     PSHS   A        ;SAVE LO BYTE OF NUMBER BEING OUTPUT
1743 f93a b6 7f e6                  LDA    DECDIG   ;GET DIGIT
1744 f93d 8d 45                     BSR    OUTIT    ;PRINT IT
1745 f93f 35 02                     PULS   A        ;RESTORE LO BYTE
1746                         ;GET NEXT LOWER POWER OF 10
1747 f941 30 02                     LEAX   2,X
1748 f943 8c f9 58                  CPX    #C10K+10 ;ARE WE THRU WITH UNITS CONVERSION?
1749 f946 26 de                     BNE    OUTDE2   ;IF NOT, BACK TO GET NEXT DIGIT
1750 f948 35 02              OUTDE5 PULS   A        ;IF YES, RESTORE REGISTERS & RETURN
1751 f94a be 7f dd                  LDX    XTEMP1
1752 f94d 39                        RTS
1753                         
1754                         ;DECIMAL OUTPUT CONVERSION CONSTANTS
1755 f94e 27 10              C10K   FDB    10000
1756 f950 03 e8                     FDB    1000
1757 f952 00 64              C100   FDB    100
1758 f954 00 0a                     FDB    10
1759 f956 00 01                     FDB    1
1760                         
1761                         ;*****
1762                         ;OUTPUT AN OCTAL NUMBER
1763                         ;FIRST DIGIT IS A ONE OR A ZERO
1764 f958 58                 OUTOCT ASLB            ;FIRST APPROXIMATION OF # OF DIGITS TO OUTPUT
1765 f959 4f                        CLRA
1766 f95a c1 02                     CMPB   #2
1767 f95c 2e 06                     BGT    OUTOC1
1768 f95e 8d 2a                     BSR    LSH2     ;1 BYTE - GET FIRST 2 BITS
1769 f960 8d 22                     BSR    OUTIT
1770 f962 20 05                     BRA    DISNU3   ;GO OUTPUT LAST 2 DIGITS
1771                         ;TWO BYTE # - OUTPUT HI ORDER BIT/DIGIT
1772 f964 8d 29              OUTOC1 BSR    LEFSHF
1773 f966 8d 1c                     BSR    OUTIT
1774 f968 5c                        INCB           ;5 MORE DIGITS TO GO
1775                         ;GET NEXT 3 BITS
1776 f969 8d 1f              DISNU3 BSR    LSH2
1777 f96b 8d 22                     BSR    LEFSHF
1778                         
1779 f96d 84 07                     ANDA   #7      ;EXTRACT 3 BITS
1780 f96f 8d 13                     BSR    OUTIT
1781 f971 5a                        DECB           ;COUNT THIS DIGIT
1782 f972 26 f5                     BNE    DISNU3  ;ARE WE DONE?
1783 f974 20 d2                     BRA    OUTDE5  ;YES
1784                         ;*****
1785                         ;OUTPUT A BINARY NUMBER
1786 f976 58                 OUTBIN ASLB
1787 f977 58                        ASLB
1788 f978 58                        ASLB
1789                         ;GET NEXT BIT
1790 f979 8d 14              DISNU4 BSR    LEFSHF
1791 f97b 84 01                     ANDA   #1       ;EXTRACT THE BIT
1792                         
1793 f97d 8d 05                     BSR    OUTIT    ;OUTPUT IT
1794 f97f 5a                        DECB            ;COUNT IT
1795 f980 26 f7                     BNE    DISNU4   ;ARE WE DONE?
1796 f982 20 c4                     BRA    OUTDE5   ;YES
1797                         
1798                         ;**
1799                         ;CONVERT TO A NUMERIC ASCII DIGIT & OUTPUT IT
1800 f984 8b 30              OUTIT  ADDA   #$30
1801 f986 bd fb 80                  JSR    OUTCHR
1802 f989 39                        RTS
1803                         ;**
1804                         ;LEFT SHIFT 2 BITS
1805 f98a 8d 03              LSH2   BSR    LEFSHF
1806 f98c 8d 01                     BSR    LEFSHF
1807 f98e 39                        RTS
1808                         
1809                         ;**
1810                         ;LEFT SHIFT THE 3 BYTE NUMBER 1 BIT
1811 f98f 78 7f e8           LEFSHF ASL    NUMBLO
1812 f992 79 7f e7                  ROL    NUMBHI
1813 f995 49                        ROLA
1814 f996 39                        RTS
1815                         
1816                         ;======================================================
1817                         ;THIS ROUTINE GETS THE NEXT CHARACTER FROM THE INPUT LINE BUFFER
1818                         ;ACCA IS PRESERVED
1819                         ;ACCB IS LOADED WITH THE CHARACTER
1820                         ;IX IS INCREMENTED & LEFT POINTING TO THE CHARACTER RETURNED
1821 f997 be 7f 14           GETCHR LDX    LINPTR
1822 f99a 30 01                     LEAX   1,X
1823 f99c e6 84                     LDB    ,X
1824 f99e bf 7f 14                  STX    LINPTR
1825 f9a1 7f 7f 16                  CLR    BOLFLG   ;SET FLAG TO NOT AT "BEGINNING OF LINE"
1826 f9a4 39                        RTS
1827                         
1828                         ;======================================================
1829                         ;THIS ROUTINE GETS THE NEXT CHARACTER IN THE COMMAND LISTS
1830                         ;ACCA IS THE CHARACTER RETRIEVED
1831                         ;ACCB IS PRESERVED
1832                         ;IX IS INCREMENTED & LEFT POINTING TO THE CHARACTER RETURNED
1833 f9a5 be 7f e4           GETLST LDX    LISPTR   ;GET CURRENT LIST POINTER
1834 f9a8 30 01                     LEAX   1,X      ;MOVE POINTER TO NEXT CHAR
1835 f9aa a6 84                     LDA    ,X       ;GET CHARACTER POINTED AT
1836 f9ac bf 7f e4                  STX    LISPTR   ;SAVE POINTER
1837 f9af 39                        RTS             ;AND RETURN
1838                         
1839                         ;======================================================
1840                         ; COMMAND LISTS
1841                         ;  A CARRIAGE RETURN SIGNIFIES END-OF-COMMAND
1842                         ;  A LINE FEED SIGNIFIES END-OF-COMMAND-LST
1843                         ;LIST 1 - MAJOR COMMANDS
1844 f9b0                    COMLST EQU    *
1845 f9b0 52 45 47                  FCC    "REG"    ; DISPLAY REGISTERS
1846 f9b3 0d                        FCB    CR
1847 f9b4 47 4f 54 4f               FCC    "GOTO"   ;GO TO MEMORY ADDRESS
1848 f9b8 0d                        FCB    CR
1849 f9b9 53 45 49                  FCC    "SEI"    ;SET INTERRUPT MASK
1850 f9bc 0d                        FCB    CR
1851 f9bd 43 4c 49                  FCC    "CLI"    ; CLEAR INTERRUPT MAST
1852 f9c0 0d                        FCB    CR
1853 f9c1 43 4f 50 59               FCC    "COPY"   ;COPY FROM ONE LOCATION TO ANOTHER
1854 f9c5 0d                        FCB    CR
1855 f9c6 42 52 45 41 4b            FCC    "BREAK"  ;SET BREAKPOINT (SWI CODE)
1856 f9cb 0d                        FCB    CR
1857 f9cc 49 42 41 53 45            FCC    "IBASE"  ;SET INPUT BASE
1858 f9d1 0d                        FCB    CR
1859 f9d2 44 42 41 53 45            FCC    "DBASE"  ;SET DISPLAY BASE
1860 f9d7 0d                        FCB    CR
1861 f9d8 43 4f 4e 54 49 4e         FCC    "CONTINUE" ;CONTINUE FROM "SWI"
     55 45
1862 f9e0 0d                        FCB    CR
1863 f9e1 44 49 53 50 4c 41         FCC    "DISPLAY" ;DISPLAY MEMORY DATA
     59
1864 f9e8 0d                        FCB    CR
1865 f9e9 53 45 54                  FCC    "SET"    ;SET MEMORY DATA
1866 f9ec 0d                        FCB    CR
1867 f9ed 56 45 52 49 46 59         FCC    "VERIFY" ;VERIFY THAT MEMORY CONTENT IS UNCHANGED
1868 f9f3 0d                        FCB    CR
1869 f9f4 53 45 41 52 43 48         FCC    "SEARCH" ;SEARCH MEMORY FOR A BYTE STRING
1870 f9fa 0d                        FCB    CR
1871 f9fb 54 45 53 54               FCC    "TEST"   ;TEST A RANGE OF MEMORY
1872 f9ff 0d                        FCB    CR
1873 fa00 49 4e 54                  FCC    "INT"    ;SET INTERRUPT POINTER
1874 fa03 0d                        FCB    CR
1875 fa04 4e 4d 49                  FCC    "NMI"    ;SET NON-MASKABLE INTERRUPT POINTER
1876 fa07 0d                        FCB    CR
1877 fa08 53 57 49                  FCC    "SWI"    ;SET SOFTWARE INTERRUPT POINTER
1878 fa0b 0d                        FCB    CR
1879 fa0c 43 4f 4d 50 41 52         FCC    "COMPARE" ;PRINT SUM & DIFFERENCE OF 2 NUMBERS
     45
1880 fa13 0d                        FCB    CR
1881 fa14 44 55 4d 50               FCC    "DUMP"   ;DUMP MEMORY IN MIKBUG OR IMAGE FORMAT
1882 fa18 0d                        FCB    CR
1883 fa19 4c 4f 41 44               FCC    "LOAD"   ;LOAD MIKBUG TAPE
1884 fa1d 0d                        FCB    CR
1885 fa1e 44 45 4c 41 59            FCC    "DELAY"  ;DELAY SPECIFIED # OF MSECS
1886 fa23 0d                        FCB    CR
1887 fa24 48 45 4c 50               FCC    "HELP"   ;HELP LISTING
1888 fa28 0d                        FCB    CR
1889 fa29 43 4c 46                  FCC    "CLF"    ;CLEAR FAST INTERRUPT MASK
1890 fa2c 0d                        FCB    CR
1891 fa2d 53 45 46                  FCC    "SEF"    ;SET FAST INTERRUPT MASK
1892 fa30 0d                        FCB    CR
1893 fa31 46 49 52 51               FCC    "FIRQ"   ;SET FAST INTERRUPT POINTER
1894 fa35 0d                        FCB    CR
1895 fa36 52 53 52 56 44            FCC    "RSRVD"  ;SET RESERVED INTERRUPT POINTER
1896 fa3b 0d                        FCB    CR
1897 fa3c 53 57 49 32               FCC    "SWI2"   ;SET SWI2 INTERRUPT POINTER
1898 fa40 0d                        FCB    CR
1899 fa41 53 57 49 33               FCC    "SWI3"   ;SET SWI3 INTERRUPT POINTER
1900 fa45 0d                        FCB    CR
1901 fa46 0a                        FCB    LF       ;END OF LIST 1
1902                         
1903                         ;LIST 2 - MODIFIER TO DUMP
1904 fa47 54 4f                     FCC    "TO"     ;DESTINATION ACIA
1905 fa49 0d                        FCB    CR
1906 fa4a 0a                        FCB    LF       ;END OF LIST 2
1907                         
1908                         ;LIST 3 - NUMBER BASE SPECIFIERS
1909 fa4b 48 45 58                  FCC    "HEX"    ;BASE 16
1910 fa4e 0d                        FCB    CR
1911 fa4f 44 45 43                  FCC    "DEC"    ;BASE 10
1912 fa52 0d                        FCB    CR
1913 fa53 4f 43 54                  FCC    "OCT"    ;BASE 8
1914 fa56 0d                        FCB    CR
1915 fa57 42 49 4e                  FCC    "BIN"    ;BASE 2
1916 fa5a 0d                        FCB    CR
1917 fa5b 0a                        FCB    LF       ;END OF LIST 3
1918                         
1919                         ;LIST 4 - INFORMATION REQUEST
1920 fa5c 3f                        FCC    "?"
1921 fa5d 0d                        FCB    CR
1922 fa5e 0a                        FCB    LF       ; END OF LIST 4
1923                         
1924                         ;LIST 5 - REGISTER NAMES
1925 fa5f 2e 43 43                  FCC    ".CC"
1926 fa62 0d                        FCB    CR
1927 fa63 2e 41                     FCC    ".A"
1928 fa65 0d                        FCB    CR
1929 fa66 2e 42                     FCC    ".B"
1930 fa68 0d                        FCB    CR
1931 fa69 2e 44 50                  FCC    ".DP"
1932 fa6c 0d                        FCB    CR
1933 fa6d 2e 58                     FCC    ".X"
1934 fa6f 0d                        FCB    CR
1935 fa70 2e 59                     FCC    ".Y"
1936 fa72 0d                        FCB    CR
1937 fa73 2e 55                     FCC    ".U"
1938 fa75 0d                        FCB    CR
1939 fa76 2e 50 43                  FCC    ".PC"
1940 fa79 0d                        FCB    CR
1941 fa7a 2e 53                     FCC    ".S"
1942 fa7c 0d                        FCB    CR
1943 fa7d 0a                        FCB    LF       ;END OF LIST 5
1944                         
1945                         ;LIST 6 - MODIFIERS TO "DISPLAY"
1946 fa7e 44 41 54 41               FCC    "DATA"
1947 fa82 0d                        FCB    CR
1948 fa83 55 53 45 44               FCC    "USED"
1949 fa87 0d                        FCB    CR
1950 fa88 0a                        FCB    LF       ;END OF LIST 6
1951                         
1952                         ;LIST 7 - MODIFIER TO "LOAD"
1953 fa89 46 52 4f 4d               FCC    "FROM"   ;SOURCE ACIA
1954 fa8d 0d                        FCB    CR
1955 fa8e 0a                        FCB    LF       ;END OF LIST 7
1956                         
1957                         ;======================================================
1958                         
1959                         ; THIS ROUTINE CONSTRUCTS A LINE OF INPUT BY GETTING ALL INPUT
1960                         ; CHARACTERS UP TO AND INCLUDING A CARRIAGE RETURN (WHICH THEN
1961                         ; DESIGNATES "END OF LINE").
1962                         ; TYPING RUBOUT WILL DELETE THE PREVIOUS CHARACTER
1963                         ; TYPING CONTROL-C WILL ABORT THE LINE
1964                         ; TYPING CONTROL-Z WILL USE THE PREVIOUS LINE
1965                         ; THE INPUT LINE IS STORED BEGINNING AT THE ADDRESS STORED IN BUFBEG
1966                         ; AND ENDING AT THE ADDRESS STORED IN BUFEND
1967                         ;ACCA, ACCB, & IX ARE NOT PRESERVED
1968                         ;
1969                         ;GLOBAL VARIABLES
1970                         ;BUFBEG - INPUT LINE START OF BUFFER
1971                         ;BUFEND - INPUT LINE END OF BUFFER
1972                         
1973                         ;LOCAL CONSTANTS
1974 005c                    BAKSLA EQU    92       ;A BACKSLASH
1975 0008                    DELETE EQU    8        ;CODE TO DELETE THE PREVIOUS CHARACTER (BACKSPACE)
1976                         ;
1977                         ;
1978                         ;*** ROUTINE ENTRY POINT
1979                         
1980 fa8f be 7f 34           GETLIN LDX    BUFBEG   ;SET POINTER TO ONE LESS THAN THE BEGINNING OF THE LINE BUFFER
1981 fa92 5f                        CLRB            ;ACCB HOLS THE LAST INPUT CHAR
1982                         
1983 fa93 bc 7f 36           NXTCHR CPX    BUFEND   ;CHECK CURRENT LINE END AGAINST BUFFER END
1984 fa96 26 09                     BNE    GETIT
1985                         
1986                         ;LINE TOO LONG - ABORT IT AS IF A CONTROL-C HAD BEEN TYPED
1987 fa98 8e fc 21                  LDX    #MSGLTL  ;GET MESSAGE
1988 fa9b bd fb 51                  JSR    OUTSTR   ;OUTPUT IT
1989 fa9e c6 03                     LDB    #3       ;PUT CTL-C IN ACCB
1990 faa0 39                        RTS
1991                         
1992 faa1 bd fb 62           GETIT  JSR    INPCHR   ;GET A CHARACTER (RETURNED IN ACCA)
1993 faa4 84 7f                     ANDA   #127     ;DROP PARITY BIT
1994                         
1995                         ;CONTROL-Z COPIES FROM PRESENT POSITION TO PREVIOUS END OF LINE
1996 faa6 81 1a                     CMPA   #26      ;IS CHAR A CONTROL-A?
1997 faa8 26 04                     BNE    TSTCR
1998 faaa bd fb d8                  JSR    DOCRLF   ;YES, TYPE CR-LF
1999 faad 39                        RTS
2000 faae 81 0d              TSTCR  CMPA   #13      ;IS CHAR A CR?
2001 fab0 27 04                     BEQ    TSTCR1
2002 fab2 81 0a                     CMPA   #10      ;OR A LF?
2003 fab4 26 0d                     BNE    NOTEOL
2004 fab6 30 01              TSTCR1 LEAX   1,X
2005 fab8 a7 84                     STA    ,X       ;YES, STORE THE TERMINATOR
2006 faba 7d 7f 31                  TST    HDXFLG   ;TEST FOR HALF-DUPLEX TERMINAL
2007 fabd 26 03                     BNE    TSTCR2
2008 fabf bd fb d8                  JSR    DOCRLF   ;TYPE CR-LF
2009 fac2 39                 TSTCR2 RTS             ;NOW RETURN
2010                         
2011 fac3 81 03              NOTEOL CMPA   #3       ;IS CHAR A CONTROL-C?
2012 fac5 26 08                     BNE    NOTCTC
2013                         ;ECHO AN UP-ARROW
2014 fac7 1f 89                     TFR    A,B      ;RETURN CONTROL-C IN ACCB
2015 fac9 86 5e                     LDA    #'^'
2016 facb bd fb 80                  JSR    OUTCHR
2017 face 39                        RTS
2018                         
2019 facf 81 08              NOTCTC CMPA   #DELETE  ;NO, IS IT DELETE
2020 fad1 27 29                     BEQ    RUBNOW   ;IF YES, GO TO RUBNOW
2021                         
2022                         ;CONVERT LOWER CASE TO UPPER CASE
2023 fad3 81 60                     CMPA   #$60     ;BELOW L.C. A?
2024 fad5 23 06                     BLS    STORIT
2025 fad7 81 7a                     CMPA   #$7A     ;ABOVE L.C. Z?
2026 fad9 22 02                     BHI    STORIT
2027 fadb 80 20                     SUBA   #32      ;CONVERT L.C. ALPHABETIC TO U.C.
2028                         
2029 fadd 30 01              STORIT LEAX   1,X      ;NOT A DELETE, SO ADVANCE TO NEXT CHARACTER
2030 fadf a7 84                     STA    ,X       ;STORE IT IN INPLIN
2031                         
2032 fae1 c1 08                     CMPB   #DELETE  ;IS LAST CHAR A DELETE?
2033 fae3 27 04                     BEQ    OUTBAK   ;IF SO. GO TO OUTBAK
2034 fae5 1f 89                     TFR    A,B      ;ITS NOT, UPDATE LAST CHAR
2035 fae7 20 09                     BRA    ECHO     ;GO ECHO IT
2036                         
2037                         ;LAST CHAR WAS A DELETE, BUT THIS ONE ISN'T
2038 fae9 1f 89              OUTBAK TFR    A,B      ;UPDATE LAST CHAR
2039 faeb 86 5c                     LDA    #BAKSLA  ;PRINT A -
2040 faed bd fb 80                  JSR    OUTCHR   ;BACKSLASH
2041 faf0 1f 98                     TFR    B,A      ;RESTORE CURRENT CHAR FOR ECHO
2042 faf2 7d 7f 31           ECHO   TST    HDXFLG   ;TEST FOR HALF DUPLEX TERMINAL
2043 faf5 26 03                     BNE    ECHO1
2044 faf7 bd fb 80                  JSR    OUTCHR   ;NOW ECHO IT
2045 fafa 20 97              ECHO1  BRA    NXTCHR   ;GET ANOTHER
2046                         ;
2047                         ; CURRENT CHARACTER IS A DELETE
2048                         ; TEST LINE LENGTH - IT ITS ZERO, IGNORE THIS DELETE SINCE
2049                         ; WE CAN'T DELETE PRIOR TO FIRST CHARACTER IN INPUT LINE
2050 fafc bc 7f 34           RUBNOW CPX    BUFBEG
2051 faff 27 92                     BEQ    NXTCHR
2052 fb01 c1 08                     CMPB   #DELETE  ;WAS LAST CHAR A DELETE?
2053 fb03 27 07                     BEQ    LASWAS
2054                         
2055                         ;LAST CHAR WASN'T A DELETE
2056 fb05 1f 89                    TFR     A,B      ;UPDATE LAST CHAR (WITH A DELETE)
2057 fb07 86 5c                    LDA     #BAKSLA  ;PRINT A -
2058 fb09 bd fb 80                 JSR     OUTCHR   ;BACKSLASH
2059                         ;LAST CHAR WAS A DELETE
2060 fb0c a6 84              LASWAS LDA    ,X       ;GET THE CHAR TO BE DELETED
2061 fb0e 30 1f                     LEAX   -1,X     ;DECREMENT LINE POINTER
2062 fb10 20 e0                     BRA    ECHO     ;ECHO DELETED CHARACTER
2063                         
2064                         ;======================================================
2065                         ;INITIALIZATION ROUTINE
2066                         ;DISABLE INTERRUPTS
2067 fb12 1a 10                     ORCC   #$10     ;SEI
2068 fb14 86 01              INITAL LDA    #1
2069 fb16 b7 7f 18                  STA    IBCODE   ;SET INPUT BASE TO HEX
2070 fb19 b7 7f 19                  STA    DBCODE   ;SET DISPLAY BASE TO HEX
2071                         ;SET UP DISPLAY BASE NUMBER
2072 fb1c 86 10                     LDA    #16
2073 fb1e b7 7f 1a                  STA    DBNBR
2074                         ;MAX # OF CHARACTERS PER LINE
2075 fb21 86 48                     LDA    #72
2076 fb23 b7 7f 33                  STA    CPLMAX
2077 fb26 7f 7f 2b                  CLR    INPFLG   ;DEFAULT INPUT FROM THE TERMINAL
2078 fb29 7f 7f 2e                  CLR    OUTFLG   ;DEFAULT OUTPUT TO THE TERMINAL
2079 fb2c 7f 7f 31                  CLR    HDXFLG   ;CLEAR HALF-DUPLEX FLAG
2080                         ;INITIALIZE ACIA1 & ACIA2 TO 8 BITS AND NO PARITY
2081                         ;RESET BOTH
2082 fb2f 86 03                     LDA    #3
2083 fb31 b7 a0 00                  STA    ACIA1-1
2084 fb34 b7 a0 00                  STA    ACIA2-1
2085                         ;SET EM UP
2086 fb37 86 15                     LDA    #$15
2087 fb39 b7 a0 00                  STA    ACIA1-1
2088 fb3c b7 a0 00                  STA    ACIA2-1
2089                         ;SET UP SWI INTERRUPT ADDRESS POINTER
2090 fb3f 8e f1 28                  LDX    #TYPSWI  ;TYPE "SWI" & DO "REG" COMMAND
2091 fb42 bf 7f 08                  STX    SWIVEC
2092                         ;INITIALIZE TO MONDEB'S COMMAND LISTS
2093 fb45 8e f9 af                  LDX    #COMLST-1
2094 fb48 bf 7f 10                  STX    COMADR
2095                         ;TIME CONSTANT FOR A 2 MICROSECOND CLOCK
2096 fb4b 86 00                     LDA    #256
2097 fb4d b7 7f eb                  STA    TIMCON
2098 fb50 39                        RTS
2099                         
2100                         ;======================================================
2101                         ;OUTPUT A CHARACTER STRING WHICH BEGINS AT THE ADDRESS IN THE INDEX REGISTER
2102                         ;ACCA & ACCB ARE PRESERVED
2103                         ;IX IS LEFT POINTING TO THE STRING TERMINATOR
2104 fb51 34 02              OUTSTR PSHS   A
2105 fb53 a6 84              OUTST1 LDA    ,X       ;GET CHAR POINTED TO
2106 fb55 81 04                     CMPA   #4       ;IS IT A STRING TERMINATOR?
2107 fb57 27 06                     BEQ    OUTEND   ;DONE IF IT IS
2108 fb59 8d 25                     BSR    OUTCHR   ;ISN'T, OUTPUT IT
2109 fb5b 30 01                     LEAX   1,X      ;ON TO NEXT CHARACTER
2110 fb5d 20 f4                     BRA    OUTST1
2111 fb5f 35 02              OUTEND PULS   A
2112 fb61 39                        RTS             ;RETURN
2113                         
2114                         ;======================================================
2115                         ;INPUT A CHARACTER FROM AN ACIA TO ACCA
2116                         ;IF INPFLG = 0, INPUT IS FROM TERMINAL ACIA
2117                         ;IF INPFLG = 0, INPUT IS FROM ANY ACIA
2118                         ;ACCB & IX ARE PRESERVED
2119                         
2120 fb62 bf 7f db           INPCHR STX    XTEMP    ;SAVE IX
2121 fb65 7d 7f 2b                  TST    INPFLG   ;TEST INPUT SOURCE FLAG
2122 fb68 26 05                     BNE    INPCH1
2123                         ;INPFLG=0: INPUT FROM TERMINAL ACIA
2124 fb6a 8e a0 01                  LDX    #ACIA1
2125 fb6d 20 03                     BRA    INPCH2
2126                         ;INPFLG=1: INPUT FROM ANY ACIA
2127 fb6f be 7f 2c           INPCH1 LDX    INPADR   ;GET ITS ADDRESS
2128 fb72 30 1f              INPCH2 LEAX   -1,X     ;POINT TO CONTROL REG
2129 fb74 a6 84              INPCH3 LDA    ,X       ;GET ACIA STATUS BYTE
2130 fb76 85 01                     BITA   #1       ;CHAR WAITING?
2131 fb78 27 fa                     BEQ    INPCH3   ;IF NOT, TRY AGAIN
2132 fb7a a6 01                     LDA    1,X      ;YES, GET IT
2133 fb7c be 7f db                  LDX    XTEMP    ;RESTORE IX
2134 fb7f 39                        RTS
2135                         
2136                         ;======================================================
2137                         ;OUTPUT THE CHARACTER IN ACCA TO THE DESIRED OUTPUT DEVICE/LOCATION
2138                         ; IF OUTFLG = 0, OUTPUT IS TO TERMINAL
2139                         ; IF OUTFLG = 1, OUTPUT IS TO ACIA ADDRESS STORED IN OUTADR
2140                         ; IF OUTFLG = 2, OUTPUT IS TO ADDRESS IN OUTADR & THIS ADDR IS THEN INCREMENTED
2141                         ;ACCA, ACCB, & IX ARE PRESERVED
2142 fb80 34 04              OUTCHR PSHS   B        ;SAVE ACCB
2143 fb82 7d 7f 2e                  TST    OUTFLG   ;TEST OUTPUT DESTINATION FLAG
2144 fb85 27 24                     BEQ    OUTCH4   ;SKIP THIS CODE IF TERMINAL OUTPUT
2145                         
2146                         ;OUTPUT TO SOMETHING OTHER THAN THE TERMINAL
2147 fb87 bf 7f db                 STX     XTEMP    ;SAVE IX
2148 fb8a be 7f 2f                 LDX     OUTADR   ;GET OUTPUT CHAR DESTINATION ADDRESS
2149 fb8d c6 02                    LDB     #2
2150 fb8f f1 7f 2e                 CMPB    OUTFLG
2151 fb92 27 0a                    BEQ     OUTCH2
2152                         
2153                         ;OUTFLG = 1: ANY ACIA OUTPUT
2154 fb94 30 1f                     LEAX   -1,X     ;POINT TO ACIA STATUS REG
2155 fb96 e5 84              OUTCH1 BITB   ,X       ;TEST TDRE BIT
2156 fb98 27 fc                     BEQ    OUTCH1   ;LOOP IF NOT READY TO ACCEPT A NEW CHAR
2157 fb9a a7 01                     STA    1,X      ;NOW READY - SEND IT
2158 fb9c 20 07                     BRA    OUTCH3
2159                         
2160                         ;OUTCLF = 2: MEMORY OUTPUT
2161 fb9e a7 84              OUTCH2 STA    ,X       ;SAVE CHAR IN MEMORY
2162 fba0 30 01                     LEAX   1,X
2163 fba2 bf 7f 2f                  STX    OUTADR   ; UPDATE OUTPUT ADDRESS
2164                         
2165 fba5 be 7f db           OUTCH3 LDX    XTEMP    ;RESTORE IX
2166 fba8 35 04                     PULS   B        ;RESTORE ACCB
2167 fbaa 39                        RTS
2168                         
2169                         ;OUTFLG = 0: TERMINAL ACIA OUTPUT
2170                         ;IGNORE LINE FEEDS
2171 fbab 81 0a              OUTCH4 CMPA   #LF
2172 fbad 26 03                     BNE    OUTCH5
2173 fbaf 35 04                     PULS   B
2174 fbb1 39                        RTS
2175                         
2176 fbb2 81 0d              OUTCH5 CMPA   #CR      ;TEST FOR CARRIAGE RETURN
2177 fbb4 26 05                     BNE    OUTCH6
2178 fbb6 8d 20                     BSR    DOCRLF
2179 fbb8 35 04                     PULS   B
2180 fbba 39                        RTS
2181                         
2182 fbbb f6 7f 32           OUTCH6 LDB    CPLCNT   ;GET "CHARACTERS PER LINE" COUNT
2183 fbbe f1 7f 33                  CMPB   CPLMAX   ;COMPARE TO MAX PERMISSIBLE
2184 fbc1 2c 0b                     BGE    OUTCH7   ;SEND CR-LF IF GREATER
2185                         ;LESS THAN MAX, BUT ALSO SEND CR-LF IF 10 FROM END AND PRINTING A SPACE
2186 fbc3 cb 0a                     ADDB   #10
2187 fbc5 f1 7f 33                  CMPB   CPLMAX
2188 fbc8 2d 06                     BLT    OUTCH8
2189 fbca 81 20                     CMPA   #$20     ;NEAR END, TEST IF ABOUT TO PRINT A SPACE
2190 fbcc 26 02                     BNE    OUTCH8
2191                         
2192                         ;TERMINAL LINE FULL OR NEARLY FULL - INTERJECT A CR-LF
2193 fbce 8d 08              OUTCH7 BSR    DOCRLF
2194 fbd0 7c 7f 32           OUTCH8 INC    CPLCNT   ;BUMP COUNTER
2195 fbd3 8d 17                     BSR    TOACIA   ;SEND IT TO ACIA1
2196 fbd5 35 04                     PULS   B
2197 fbd7 39                        RTS
2198                         
2199                         ;======================================================
2200                         ;SEND A CARRIAGE RETURN-LINE FEED TO THE TERMINAL
2201                         ;ACCA, ACCB, & IX ARE PRESERVED
2202 fbd8 34 02              DOCRLF PSHS   A
2203 fbda 34 04                     PSHS   B
2204 fbdc 86 0d                     LDA    #CR
2205 fbde 8d 0c                     BSR    TOACIA
2206 fbe0 86 0a                     LDA    #LF
2207 fbe2 8d 08                     BSR    TOACIA
2208 fbe4 7f 7f 32                  CLR    CPLCNT   ;ZERO "CHARACTERS PER LINE" COUNT
2209 fbe7 35 04                     PULS   B
2210 fbe9 35 02                     PULS   A
2211 fbeb 39                        RTS
2212                         
2213                         ;======================================================
2214                         ;PUT CHAR IN ACCA INTO TERMINAL ACIA
2215                         ;ACCA, ACCB, & IX ARE PRESERVED
2216 fbec 34 02              TOACIA PSHS   A        ;SAVE CHAR
2217 fbee 86 02                     LDA    #2       ;GET ACIA TRANSMIT REG STATUS BIT
2218 fbf0 b5 a0 00           TOACI1 BITA   ACIA1-1  ;REGISTER EMPTY?
2219 fbf3 27 fb                     BEQ    TOACI1   ;IF NOT, LOOP BACK
2220 fbf5 35 02                     PULS   A        ;YES, RESTORE CHARACTER
2221 fbf7 b7 a0 01                  STA    ACIA1    ;SEND IT
2222 fbfa 39                        RTS
2223                         
2224                         ;======================================================
2225                         ;MISC TEST
2226 fbfb 4d 4f 4e 44 45 42  MSGHED FCC    "MONDEB 6809 1.00 09-Mar-2019" ;MONITOR HEADER TYPEOUT
     20 36 38 30 39 20
     31 2e 30 30 20 30
     39 2d 4d 61 72 2d
     32 30 31 39
2227 fc17 0d 04                     FCB    CR,4
2228                         
2229 fc19 2a                 MSGPRM FCC   "*"        ;PROMPT STRING
2230 fc1a 04                        FCB    4
2231                         
2232 fc1b 0d                 MSGSWI FCB    CR
2233 fc1c 53 57 49 3a               FCC    "SWI:"
2234 fc20 04                        FCB    4
2235                         
2236 fc21 54 4f 4f 20 4c 4f  MSGLTL FCC    "TOO LONG" ; TYPED IF INPUT LINE IS TOO LONG
     4e 47
2237 fc29 04                        FCB    4
2238                         
2239 fc2a 4e 4f 54 20 53 45  MSGNBR FCC    "NOT SET" ; BREAK NOT SET
     54
2240 fc31 04                        FCB    4
2241                         
2242 fc32 53 45 54 20 40 20  MSGBAT FCC    "SET @ " ; BREAK AT -
2243 fc38 04                        FCB    4
2244                         
2245 fc39 4f 4b              MSGVER FCC    "OK"     ;CHECKSUM VERIFIES
2246 fc3b 04                        FCB    4
2247                         
2248 fc3c 43 48 45 43 4b 53  MSGNVE FCC    "CHECKSUM ERROR " ; FOR VERIFY & LOAD COMMANDS
     55 4d 20 45 52 52
     4f 52 20
2249 fc4b 04                        FCB    4
2250                         
2251 fc4c 43 41 4e 27 54 20  MSGCCL FCC    "CAN'T CLEAR" ; TEST COMMAND
     43 4c 45 41 52
2252 fc57 04                        FCB    4
2253                         
2254 fc58 43 41 4e 27 54 20  MSGCSO FCC    "CAN'T SET TO ONES" ; TEST COMMAND
     53 45 54 20 54 4f
     20 4f 4e 45 53
2255 fc69 04                        FCB    4
2256                         
2257 fc6a 53 55 4d 20 49 53  MSGSIS FCC    "SUM IS " ; COMPARE COMMAND
     20
2258 fc71 04                        FCB    4
2259                         
2260 fc72 2c 20 44 49 46 46  MSGDIS FCC    ", DIFF IS " ; COMPARE COMMAND
     20 49 53 20
2261 fc7c 04                        FCB    4
2262                         
2263 fc7d 0d 0a              MSGS0  FCB    CR,LF
2264 fc7f 53 30 30 36 30 30         FCC    "S00600004844521B"
     30 30 34 38 34 34
     35 32 31 42
2265 fc8f 04                        FCB    4
2266                         
2267 fc90 0d 0a              MSGS1  FCB    CR,LF
2268 fc92 53 31                     FCC    "S1"
2269 fc94 04                        FCB    4
2270                         
2271 fc95 0d 0a              MSGS9  FCB    CR,LF
2272 fc97 53 39 30 33 30 30         FCC    "S9030000FC"
     30 30 46 43
2273 fca1 0d 0a 04                  FCB    CR,LF,4
2274                         
2275 fca4 43 48 41 52 20 4e  MSGCNH FCC    "CHAR NOT HEX" ;USE IN LOAD COMMAND
     4f 54 20 48 45 58
2276 fcb0 0d 04                     FCB    CR,4
2277                         
2278                         ;======================================================
2279                         ;INTERRUPT HANDLING CODE
2280 fcb2 6e 9f 7f 00        INTADR JMP    [INTVEC]
2281                         
2282                         ;*****
2283 fcb6 6e 9f 7f 02        FIRQADR JMP   [FIRQVC]
2284                         
2285                         ;*****
2286 fcba 6e 9f 7f 04        NMIADR JMP    [NMIVEC]
2287                         
2288                         ;*****
2289 fcbe 6e 9f 7f 06        RSRVDADR JMP  [RSRVDVC]
2290                         
2291                         ;*****
2292 fcc2 7e f0 00           RESADR JMP    START
2293                         
2294                         ;*****
2295 fcc5 10 ff 7f 0e        SWIADR STS    SP       ;SAVE STACK POINTER OF PROGRAM BEING DEBUGGED
2296 fcc9 6e 9f 7f 08               JMP    [SWIVEC]
2297                         
2298                         ;*****
2299                         SWI2ADR
2300 fccd 10 ff 7f 0e               STS    SP       ;SAVE STACK POINTER OF PROGRAM BEING DEBUGGED
2301 fcd1 6e 9f 7f 0a               JMP    [SWI2VC]
2302                         
2303                         ;*****
2304                         SWI3ADR
2305 fcd5 10 ff 7f 0e               STS    SP       ;SAVE STACK POINTER OF PROGRAM BEING DEBUGGED
2306 fcd9 6e 9f 7f 0c               JMP    [SWI3VC]
2307                         
2308                         ;*****
2309                         ; Comment out the next two lines if running from RAM.
2310 fcdd ff ff ff ff ff ff         FILL   $FF, $FFB1-*
     ff ff ff ff ff ff
     ff ff ff ff ff ff
     ff ff ff ff ff ff
     ff ff ff ff ff ff
     ff ff ff ff ff ff
     ff ff ff ff ff ff
     ff ff ff ff ff ff
     ff ff ff ff ff ff
     ff ff ff ff ff ff
     ff ff ff ff
2311 ffb1                           ORG    $FFB1    ;CALCULATED SO INTERRUPT VECTORS BELOW ARE AT CORRECT ADDRESSES
2312                         ;**************************************************
2313                         
2314 ffb1 7e f6 46                  JMP    TIMDEL   ;TIME DELAY FOR # OF MS SPECIFIED BY IX
2315 ffb4 7e f3 ad                  JMP    CKSUM    ;RETURN CHECKSUM OF AN ADDRESS RANGE IN ACCA
2316 ffb7 7e f9 97                  JMP    GETCHR   ;RETURN (IN ACCB) CHAR POINTED TO BY LINPTR
2317 ffba 7e f9 a5                  JMP    GETLST   ;RETURN (IN ACCA) CHAR POINTED TO BY LISPTR
2318 ffbd 7e f7 cb                  JMP    GTRANG   ;PICK UP AN ADDRESS RANGE IN RANGLO & RANGHI
2319 ffc0 7e f8 16                  JMP    NUMBER   ;PICK UP A NUMBER & RETURN IT IN NBRHI & NBRLO
2320 ffc3 7e f7 33                  JMP    SKPDLM   ;SKIP OVER INPUT LINE DELIMITERS
2321 ffc6 7e f7 60                  JMP    TSTDLM   ;TEST CHAR IN ACCB FOR A DELIMITER
2322 ffc9 7e f7 55                  JMP    TSTEOL   ;TEST CHAR IN ACCA FOR END-OF-LINE
2323 ffcc 7e f6 8a                  JMP    COMAND   ;SEARCH SPECIFIED COMMAND LIST FOR A COMMAND
2324 ffcf 7e f6 f4                  JMP    TYPCMD   ;TYPES OUT COMMAND NUMBER "COMNUM" IN LIST ACCA
2325 ffd2 7e f8 cc                  JMP    OUT1BY   ;DISPLAY THE 1 BYTE NUMBER POINTED AT BY IX
2326 ffd5 7e f8 d5                  JMP    OUT2BY   ;DISPLAY THE 2 BYTE NUMBER POINTED AT BY IX
2327 ffd8 7e fa 8f                  JMP    GETLIN   ;GET A LINE OF INPUT INTO THE TTY BUFFER
2328 ffdb 7e fb 51                  JMP    OUTSTR   ;OUTPUT CHAR STRING IX POINTS TO
2329 ffde 7e fb d8                  JMP    DOCRLF   ;SEND CR-LF WITH DELAY & ZERO LINE COUNT
2330 ffe1 7e fb 80                  JMP    OUTCHR   ;LIKE TOACIA, BUT WITH FOLDING, CR DELAY, & LF INSERTION
2331 ffe4 7e fb ec                  JMP    TOACIA   ;SEND ACCA TO ACIA1
2332 ffe7 7e fb 62                  JMP    INPCHR   ;GET A CHAR FROM AN ACIA & RETURN IT IN ACCA
2333 ffea 7e f0 27                  JMP    PROMPT   ;TO PROMPT FOR A NEW COMMAND
2334 ffed 7e f0 00                  JMP    START    ;START OF MONDEB
2335                         ;**************************************************
2336                         ;INTERRUPT VECTORS
2337 fff0 fc be                     FDB   RSRVDADR  ;RESERVED INTERRUPT
2338 fff2 fc d5                     FDB   SWI3ADR   ;SWI3 INTERRUPT
2339 fff4 fc cd                     FDB   SWI2ADR   ;SWI2 INTERRUPT
2340 fff6 fc b6                     FDB   FIRQADR   ;FAST INTERRUPT
2341 fff8 fc b2                     FDB   INTADR    ;REGULAR INTERRUPT
2342 fffa fc c5                     FDB   SWIADR    ;SOFTWARE INTERRUPT
2343 fffc fc ba                     FDB   NMIADR    ;NON-MASKABLE INTERRUPT
2344 fffe fc c2                     FDB   RESADR    ;RESET INTERRUPT
2345                         
2346                         ;**************************************************
2347                         ;VARIABLES FOR INTER-ROUTINE COMMUNICATION
2348 7f00                           ORG    $7F00
2349 7f00                    INTVEC RMB    2        ;INTERRUPT ADDRESS POINTER
2350 7f02                    FIRQVC RMB    2        ;FAST INTERRUPT ADDRESS POINTER
2351 7f04                    NMIVEC RMB    2        ;NON-MASKABLE INTERRUPT ADDRESS POINTER
2352 7f06                    RSRVDVC RMB   2        ;RESERVED INTERRUPT ADDRESS POINTER
2353 7f08                    SWIVEC RMB    2        ;SOFTWARE INTERRUPT ADDRESS POINTER
2354 7f0a                    SWI2VC RMB    2        ;SOFTWARE INTERRUPT2 ADDRESS POINTER
2355 7f0c                    SWI3VC RMB    2        ;SOFTWARE INTERRUPT3 ADDRESS POINTER
2356 7f0e                    SP     RMB    2        ;SAVED STACK POINTER
2357 7f10                    COMADR RMB    2        ;ADDRESS OF BEGINNING OF COMMAND LISTS FOR COMMAND
2358 7f12                    SYNPTR RMB    2        ;INPUT LINE CHARACTER POINTER FOR GOOD SYNTAX
2359 7f14                    LINPTR RMB    2        ;INPUT LINE CHARACTER POINTER (CONTENT = OR > CONTENT OF SYNPTR)
2360 7f16                    BOLFLG RMB    1        ;"BEGINNING OF LINE" FLAG
2361 7f17                    DELIM  RMB    1        ;CHARACTER(S) PERMITTED AS VALID COMMAND/MODIFIER DELIMITER
2362 7f18                    IBCODE RMB    1        ;INPUT BASE (1=HEX, 2=DEC, 3=OCT)
2363 7f19                    DBCODE RMB    1        ;DISPLAY BASE (1=HEX, 2=DEC, 3=OCT, 4=BIN)
2364 7f1a                    DBNBR  RMB    1        ;DISPLAY BASE NUMBER (E.G., 16,10M8M OR 2)
2365                         
2366 7f1b                    NBRHI  RMB    1        ;MOST SIGNIFICANT BYTE OF SCANNED NUMBER
2367 7f1c                    NBRLO  RMB    1        ;LEAST SIGNIFICANT BYTE OF SCANNED NUMBER
2368                         
2369 7f1d                    RANGLO RMB    2        ;RANGE LOWER LIMIT PICKED UP BY GTRANG
2370 7f1f                    RANGHI RMB    2        ;RANGE UPPER LIMIT PICKED UP BY GTRANG
2371                         
2372 7f21                    LASTGO RMB    2        ;LAST SPECIFIED GOTO ADDRESS
2373                         
2374 7f23                    VERFRM RMB    2        ;BEGINNING ADDRESS OF RANGE TO CHECKSUM VERIFY
2375 7f25                    VERTO  RMB    2        ;ENDING ADDRESS OF RANGE TO CHECKSUM VERIFY
2376                         
2377 7f27                    CHKSUM RMB    1        ;CHECKSUM OF RANGE GIVEN IN THE VERIFY COMMAND
2378                         
2379 7f28                    BRKADR RMB    2        ;ADDRESS OF INSERTED BREAKPOINT
2380 7f2a                    BRKINS RMB    1        ;INSTRUCTION WHICH SHOULD BE THERE NORMALLY
2381                         
2382 7f2b                    INPFLG RMB    1        ;ALTERNATE INPUT DESTINATION FLAG
2383 7f2c                    INPADR RMB    2        ;ALTERNATE ADDRESS THAT THE INPUT CHARACTERS ARE TO COME FROM
2384                         
2385 7f2e                    OUTFLG RMB    1        ;ALTERNATE OUTPUT DESTINATION FLAG
2386 7f2f                    OUTADR RMB    2        ;ALTERNATE ADDRESS THAT THE OUTPUT CHARACTERS ARE TO GO TO
2387                         
2388 7f31                    HDXFLG RMB    1        ;HALF-DUPLEX TERMINAL FLAG (IF NON-ZERO, NO ECHO)
2389                         
2390 7f32                    CPLCNT RMB    1        ;"CHARACTERS PER LINE" COUNT
2391 7f33                    CPLMAX RMB    1        ;"CHARACTERS PER LINE" MAXIMUM
2392 7f34                    BUFBEG RMB    2        ;INPUT LINE START OF BUFFER
2393 7f36                    BUFEND RMB    2        ;INPUT LINE END OF BUFFER
2394 7f38                    TTYBUF RMB    72       ;START OF INPUT LINE BUFFER
2395 7f80                    TTYEND RMB    1        ;END OF INPUT LINE BUFFER
2396 7f81                           RMB    56       ;MAIN STACK STORAGE
2397 7fb9                    STACK  RMB    12       ;STACK STORAGE FOR RTI INSTRUCTION
2398                         
2399                         ;TEMPORARY (LOCALLY USED) VARIABLES
2400 7fc5                    TEMP1  RMB    2        ;IN: MAIN
2401 7fc7                    TEMP2  RMB    2        ;IN: MAIN
2402 7fc9                    TEMP3  RMB    2        ;IN: FNDSTR,MAIN
2403 7fcb                    TEMP4  RMB    2        ;IN: MAIN
2404 7fcd                    TEMP5  RMB    2        ;IN: MAIN
2405 7fcf                    TEMP6  RMB    2        ;IN: MAIN
2406 7fd1                    TEMP7  RMB    2        ;IN: MAIN
2407 7fd3                    TEMP8  RMB    2        ;IN: MAIN
2408 7fd5                    TEMP9  RMB    2        ;IN: MAIN
2409 7fd7                    TEMP10 RMB    2        ;IN: MAIN
2410 7fd9                    TEMP11 RMB    2        ;IN: MAIN
2411                         
2412                         ;XTEMP IS NOT TO BE USED TO SAVE IX BETWEEN ROUTINES
2413 7fdb                    XTEMP  RMB    2        ;USED BY DUMP,TYPCMD,OUTNUM
2414 7fdd                    XTEMP1 RMB    2        ;USED BY OUTNUM
2415 7fdf                    XTEMP2 RMB    2        ;USED BY NUMBER
2416 7fe1                    NUMMAT RMB    1        ;USED IN COMMAND
2417 7fe2                    LISNUM RMB    1        ;USED ON COMMAND
2418 7fe3                    COMNUM RMB    1        ;USED IN COMMAND
2419 7fe4                    LISPTR RMB    2        ;USED IN COMMAND
2420 7fe6                    DECDIG RMB    1        ;DECIMAL DIGIT BEING BUILT (DECIMAL OUTPUT BASE)
2421 7fe7                    NUMBHI RMB    1        ;USED BY OUTNUM
2422 7fe8                    NUMBLO RMB    1        ;USED BY OUTNUM
2423 7fe9                    NBR2X  RMB    2        ;USED BY NUMBER
2424 7feb                    TIMCON RMB    2        ;DELAY TIME CONSTANT
2425 7fed                    BYTECT RMB    1        ;RECORD BYTE COUNT USED IN LOAD COMMAND
2426 7fee                    CKSM   RMB    1        ;RECORD CHECKSUM USED IN LOAD COMMAND
2427                         
2428                         ;CONVENIENT EQUIVALENCES FOR LOCAL VARIABLES
2429 7fc5                    MEMADR EQU    TEMP1    ;DISPLAY,SET,SEARCH,TEST
2430 7fc7                    STRNUM EQU    TEMP2    ;FNDSTR
2431 7fc8                    EOSCHR EQU    TEMP2+1  ;FNDSTR
2432                         
2433                         ;FOR "SEARCH" COMMAND
2434 7fc7                    BYTPTR EQU    TEMP2
2435 7fc9                    NBYTES EQU    TEMP3
2436 7fca                    NBRMAT EQU    TEMP3+1
2437 7fcb                    BYTSTR EQU    TEMP4
2438                         
2439                         ;      END
